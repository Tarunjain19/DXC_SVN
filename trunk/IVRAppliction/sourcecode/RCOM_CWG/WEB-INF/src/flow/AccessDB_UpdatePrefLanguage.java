package flow;

import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.postpaid.model.UpdateLanguage;
import com.rcom.postpaid.resource.IVRDBServiceInstance;
import com.servion.postpaid.utils.AppDataMap;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.DynamicMenu;
import com.servion.postpaid.utils.PrintStackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-02  09:50:48 PM
 */
public class AccessDB_UpdatePrefLanguage extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		UpdateLanguage updateLanguage = null;
		String strCurrentLanguage = "", strCurrentLanguageCode = "", strMDN = "", strInitialAudios = "", strApplicationName = "";
		IVRDataBean ivrDataBean = null;
		AppProperties appProperties = null;
		DynamicMenu dynamicMenu = null;
		ArrayList<String> dynamicValueList = null;
		
		
		try{
			
			dynamicMenu = new DynamicMenu();
			dynamicValueList = new ArrayList<String>();
			
			appProperties = (AppProperties) mySession.getProperty(Constants.AudioPropertyInstance);
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			strCurrentLanguage = mySession.getCurrentLanguage();
			
			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			IVRREPORTDATA ivrreportdata = getReportObject.getIvrreportdata();
			CALLINFO callInfo = ivrreportdata.getCALLINFO();
			
			strApplicationName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
			strMDN = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue();
			strCurrentLanguage = mySession.getVariableField(IProjectVariables.CHANGE_LANGUAGE__MN___0_0_4_3, IProjectVariables.CHANGE_LANGUAGE__MN___0_0_4_3_FIELD_VALUE).getStringValue();
			
			callInfo.setLANGUAGETO(strCurrentLanguage);
			
			updateLanguage = new UpdateLanguage();
			updateLanguage.setMdn(strMDN);
			
			if(strCurrentLanguage!=null){
				
				strCurrentLanguageCode = (String) AppDataMap.getInstance(Constants.POSTPAID).getAppData(strCurrentLanguage);
				updateLanguage.setLanguageCode(strCurrentLanguageCode);
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> Language Code:"+strCurrentLanguageCode);
			}
			updateLanguage = IVRDBServiceInstance.getInstance().updatePreferredLanguage(ivrDataBean, updateLanguage);
			if(updateLanguage.getFlag()!=null){
				if(updateLanguage.getFlag().equalsIgnoreCase(Constants.Success)){
					
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> Property key:"+strApplicationName+Constants.HYPEN+Constants.PA_0089);
					dynamicValueList.add(appProperties.getIVRProp(strCurrentLanguage));
					strInitialAudios = appProperties.getIVRProp(strApplicationName+Constants.HYPEN+Constants.PA_0089);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> Initial audio before processing:"+strInitialAudios);
					strInitialAudios = dynamicMenu.playPrompt(dynamicValueList, strInitialAudios, ""+dynamicValueList.size(), info);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> Initial audio after processing:"+strInitialAudios);
					
					mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_INITIAL_AUDIOS).setValue(strInitialAudios);
					mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.No);
					
				}else{
					mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
				}
			}else{
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
			}
			
			
		}catch (Exception e) {
			PrintStackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
			
		}finally{
			updateLanguage = null;
		}
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-02  09:50:48 PM
	 */
	public AccessDB_UpdatePrefLanguage() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-NOV-08  05:50:16 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-NOV-08  05:50:16 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-NOV-08  05:50:16 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(3015)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_PA_0088", "Linkdown").setDebugId(3016));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("LanguageUpdated_PA_0089", "Continue").setDebugId(3018));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
