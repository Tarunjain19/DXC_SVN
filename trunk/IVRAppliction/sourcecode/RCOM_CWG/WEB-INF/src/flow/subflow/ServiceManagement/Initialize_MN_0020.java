package flow.subflow.ServiceManagement;

import java.util.ArrayList;
import java.util.HashMap;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.DynamicMenu;
import com.servion.postpaid.utils.PrintStackTrace;
import com.servion.util.AppProperties;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-05  04:51:25 PM
 */
public class Initialize_MN_0020 extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		String key = Constants.EMPTY_STRING,appName = Constants.EMPTY_STRING;
		String selectedOfferID =Constants.EMPTY_STRING;
		AppProperties audioConfigInstance = null;
		HashMap<String,String> offerPhraseMap = null;
		ArrayList<String> dynamicWave = null;
		String initialPrompt = null;
		String offerID =Constants.EMPTY_STRING;
		
		try
		{
			appName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
			selectedOfferID = mySession.getVariableField(IProjectVariables.PACK_NAME__MN___0_0_1_9,IProjectVariables.PACK_NAME__MN___0_0_1_9_FIELD_VALUE).getStringValue();
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Application Name :: "+appName);
			
			key = appName+Constants.HYPEN+Constants.MN_0020;
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Key :: "+key);
			audioConfigInstance = (AppProperties) mySession.getProperty(Constants.AudioPropertyInstance);
			initialPrompt = audioConfigInstance.getIVRProp(key);
			dynamicWave = new ArrayList<String>();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "VAS Confirmation initial Prompt Before Dynamic Insertion:: "+initialPrompt);
			offerPhraseMap = (HashMap<String, String>) mySession.getProperty(Constants.OFFER_PHRASE_MAP);
			offerID = offerPhraseMap.get(selectedOfferID);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Offer Selected :: "+offerID);
			dynamicWave.add(offerID);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Pack Wave :"+offerID);
			
			DynamicMenu objDynamicMenu = new DynamicMenu();
			initialPrompt=objDynamicMenu.playPrompt(dynamicWave, initialPrompt, ""+dynamicWave.size(), trace);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "VAS initial Prompt :: "+initialPrompt);
			
			mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_INITIAL_AUDIOS).setValue(initialPrompt);
			
			
		}
		catch(Exception e)
		{
			PrintStackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in VAS initial prompt :: "+e);
		}
		finally
		{
				initialPrompt = null;
		}
		
	
	}
	
	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-05  04:51:25 PM
	 */
	public Initialize_MN_0020() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-NOV-08  05:50:18 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("ServiceManagement-ConfirmPack_MN_0020", "Default");
		next.setDebugId(4705);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-NOV-08  05:50:18 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-NOV-08  05:50:18 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
