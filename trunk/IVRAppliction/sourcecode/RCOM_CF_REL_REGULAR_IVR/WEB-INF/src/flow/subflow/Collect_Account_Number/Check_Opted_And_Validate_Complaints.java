package flow.subflow.Collect_Account_Number;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.rcom.energy.DynamicMenu;
import com.rcom.energy.StackTrace;
import com.servion.rcom.hostinterface.view.ReqRegisterFireAndShockComplaint;
import com.servion.rcom.hostinterface.view.ResRegisterFireAndShockComplaint;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-26  02:03:56 PM
 */
public class Check_Opted_And_Validate_Complaints extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-26  02:03:56 PM
	 */
	public Check_Opted_And_Validate_Complaints() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:23 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:23 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:23 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:forFireShockComplaints", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(353)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:networkError", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(360)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0051", false).setDebugId(366));
				actions.add(new com.avaya.sce.runtime.Next("Collect_Account_Number-LinkDown", "network_error").setDebugId(361));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Tagging:CallFlowNode", "CONSTANTS:Collect_Account_Number", false).setDebugId(1306));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "toRegisterComplaints:isComplaintRegistered", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(1105)).evaluate(mySession)) {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("Tagging:TaggingDescription", "CONSTANTS:TAG_FNS_SUCCESS", false).setDebugId(1112));
					actions.add(new com.avaya.sce.runtime.Next("Collect_Account_Number-Registered_Status_Annc", "Registered").setDebugId(363));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("Tagging:TaggingDescription", "CONSTANTS:TAG_FNS_UNSUCCESS", false).setDebugId(1114));
					actions.add(new com.avaya.sce.runtime.Next("Collect_Account_Number-Registered_Status_Annc", "NotRegistered").setDebugId(1107));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}

			}


		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Collect_Account_Number-registerComplaints", "powerInterruption").setDebugId(356));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		IVRWebService ivrWebService = null;
		ReqRegisterFireAndShockComplaint reqRegisterFireAndShockComplaint = null;
		ResRegisterFireAndShockComplaint resRegisterFireAndShockComplaint = null;
		String appName,key,initialPrompt,menuID,propertyFileName = null;
		String[] dynamicValue = null;
		try
		{
			if(AppConstants.Yes.equalsIgnoreCase(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_FOR_FIRE_SHOCK_COMPLAINTS).getStringValue()))
			{
				/** Request Formation To Register Complaint **/
				reqRegisterFireAndShockComplaint = new ReqRegisterFireAndShockComplaint();
				reqRegisterFireAndShockComplaint.setAccountNo(mySession.getVariableField(IProjectVariables.COLLECT__ACC_NUM__MN___0_0_0_9, IProjectVariables.COLLECT__ACC_NUM__MN___0_0_0_9_FIELD_VALUE).getStringValue());
				reqRegisterFireAndShockComplaint.setMDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue());
				reqRegisterFireAndShockComplaint.setComplaintByAccNo(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_COMPLAINT_BY_ACC_NO).getBooleanValue());
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "To Register Complaints Request :: "+reqRegisterFireAndShockComplaint.toString());
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Complaint By AccountNumber :: "+reqRegisterFireAndShockComplaint.isComplaintByAccNo());
				
				/** Getting Response for Register Complaints **/
				ivrWebService = new IVRWebServiceImpl();
				resRegisterFireAndShockComplaint = ivrWebService.registerFireAndShockComplaint((IVRDataBean)mySession.getProperty(AppConstants.IVR_DATA_BEAN), reqRegisterFireAndShockComplaint);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "To Register Complaints Response :: ResponceCode : "+resRegisterFireAndShockComplaint.getResponseCode()+" ,ComplaintNo : "+resRegisterFireAndShockComplaint.getComplaintNumber()+" ,isComplaintRegistered : "+resRegisterFireAndShockComplaint.isComplaintRegistered());
				
				if(resRegisterFireAndShockComplaint.getResponseCode().equalsIgnoreCase(AppConstants.WS_RESPONSE_SUCCESS))
				{
				/** Storing the data in Complex Variable **/
				mySession.getVariableField(IProjectVariables.TO_REGISTER_COMPLAINTS, IProjectVariables.TO_REGISTER_COMPLAINTS_FIELD_RESPONSE_CODE).setValue(resRegisterFireAndShockComplaint.getResponseCode());
				mySession.getVariableField(IProjectVariables.TO_REGISTER_COMPLAINTS, IProjectVariables.TO_REGISTER_COMPLAINTS_FIELD_COMPLAINT_NO).setValue(resRegisterFireAndShockComplaint.getComplaintNumber());
				mySession.getVariableField(IProjectVariables.TO_REGISTER_COMPLAINTS, IProjectVariables.TO_REGISTER_COMPLAINTS_FIELD_IS_COMPLAINT_REGISTERED).setValue(resRegisterFireAndShockComplaint.isComplaintRegistered());
				
				
				/** Formation Of DynamicAccouncement **/
				if(AppConstants.string_Zero.equalsIgnoreCase(resRegisterFireAndShockComplaint.getResponseCode()))
				{	
					appName = mySession.getVariable(IProjectVariables.APP__NAME).getSimpleVariable().getStringValue();
					if(resRegisterFireAndShockComplaint.isComplaintRegistered())
					{	
						dynamicValue = new String[AppConstants.One];
						menuID = AppConstants.PA_0009;propertyFileName = AppConstants.ComplaintSuccessAnnc_PA;
						key = appName+AppConstants.HYPEN_SEPERATOR+AppConstants.PA_0009;
						dynamicValue[AppConstants.Zero] = resRegisterFireAndShockComplaint.getComplaintNumber();
						/** For CR Commented  **/
						//dynamicValue[AppConstants.One] = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
					}
					else
					{
						dynamicValue = new String[AppConstants.One];
						menuID = AppConstants.PA_0010;propertyFileName = AppConstants.ComplaintUnsuccessAnnc_PA;
						key = appName+AppConstants.HYPEN_SEPERATOR+AppConstants.PA_0010;
						/** For CR Commented  **/
						//dynamicValue[AppConstants.Zero] = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
					}
					initialPrompt = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(key);
					
					/** Invocation Of DynamicMenu Forming method **/
					initialPrompt = DynamicMenu.playPrompt(dynamicValue, initialPrompt, AppConstants.NA, menuID, trace);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Injecting Initial Prompt for "+menuID+" :: "+initialPrompt);
					mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_NAME).setValue(propertyFileName);
					mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
				}
				else
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstants.Yes);
				}
				else
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstants.Yes);
			}
			
			
		}catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstants.Yes);
		StackTrace.PrintException(e);}
		finally
		{trace = null;reqRegisterFireAndShockComplaint=null;ivrWebService=null;resRegisterFireAndShockComplaint=null;initialPrompt=null;menuID=null;appName=null;key=null;dynamicValue=null;propertyFileName=null;}
	}
}
