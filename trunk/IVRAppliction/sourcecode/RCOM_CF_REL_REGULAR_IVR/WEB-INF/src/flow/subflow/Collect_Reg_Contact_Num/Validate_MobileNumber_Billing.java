package flow.subflow.Collect_Reg_Contact_Num;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.rcom.energy.StackTrace;
import com.servion.rcom.hostinterface.view.ReqAccountDetails;
import com.servion.rcom.hostinterface.view.ResAccountDetails;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-SEP-29  11:20:39 AM
 */
public class Validate_MobileNumber_Billing extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-SEP-29  11:20:39 AM
	 */
	public Validate_MobileNumber_Billing() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:22 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:22 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:22 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Billing_Flag", "CONSTANTS:TRUE", false).setDebugId(1878));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:networkError", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(1696)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0056", false).setDebugId(1697));
			actions.add(new com.avaya.sce.runtime.Next("Collect_Reg_Contact_Num-LinkDown", "networkError").setDebugId(1698));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "validateMobileNumber:isValidMDN", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:True", true).setDebugId(1700)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "AppVariables:IsSingleAccount", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(1701)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Collect_Reg_Contact_Num-Success", "(Single)").setDebugId(1702));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "AppVariables:IsNoAccount", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(1704)).evaluate(mySession)) {
						actions = new java.util.ArrayList(2);
						actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0013", false).setDebugId(1705));
						actions.add(new com.avaya.sce.runtime.Next("Collect_Reg_Contact_Num-NoAccOrMulAcc_PP_Billing", "NoAcc").setDebugId(2437));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					} else {
						actions = new java.util.ArrayList(2);
						actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0068", false).setDebugId(1707));
						actions.add(new com.avaya.sce.runtime.Next("Collect_Reg_Contact_Num-MulAcc_PP_Billing", "MulAcc").setDebugId(2438));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;
					}

				}


			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("AppVariables:InvalidCount").setDebugId(1710));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "AppVariables:InvalidCount", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "constant:three", true).setDebugId(1711)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Collect_Reg_Contact_Num-InvalidPhoneNumber_PA_0026", "re-collect").setDebugId(1712));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(3);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:InvalidCount", "constant:zero", false).setDebugId(1714));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0021", false).setDebugId(1715));
					actions.add(new com.avaya.sce.runtime.Next("Collect_Reg_Contact_Num-Exceeds_Attempt_PA_0047", "max_no_attempts").setDebugId(1716));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}

			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

@Override
public void requestBegin(SCESession mySession) {
	ITraceInfo trace = mySession.getTraceOutput();
	String key = null,appName = null,initialPrompt = null;
	String []dynamicList = new String[AppConstants.One];
	IVRWebService ivrWebService = null;
	ReqAccountDetails reqAccountDetails = null;
	ResAccountDetails resAccountDetails = null;
	
	try
	{	/** Request Formation to Validate Entered Account Number **/
		reqAccountDetails = new ReqAccountDetails();
		reqAccountDetails.setMDN(mySession.getVariableField(IProjectVariables.ENTER__MOBILE_NUM__MN___0_0_1_1, IProjectVariables.ENTER__MOBILE_NUM__MN___0_0_1_1_FIELD_VALUE).getStringValue());
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate Mobile Number Request :: Telephone Number : "+reqAccountDetails.getMDN());
		
		/** Getting Response for Validate Entered Account Number **/
		ivrWebService = new IVRWebServiceImpl();
		resAccountDetails = ivrWebService.getAccountDetails((IVRDataBean)mySession.getProperty(AppConstants.IVR_DATA_BEAN), reqAccountDetails);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate Mobile Number Response ::"+resAccountDetails.toString());
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate Mobile Number Response :: Responce Code : "+resAccountDetails.getResponseCode()+" ,IsValidMDN : "+ resAccountDetails.isValidMDN()+" ,isSingleAccount : "+resAccountDetails.isSingleAccountFound()+" ,isMultilpleAccount : "+resAccountDetails.isMulAccFound()+" , isNoAccountFound : "+resAccountDetails.isNoAccFound()+" ,Customer Name :"+resAccountDetails.getConsumerName());
	/*	Setting Instance
		MDN::9773528251
		  INFO: servion.util - IVR Config Property File changed and values will be Re-loaded
		strURL:http://10.185.82.53/CRMCustomPages/frmIVRIntegrationMobile.aspx?
		121936060.1234|Endpoint URL : http://10.185.82.53/CRMCustomPages/frmIVRIntegrationMobile.aspx?
		|Request Method : GET
		|IVR Serial No : 100
		Response :ResAccountDetails [responseCode=0, isValidMDN=true, isSingleAccountFound=true, isNoAccFound=false, isMulAccFound=false, accountNumber=150579225, consumerName=Mr. HARISINGH RAJUSINGH PUROHIT]
		Response Code : 0
		Is Valid MDN : true
		Is Single Account : true
		Is Multiple Account : false
		Is No Account Found : false
		Account No : 150579225
		Consumer Name : Mr. HARISINGH RAJUSINGH PUROHIT*/
		if(resAccountDetails.getResponseCode().equalsIgnoreCase(AppConstants.WS_RESPONSE_SUCCESS))
		{
		/** Storing the value into Complex Variable **/
		mySession.getVariableField(IProjectVariables.VALIDATE_MOBILE_NUMBER, IProjectVariables.VALIDATE_MOBILE_NUMBER_FIELD_RESPONSE_CODE).setValue(resAccountDetails.getResponseCode());
		mySession.getVariableField(IProjectVariables.VALIDATE_MOBILE_NUMBER, IProjectVariables.VALIDATE_MOBILE_NUMBER_FIELD_IS_VALID_MDN).setValue(resAccountDetails.isValidMDN());
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_MUL_ACCOUNT).setValue(resAccountDetails.isMulAccFound());
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_SINGLE_ACCOUNT).setValue(resAccountDetails.isSingleAccountFound());
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_NO_ACCOUNT).setValue(resAccountDetails.isNoAccFound());
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CUSTOMER_NAME).setValue(resAccountDetails.getConsumerName());
		
		if(resAccountDetails.isValidMDN())
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_VALID_MDN).setValue(reqAccountDetails.getMDN());
		
		if(resAccountDetails.isSingleAccountFound())
		{
			/** Storing the value into Complex Variable **/
			mySession.getVariableField(IProjectVariables.VALIDATE_ACCOUNT_NUMBER, IProjectVariables.VALIDATE_ACCOUNT_NUMBER_FIELD_ACCOUNT_NUMBER).setValue(resAccountDetails.getAccountNumber());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SINGLE ACCOUNT NUMBER :: "+resAccountDetails.getAccountNumber());
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_ACC_NO_FROM_REG_CONTACT_FLOW).setValue(true);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ACCOUNT_NO).setValue(resAccountDetails.getAccountNumber());
			
			/** Dynamic Menu Formation For Single A/C **//*
			appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
			key = appName+AppConstants.HYPEN_SEPERATOR+AppConstants.MN_0013;
			initialPrompt = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(key);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Prompt Key "+AppConstants.MN_0013+" :: "+key);
			dynamicList[AppConstants.Zero] = resAccountDetails.getAccountNumber();
		
			*//** Invoking the playPromt method **//*
			initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, AppConstants.NA, AppConstants.MN_0013, trace);
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Initial Prompt "+AppConstants.MN_0013+" :: "+initialPrompt);*/
		}
		}
		else
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstants.Yes);
		
	}catch(Exception e)
	{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstants.Yes);
	StackTrace.PrintException(e);}
	finally
	{trace = null;ivrWebService=null;reqAccountDetails=null;resAccountDetails=null;appName=null;key=null;dynamicList=null;}
}
}
