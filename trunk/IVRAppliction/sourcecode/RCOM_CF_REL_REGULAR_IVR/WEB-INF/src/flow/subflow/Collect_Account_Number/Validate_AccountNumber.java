package flow.subflow.Collect_Account_Number;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.rcom.energy.StackTrace;
import com.servion.rcom.hostinterface.view.ReqValidateAccountNumber;
import com.servion.rcom.hostinterface.view.ResValidateAccountNumber;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-26  01:57:39 PM
 */
public class Validate_AccountNumber extends com.avaya.sce.runtime.Data {

	
	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-26  01:57:39 PM
	 */
	public Validate_AccountNumber() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:24 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:24 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:24 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:networkError", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(322)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0050", false).setDebugId(324));
			actions.add(new com.avaya.sce.runtime.Next("Collect_Account_Number-LinkDown", "networkError").setDebugId(323));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "validateAccountNumber:isValidAccount", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:True", true).setDebugId(509)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:ConfirmCount", "constant:zero", false).setDebugId(519));
				actions.add(new com.avaya.sce.runtime.Next("Collect_Account_Number-Check_InvokedFrom", "valid").setDebugId(510));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("AppVariables:accountNoConfirmCount").setDebugId(513));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "AppVariables:accountNoConfirmCount", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "CONSTANTS:THREE", true).setDebugId(514)).evaluate(mySession)) {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Count Value :: ", "AppVariables:accountNoConfirmCount").setDebugId(1469));
					actions.add(new com.avaya.sce.runtime.Next("Collect_Account_Number-InvalidAccNumber_PA_0007", "re-collect").setDebugId(515));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:accountNoConfirmCount", "constant:zero", false).setDebugId(1531));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "Billing_Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1532)).evaluate(mySession)) {
						actions = new java.util.ArrayList(2);
						actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0016", false).setDebugId(1533));
						actions.add(new com.avaya.sce.runtime.Next("Collect_Account_Number-Exceed_Attempts_PA_0008", "max_no_attempts").setDebugId(1534));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					} else {
						actions = new java.util.ArrayList(2);
						actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0055", false).setDebugId(1537));
						actions.add(new com.avaya.sce.runtime.Next("Collect_Account_Number-Exceed_Attempts_PA_0008", "max_no_attempts").setDebugId(1538));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;
					}

				}

			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		IVRWebService ivrWebService = null;
		ReqValidateAccountNumber reqValidateAccountNumber = null;
		ResValidateAccountNumber resValidateAccountNumber = null;
		try
		{	/** Request Formation to Validate Entered Account Number **/
			reqValidateAccountNumber = new ReqValidateAccountNumber();
			reqValidateAccountNumber.setAccountNo(mySession.getVariableField(IProjectVariables.COLLECT__ACC_NUM__MN___0_0_0_9, IProjectVariables.COLLECT__ACC_NUM__MN___0_0_0_9_FIELD_VALUE).getStringValue());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate Account Number Request :: "+reqValidateAccountNumber.toString());
			
			/** Getting Response for Validate Entered Account Number **/
			ivrWebService = new IVRWebServiceImpl();
			resValidateAccountNumber = ivrWebService.validateAccountNumber((IVRDataBean)mySession.getProperty(AppConstants.IVR_DATA_BEAN), reqValidateAccountNumber);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate Account Number Response :: Response Code : "+resValidateAccountNumber.getResponseCode()+", isValidAccount : "+resValidateAccountNumber.isValidAccount() + " Customer Name : " +resValidateAccountNumber.getConsumerName());
			
			if(resValidateAccountNumber != null)
			{
				if(resValidateAccountNumber.getResponseCode().equalsIgnoreCase(AppConstants.WS_RESPONSE_SUCCESS)){		
					if(resValidateAccountNumber.isValidAccount())
					{
						/** Storing the value into Complex Variable **/
						mySession.getVariableField(IProjectVariables.VALIDATE_ACCOUNT_NUMBER, IProjectVariables.VALIDATE_ACCOUNT_NUMBER_FIELD_RESPONSE_CODE).setValue(resValidateAccountNumber.getResponseCode());
						mySession.getVariableField(IProjectVariables.VALIDATE_ACCOUNT_NUMBER, IProjectVariables.VALIDATE_ACCOUNT_NUMBER_FIELD_IS_VALID_ACCOUNT).setValue(resValidateAccountNumber.isValidAccount());
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CUSTOMER_NAME).setValue(resValidateAccountNumber.getConsumerName());
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_ACC_NO_VALIDATED).setValue(true);
					}}
				else
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstants.Yes);
			}
		}catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstants.Yes);
		StackTrace.PrintException(e);}
		finally
		{trace = null;ivrWebService=null;reqValidateAccountNumber=null;resValidateAccountNumber=null;}
	}
}
