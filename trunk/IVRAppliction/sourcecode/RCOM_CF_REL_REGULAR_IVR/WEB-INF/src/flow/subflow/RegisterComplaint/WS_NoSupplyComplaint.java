package flow.subflow.RegisterComplaint;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.rcom.energy.DynamicMenu;
import com.rcom.energy.StackTrace;
import com.servion.rcom.hostinterface.util.HostConstants.ComplaintStatus;
import com.servion.rcom.hostinterface.view.ReqRegisterNoSupplyComplaint;
import com.servion.rcom.hostinterface.view.ResRegisterNoSupplyComplaint;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-29  08:53:11 PM
 */
public class WS_NoSupplyComplaint extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-29  08:53:11 PM
	 */
	public WS_NoSupplyComplaint() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	@Override
	public void requestBegin(SCESession mySession) {
	
		ITraceInfo trace = mySession.getTraceOutput();
		
		
		String accountNo = null;
		String MDN = null;
		String uniqueId = null;
	//	boolean isIndividualPS = false;
		//  Customer removed IndividualPS and large area menu so now all call is treat as IndividualPS
		boolean isIndividualPS = true;
		
		
		String responseCode = null;
		String TAT = null;
		ComplaintStatus complaintStatus = null;
		String complaintNo = null;
		boolean isValidAccount = false;
		boolean isKnownOutage = false;
		boolean isStationDown = false;
		boolean accNoFromRegConFlow = false;
		
		String key = null;
		String appName = null;
		String initialPrompt = null;
		String[] dynamicList =null;
		try
		{
		IVRWebService ivrWebService = new IVRWebServiceImpl();
		AppProperties ivrProperties = null;
		
		ivrProperties = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES);
		
		isIndividualPS = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_INDIVIDUAL_INTERRUPTION).getBooleanValue();
		accountNo = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ACCOUNT_NO).getStringValue();
		MDN = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		uniqueId = mySession.getSessionId();
		appName = ivrProperties.getIVRProp(AppConstants.APP_NAME);
		
		ReqRegisterNoSupplyComplaint req = new ReqRegisterNoSupplyComplaint();
		req.setIndividual(isIndividualPS);
		req.setAccountNo(accountNo);
		req.setMDN(MDN);
		req.setComplaintByAccNo(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_COMPLAINT_BY_ACC_NO).getBooleanValue());
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "App Name : " +appName);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Input to Host Interface : ");
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Individual Area Power Interruption : "+isIndividualPS);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Account Number : "+accountNo);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "MDN : "+MDN);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Unique ID : "+uniqueId);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is ComplaintByAccount Number : "+req.isComplaintByAccNo());
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Before calling Host service Register No supply complaint.");
		ResRegisterNoSupplyComplaint res = ivrWebService.registerNoSupplyComplaint((IVRDataBean)mySession.getProperty(AppConstants.IVR_DATA_BEAN), req);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "After calling Host service Register No supply complaint.");
		
		responseCode = res.getResponseCode();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Response Code : " +responseCode);
		
		if(responseCode.equalsIgnoreCase(AppConstants.WS_RESPONSE_53)||responseCode.equalsIgnoreCase(AppConstants.WS_RESPONSE_93))
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS__RESPONSE___9_3__OR___5_3).setValue(true);
			//mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_WEB_SERVICE_RESPONSE).setValue(AppConstants.AGENT_TRANSFER);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Web service responce 53/93.", mySession);
		}
		
		else if(responseCode.equalsIgnoreCase(AppConstants.WS_RESPONSE_SUCCESS))
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_WEB_SERVICE_RESPONSE).setValue(AppConstants.SUCCESS);
			
			isValidAccount = res.isValidAccount();
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Valid Account : " +isValidAccount);
			if(isValidAccount)
			{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_VALID_ACCOUNT).setValue(true);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_ACC_NO_VALIDATED).setValue(true);
				isKnownOutage = res.isKnownOutage();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Known Outage : " +isKnownOutage);
	
				if(isKnownOutage)
				{
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_KNOWN_OUTAGE).setValue(true);
					
					TAT = res.getTAT();
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "TAT : " +TAT);
					dynamicList = new String[1];
					key = appName+AppConstants.HYPEN_SEPERATOR+AppConstants.PA_0011;
					initialPrompt = ivrProperties.getIVRProp(key);
					dynamicList[0] = TAT+AppConstants.time;
					initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, AppConstants.NA, AppConstants.PA_0011, trace);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Announcement Initial Prompt : " +initialPrompt);
					
					mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);
				}
				else
				{
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_KNOWN_OUTAGE).setValue(false);
					
					isStationDown = res.isStationDown();
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Station Down : " +isStationDown);
					if(isStationDown)
					{
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_STATION_DOWN).setValue(true);
					}
					else
					{
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_STATION_DOWN).setValue(false);
						
						complaintStatus = res.getComplaintStatus();
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Complaint Status : " +complaintStatus.name());
						
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_COMPLAINT_STATUS).setValue(complaintStatus.name());
						if((complaintStatus.compareTo(ComplaintStatus.CLOSED) == 0) || (complaintStatus.compareTo(ComplaintStatus.OPEN_OUTSIDE_TAT) == 0))
						{
							complaintNo = res.getComplaintNumber();
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Complaint No : " +complaintNo);
							dynamicList = new String[1];
							key = appName+AppConstants.HYPEN_SEPERATOR+AppConstants.PA_0019;
							initialPrompt = ivrProperties.getIVRProp(key);
							dynamicList[0] = complaintNo;
							initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, AppConstants.NA, AppConstants.PA_0019, trace);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Announcement Initial Prompt : " +initialPrompt);
							
							mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);
							
						}
						else if(complaintStatus.compareTo(ComplaintStatus.OPEN_WITHIN_TAT) == 0)
						{
							TAT = res.getTAT();
							complaintNo = res.getComplaintNumber();
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Complaint No : " +complaintNo);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "TAT : " +TAT);
							dynamicList = new String[2];
							key = appName+AppConstants.HYPEN_SEPERATOR+AppConstants.PA_0013;
							initialPrompt = ivrProperties.getIVRProp(key);
							dynamicList[0] = complaintNo;
							dynamicList[1] = TAT+AppConstants.time;
							initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, AppConstants.NA, AppConstants.PA_0013, trace);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Announcement Initial Prompt : " +initialPrompt);
							
							mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);
						}
						else if(complaintStatus.compareTo(ComplaintStatus.FRESH_COMPLAINT) == 0)
						{
							accNoFromRegConFlow = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_REGISTERD_MOBILE__FLAG).getBooleanValue();
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " Is Account Number from Register Contact Number Flow : " +accNoFromRegConFlow);
							
							if(accNoFromRegConFlow)
							{
								complaintNo = res.getComplaintNumber();
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Complaint No : " +complaintNo);
								dynamicList = new String[1];
								
								key = appName+AppConstants.HYPEN_SEPERATOR+AppConstants.PA_0017;
								initialPrompt = ivrProperties.getIVRProp(key);
								dynamicList[0] = complaintNo;
								initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, AppConstants.NA, AppConstants.PA_0017, trace);
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Announcement Initial Prompt : " +initialPrompt);
								mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);	
							}
							else
							{
								complaintNo = res.getComplaintNumber();
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Complaint No : " +complaintNo);
								dynamicList = new String[1];
								key = appName+AppConstants.HYPEN_SEPERATOR+AppConstants.PA_0015;
								initialPrompt = ivrProperties.getIVRProp(key);
								dynamicList[0] = complaintNo;
								initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, AppConstants.NA, AppConstants.PA_0015, trace);
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Announcement Initial Prompt : " +initialPrompt);
								
								mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);	
							}
						}
					}
				}
				
			}
			else
			{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_VALID_ACCOUNT).setValue(false);
				isStationDown = res.isStationDown();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Station Down : " +isStationDown);
				if(isStationDown)
				{
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_STATION_DOWN).setValue(true);
				}
			}
			
		}
		else
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_WEB_SERVICE_RESPONSE).setValue(AppConstants.FAILURE);
		}
		catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_WEB_SERVICE_RESPONSE).setValue(AppConstants.FAILURE);
			StackTrace.PrintException(e);
		}
		
	}
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:20 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:20 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:20 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:WebServiceResponse", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:SUCCESS", true).setDebugId(27)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:Is_Response_93_Or_53", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(2196)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "AppVariables:IVRType", com.avaya.sce.runtime.Expression.STRING_EQUAL, "CONSTANTS:IVR_TYPE_UNMANNED", true).setDebugId(2197)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-Ann_CallBack", "Ann_CallBack").setDebugId(2200));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0055", false).setDebugId(2202));
					actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-TransferAgent", "TransferCall_93_53").setDebugId(2204));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			}


			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "AppVariables:IsValidAccount", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(180)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "AppVariables:IsKnownOutage", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(478)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-KnownOutage_PP", "(KnownOutage)").setDebugId(479));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "AppVariables:IsStationDown", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(773)).evaluate(mySession)) {
						actions = new java.util.ArrayList(1);
						actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-StationDownCheckIVRType_BC", "(StationDown)").setDebugId(774));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					} else {

						if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition7", "AppVariables:ComplaintStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:CS_CLOSED", true).setDebugId(935)).evaluate(mySession)) {
							actions = new java.util.ArrayList(1);
							actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-CS_ClosedCheckIVRType_BC", "(CS_Closed)").setDebugId(936));
							if(evaluateActions(actions, mySession)) {
								return true;
							}
							actions = null;

						} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition8", "AppVariables:ComplaintStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:CS_OPEN_OUTSIDE_TAT", true).setDebugId(937)).evaluate(mySession)) {
							actions = new java.util.ArrayList(1);
							actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-CS_ClosedCheckIVRType_BC", "(CS_OpenOutsideTAT)").setDebugId(938));
							if(evaluateActions(actions, mySession)) {
								return true;
							}
							actions = null;

						} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition9", "AppVariables:ComplaintStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:CS_OPEN_WITHIN_TAT", true).setDebugId(939)).evaluate(mySession)) {
							actions = new java.util.ArrayList(1);
							actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-CS_OpenWithinTAT_PP", "(CS_OpenWithinTAT)").setDebugId(940));
							if(evaluateActions(actions, mySession)) {
								return true;
							}
							actions = null;

						} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition10", "AppVariables:ComplaintStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:CS_FRESH_COMPLAINT", true).setDebugId(943)).evaluate(mySession)) {

							if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition11", "AppVariables:RegisterdMobile_Flag", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(944)).evaluate(mySession)) {
								actions = new java.util.ArrayList(1);
								actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-CS_FreshComplaintReg_PP", "(AccNoFromRegConFlow)").setDebugId(945));
								if(evaluateActions(actions, mySession)) {
									return true;
								}
								actions = null;

							} else {
								actions = new java.util.ArrayList(1);
								actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-CS_FreshComplaintNonReg_PP", "(AccNoNotFromRegConFlow)").setDebugId(947));
								if(evaluateActions(actions, mySession)) {
									return true;
								}
								actions = null;
							}


						}
					}

				}


			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("AppVariables:CollectAccNoTries").setDebugId(2184));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition12", "AppVariables:CollectAccNoTries", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "constant:three", true).setDebugId(182)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-RegComplaintCollAccNoExceededTries_PP", "(ExceededTries)").setDebugId(187));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition13", "AppVariables:IsStationDown", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(2186)).evaluate(mySession)) {
						actions = new java.util.ArrayList(2);
						actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Station Down in Else case", "").setDebugId(2189));
						actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-StationDownCheckIVRType_BC", "(StationDown)").setDebugId(2187));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					}

					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:IsInvalidAccNo", "CONSTANTS:TRUE", false).setDebugId(184));
					actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-InvalidAccNo_PP", "(InvalidAccNo)").setDebugId(185));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}

			}


		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:IsRegisterComplaintLinkdown", "CONSTANTS:TRUE", false).setDebugId(166));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition14", "AppVariables:IsAccNoFromRegContactFlow", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(168)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition15", "AppVariables:IsIndividualInterruption", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(169)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0055", false).setDebugId(29));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0054", false).setDebugId(172));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition16", "AppVariables:IsIndividualInterruption", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(175)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0053", false).setDebugId(176));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0052", false).setDebugId(178));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}

			}


			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("RegisterComplaint-Linkdown", "(Failure)").setDebugId(21));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
