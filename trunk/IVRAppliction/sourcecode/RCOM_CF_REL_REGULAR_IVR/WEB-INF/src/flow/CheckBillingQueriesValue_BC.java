package flow;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-29  04:29:16 PM
 */
public class CheckBillingQueriesValue_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-29  04:29:16 PM
	 */
	public CheckBillingQueriesValue_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:15 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:15 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:15 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "BillingQueries_MN:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:SUCCESS", true).setDebugId(3599)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "BillingQueries_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:BillingQueries_MN_RetVal_DupBillReq", true).setDebugId(3603)).evaluate(mySession)) {
				actions = new java.util.ArrayList(4);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Billing_Flag", "CONSTANTS:TRUE", false).setDebugId(6496));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:forDuplicateBillRequest", "constant:yes", false).setDebugId(5687));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Tagging:CallFlowNode", "CONSTANTS:BRQ_Collect_Account_No", false).setDebugId(5875));
				actions.add(new com.avaya.sce.runtime.Next("WS_CMS_BillQuery", "(DuplicateBillRequest)").setDebugId(3604));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "BillingQueries_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:BillingQueries_MN_RetVal_LastBillDet", true).setDebugId(3605)).evaluate(mySession)) {
				actions = new java.util.ArrayList(4);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Billing_Flag", "CONSTANTS:TRUE", false).setDebugId(6497));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:forLastBillPaymentDetails", "constant:yes", false).setDebugId(5739));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Tagging:CallFlowNode", "CONSTANTS:Bill_Details_Collect_Account_No", false).setDebugId(5874));
				actions.add(new com.avaya.sce.runtime.Next("WS_CMS_BillQuery", "(LastBillDetails)").setDebugId(3606));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "BillingQueries_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:BillingQueries_MN_RetVal_LastPmtDet", true).setDebugId(3607)).evaluate(mySession)) {
				actions = new java.util.ArrayList(4);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Billing_Flag", "CONSTANTS:TRUE", false).setDebugId(6498));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:forLastBillPaymentDetails", "constant:yes", false).setDebugId(5740));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Tagging:CallFlowNode", "CONSTANTS:BRQ_Collect_Account_No", false).setDebugId(5876));
				actions.add(new com.avaya.sce.runtime.Next("WS_CMS_BillQuery", "(LastPaymentDetails)").setDebugId(3608));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "BillingQueries_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:previous", true).setDebugId(5704)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("MainMenuIVRTypeCheck", "previous").setDebugId(5705));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "BillingQueries_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:MainMenu", true).setDebugId(5706)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("MainMenuIVRTypeCheck", "mainmenu").setDebugId(5707));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition7", "BillingQueries_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:agent", true).setDebugId(5708)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition8", "AppVariables:IsVIPCaller", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(7005)).evaluate(mySession)) {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0068", false).setDebugId(7006));
					actions.add(new com.avaya.sce.runtime.Next("AccNoValidated_BC", "Transfer").setDebugId(7007));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				}

				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0021", false).setDebugId(5710));
				actions.add(new com.avaya.sce.runtime.Next("AccNoValidated_BC", "transfer").setDebugId(5709));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition9", "BillingQueries_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Other", false).setDebugId(5940)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition10", "AppVariables:IsVIPCaller", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(7009)).evaluate(mySession)) {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0068", false).setDebugId(7010));
					actions.add(new com.avaya.sce.runtime.Next("AccNoValidated_BC", "Transfer").setDebugId(7011));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				}

				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0021", false).setDebugId(5941));
				actions.add(new com.avaya.sce.runtime.Next("AccNoValidated_BC", "Other").setDebugId(5942));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(3);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:IsATOMTransfer", "CONSTANTS:TRUE", false).setDebugId(3611));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0065", false).setDebugId(5872));
				actions.add(new com.avaya.sce.runtime.Next("setCallVar_getXFerVDN_BC", "(BillPayment)").setDebugId(3610));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0041", false).setDebugId(3602));
			actions.add(new com.avaya.sce.runtime.Next("StdErrorIVRTypeCheck_BC", "(ExceededTries)").setDebugId(3601));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
