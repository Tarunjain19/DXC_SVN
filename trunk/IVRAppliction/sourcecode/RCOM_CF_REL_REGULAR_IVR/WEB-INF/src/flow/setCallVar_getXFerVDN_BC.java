package flow;

import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.rcom.energy.StackTrace;
import com.rcom.energy.model.TransferVDNInfo;
import com.rcom.energy.resource.IVRDBServiceInstance;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.prepaid.report.IVRREPORTDATA.MENUDETAILS.MENU;
import com.servion.rcom.hostinterface.view.ReqValidateAccountNumber;
import com.servion.rcom.hostinterface.view.ResValidateAccountNumber;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-27  11:16:41 AM
 */
public class setCallVar_getXFerVDN_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-27  11:16:41 AM
	 */
	public setCallVar_getXFerVDN_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}


	@Override
	public void requestBegin(SCESession mySession) {
	
		ITraceInfo trace = mySession.getTraceOutput();
		IVRWebService ivrWebService = null;
		TransferVDNInfo transferVDNInfo = null;
		IVRDataBean ivrDataBean = null;
		String language=null;
		String strUUI=null, menuID, collectAccountNumber,isValidated,last5Menu = AppConstants.EMPTY_STRING;
		boolean isAccountValidated;
		try
		{
			
			 /*laterIVR call variables:  1. ANI 2. DNIS 3. Language (E=English) 4. Last 5 menu accessed 5. Transfer reason code*/
			String ANI = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			String DNIS = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DNIS).getStringValue();
			language = mySession.getVariableField(IProjectVariables.LANGUAGE).getStringValue();
			String transerCode = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_POINT).getStringValue();
			collectAccountNumber = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ACCOUNT_NO).getStringValue();
			isAccountValidated = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_ACC_NO_VALIDATED).getBooleanValue();
			String customerName = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CUSTOMER_NAME).getStringValue();
			String ATOMTransferVDN = null;
			
			if(language==null||language.equalsIgnoreCase(""))
			{
				language="HIN";
			}
			
			if(isAccountValidated)
				isValidated=AppConstants.Y;
			else
				isValidated=AppConstants.N;
			
			/** Customer Name Processing **/
			if(customerName ==null || AppConstants.NA.equalsIgnoreCase(customerName))
			{
				if(collectAccountNumber != null && !collectAccountNumber.equalsIgnoreCase(AppConstants.NA))
				{
				try{
				ReqValidateAccountNumber reqValidateAccountNumber =new ReqValidateAccountNumber();
				reqValidateAccountNumber.setAccountNo(collectAccountNumber);
				ivrWebService = new IVRWebServiceImpl();
				ResValidateAccountNumber res = ivrWebService.validateAccountNumber((IVRDataBean)mySession.getProperty(AppConstants.IVR_DATA_BEAN), reqValidateAccountNumber);
						//getAccountDetails((IVRDataBean)mySession.getProperty(AppConstants.IVR_DATA_BEAN), req);
				if(res != null && res.getConsumerName() != null)
					customerName = res.getConsumerName();
				else
					customerName = AppConstants.EMPTY_STRING;}
				catch(Exception e){customerName = AppConstants.EMPTY_STRING;}
				}
				else
					customerName = AppConstants.EMPTY_STRING;
			}
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Call Variables : ");
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "ANI : " +ANI);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNIS : " +DNIS);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "LANGUAGE : " +language);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "TRANSFER CODE : " +transerCode);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "CUSTOMER NAME : " +customerName);
			
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstants.IVR_DATA_BEAN);
			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			IVRREPORTDATA ivrreportdata = getReportObject.getIvrreportdata();
			CALLINFO callInfo = ivrreportdata.getCALLINFO();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Menu:"+ivrreportdata.getMENUDETAILS().getMENU());
			List<MENU> menuList = ivrreportdata.getMENUDETAILS().getMENU();
			
			if(menuList  !=null){
				
				for (int i = menuList.size(); (i> (menuList.size()-5)) && (i!=0); i-- ){
					menuID = menuList.get((i-1)).getMENUID();
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "menu ID :"+menuID);
					last5Menu = last5Menu + menuID+"|";
				}
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Last 5 menu accessed :"+last5Menu);
			}else{
				last5Menu = last5Menu+"|";
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "No Menu accessed");
			}
			
			/** UUI DATA formation **/
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "CollectAccountNumber:"+collectAccountNumber);
			if((collectAccountNumber != null) && collectAccountNumber.equalsIgnoreCase(AppConstants.NA))
				collectAccountNumber = AppConstants.EMPTY_STRING;
			//strUUI = collectAccountNumber+"|"+ANI+"|"+isValidated+"|"+last5Menu+customerName;
			
			strUUI = ANI+"|"+DNIS+"|"+collectAccountNumber+"|"+isValidated+"|"+last5Menu+customerName;
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_UUI__DATA).setValue(strUUI);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "UUI data:"+strUUI);			
			
			/** DB Interaction-TransferVDN Request Formation **/
			transferVDNInfo = new TransferVDNInfo();
			transferVDNInfo.setAppName(mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue());
			transferVDNInfo.setCallType(AppConstants.FOUR);
			transferVDNInfo.setCircle(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue());
			/** ATOM Transfer VDN**/
			if(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_ATOMTRANSFER).getBooleanValue()==true)
			{
				transferVDNInfo.setCustomerSegment(AppConstants.THREE);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** ATOM Call Transfer  **");
			}/** VIP Transfer Call **/
			else if(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_VIPCALLER).getBooleanValue())
			{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** VIP Call Transfer **");
				transferVDNInfo.setCustomerSegment(AppConstants.ONE);
				if(!(mySession.getVariableField(IProjectVariables.BILLING_QUERIES__MN,IProjectVariables.BILLING_QUERIES__MN_FIELD_RETURN_CODE).getStringValue().equalsIgnoreCase(AppConstants.SUCCESS)))
					{
					transerCode = "TR_0001";
					mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_POINT).setValue(transerCode);
					}
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "VIP Call Transfer ReasonCode ::"+transerCode);
				
			}else if(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_CRITICAL_CALLER).getBooleanValue()){
				transferVDNInfo.setCustomerSegment(AppConstants.FOUR);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** Critical Call Transfer **");
			}
			else
				transferVDNInfo.setCustomerSegment(AppConstants.THREE);
			transferVDNInfo.setLanguage(language);
			transferVDNInfo.setTransferReasonCode(transerCode);			
		
			/** Transfer-VDN Response Collection **/
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Interaction-TransferVDN DB Reuest :: "+transferVDNInfo.toString());
			transferVDNInfo = IVRDBServiceInstance.getIVRDBInstance().getTransferVDN((IVRDataBean) mySession.getProperty(AppConstants.IVR_DATA_BEAN), transferVDNInfo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Interaction-TransferVDN DB Response :: "+transferVDNInfo.toString());
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(transferVDNInfo.getTransferVDN1());
			
			/** Transfer VDN Reports generation **/
			if(transferVDNInfo.getTransferVDN1()!=null){
				callInfo.setAGENTEXTN(transferVDNInfo.getTransferVDN1());
				if(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_ATOMTRANSFER).getBooleanValue()==true)
					callInfo.setAGENTID("ATOM");
				else
					callInfo.setAGENTID(transferVDNInfo.getTransferVDN1());
			}else{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(language+AppConstants.UNDERSCORE+AppConstants.DEFAULT_VDN));
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** DEFAULT VDN Transfer **");
			}
			if(transferVDNInfo.getSkillName()!=null)
				callInfo.setSKILLNAME(transferVDNInfo.getSkillName());
			
			callInfo.setUUIDATA(strUUI);
			callInfo.setTRANSCODE(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_POINT).getStringValue());
			callInfo.setDISPOSITION("XA");
			callInfo.setCALLENDREASON("TRANSFER");
			callInfo.setHOWCALLENDED("TRANSFER");
			callInfo.setTRANSFERVDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).getStringValue());
			ivrreportdata.setCALLINFO(callInfo);
		}
		catch(Exception e)
		{
			
			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			IVRREPORTDATA ivrreportdata = getReportObject.getIvrreportdata();
			CALLINFO callInfo = ivrreportdata.getCALLINFO();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** In Catch **");
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(language+AppConstants.UNDERSCORE+AppConstants.DEFAULT_VDN));
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** DEFAULT VDN Transfer **");
			
			callInfo.setUUIDATA(strUUI);
			callInfo.setTRANSCODE(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_POINT).getStringValue());
			callInfo.setDISPOSITION("XA");
			callInfo.setCALLENDREASON("TRANSFER");
			callInfo.setHOWCALLENDED("TRANSFER");
			callInfo.setTRANSFERVDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).getStringValue());
			ivrreportdata.setCALLINFO(callInfo);
		
			
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstants.Yes);
		StackTrace.PrintException(e);}
		finally
		{
		transferVDNInfo=null;
		trace=null;
		ivrDataBean=null;
		ivrWebService=null;
		strUUI=null;
		menuID=null;
		
		}
		
	
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:18 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("TransferAnn_PP", "Success");
		next.setDebugId(894);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:18 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:18 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:networkError", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(5857)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TransferAnn_PP", "networkError").setDebugId(5859));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Skip Transfer Annc", "AppVariables:IsATOMTransfer").setDebugId(5914));
		actions.add(new com.avaya.sce.runtime.varoperations.PrepareAAI("Shared", "", "AppVariables:UUI_DATA", "UUIData").setDebugId(5944));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:IsATOMTransfer", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(5912)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("CallTransfer").setDebugId(5913));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
