package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.rcom.energy.StackTrace;
import com.rcom.energy.model.EnergyIVRType;
import com.rcom.energy.resource.IVRDBServiceInstance;

import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-27  11:44:27 AM
 */
public class DB_GetIVRType_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-27  11:44:27 AM
	 */
	public DB_GetIVRType_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	
	@Override
	public void requestBegin(SCESession mySession) {
	
		ITraceInfo trace = mySession.getTraceOutput();
		String IVRType = null;
		String appName = null;
		String unmannedDNIS = null;
		String unmannedType = null;
		String regularType = AppConstants.EMPTY,switchType = AppConstants.EMPTY;
		String unmannedFlag = AppConstants.EMPTY;
		appName = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(AppConstants.APP_NAME);
		String DBResponse = AppConstants.FAILURE;
		String dnis = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DNIS).getStringValue();
		unmannedType = mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_IVR__TYPE__UNMANNED).getStringValue();
		regularType =  mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_IVR__TYPE__REGULAR).getStringValue();
		switchType =   mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_IVR__TYPE__SWITCHOVER).getStringValue();
		unmannedFlag = mySession.getVariableField(IProjectVariables.UNMANNED).getStringValue();
		try{
		
			EnergyIVRType reqEnergyIVRType = new EnergyIVRType();
			reqEnergyIVRType.setApplicationName(appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Calling DB service EnergyIVRType with App Name " +appName +" to get IVR Type.");
			//After DB Jar update, call respective method to get IVR Type
			EnergyIVRType resEnergyIVRType =IVRDBServiceInstance.getIVRDBInstance().getEnervyIVRType((IVRDataBean)mySession.getProperty(AppConstants.IVR_DATA_BEAN), reqEnergyIVRType);/*new EnergyIVRType();*/
			IVRType = resEnergyIVRType.getIvrType();
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "IVR Type returned from DB: " +IVRType);
			
			/** Switching to Unmmaned Type **/
			if(unmannedFlag != null && AppConstants.TRUE.equalsIgnoreCase(unmannedFlag))
			{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** Changing To UnManned Type Due To Unmanned DNIS **");
				IVRType = unmannedType;
			}else if (!regularType.equalsIgnoreCase(IVRType)){
				IVRType = switchType;
			}
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** Current IVR Type **"+IVRType);
			if(IVRType != null){
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IVRTYPE).setValue(IVRType);
				DBResponse = AppConstants.SUCCESS;
			}
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DBRESPONSE).setValue(DBResponse);
		}catch(Exception e)
		{
			DBResponse = AppConstants.FAILURE;
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DBRESPONSE).setValue(DBResponse);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error while accessing DB EnergyIVRType" +e);
			StackTrace.PrintException(e);
		}
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:16 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:16 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:16 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:DBResponse", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(5366)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:IVRType", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:IVR_TYPE_REGULAR", true).setDebugId(696)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("TransferDnisCheck_BC", "(Regular)").setDebugId(695));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "AppVariables:IVRType", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:IVR_TYPE_SWITCHOVER", true).setDebugId(697)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("TransferDnisCheck_BC", "(Swithover)").setDebugId(698));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("SetLangOptions_BC", "(Unmanned)").setDebugId(704));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0064", false).setDebugId(5869));
			actions.add(new com.avaya.sce.runtime.Next("Linkdown_PP", "linkDown").setDebugId(5372));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
