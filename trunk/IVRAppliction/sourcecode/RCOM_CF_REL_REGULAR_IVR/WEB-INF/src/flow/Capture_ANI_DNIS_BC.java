package flow;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.rcom.energy.StackTrace;
import com.rcom.energy.model.IVRRoutingInfo;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-24  07:31:50 PM
 */
public class Capture_ANI_DNIS_BC extends com.avaya.sce.runtime.Data {

	
	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-24  07:31:50 PM
	 */
	public Capture_ANI_DNIS_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
	
		ITraceInfo trace = mySession.getTraceOutput();
		IVRRoutingInfo ivrRoutingInfo = null;
		GetReportObject getReportObject = null;
		IVRREPORTDATA ivrreportdata = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		InetAddress ip = null;
		CALLINFO callInfo  = null;
		String MDN = AppConstants.EMPTY_STRING;
		try
		{		
			AppProperties ivrProperties = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES);
			String appName = ivrProperties.getIVRProp(AppConstants.APP_NAME);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "APP_NAME :: " +appName);
			Logger logger = Logger.getLogger("Dialog.Designer.TraceWriter.RCOM_CF_REL_REGULAR_IVR");
			
			/** IVRDataBean Processing **/
			IVRDataBean ivrDataBean = new IVRDataBean();
			ivrDataBean.setLogger(logger);
			ivrDataBean.setSessionID(mySession.getSessionId());
			getReportObject = new GetReportObject();
			ivrreportdata = getReportObject.createIVRReportObject();
			mySession.setProperty(AppConstants.BEANREPORTDATA, getReportObject);
			getReportObject.setIvrreportdata(ivrreportdata);
			ivrDataBean.setGetReportObject(getReportObject);
			mySession.setProperty(AppConstants.IVR_DATA_BEAN, ivrDataBean);
			mySession.getVariable(IProjectVariables.APP__NAME).getSimpleVariable().setValue(appName);
			
			/**Assigning call info data for report*/
			ip= InetAddress.getLocalHost();
			callInfo  = ivrreportdata.getCALLINFO();
			callInfo.setUNIQUECALLID(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue());
			callInfo.setSESSIONID(mySession.getSessionId());
			callInfo.setVXMLIP(String.valueOf(ip));
			callInfo.setSTARTDATETIME(dateFormat.format(new Date()));
			callInfo.setAPPNAME(mySession.getVariable(IProjectVariables.APP__NAME).getSimpleVariable().getStringValue());
			callInfo.setCALLERTYPE(AppConstants.NA);
			callInfo.setCATEGORY(AppConstants.NA);
			callInfo.setCIRCLEID(AppConstants.NA);
			callInfo.setCLI(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
			callInfo.setDNIS(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
			callInfo.setDNISTYPE(AppConstants.NA);
			callInfo.setHUB(ivrProperties.getIVRProp(AppConstants.HUB));
			callInfo.setAGENTID(AppConstants.NA);
			callInfo.setAGENTEXTN(AppConstants.NA);
			callInfo.setTRANSCODE(AppConstants.NA);
			callInfo.setTRANSFERVDN(AppConstants.NA);
			callInfo.setUUIDATA(AppConstants.NA);
			callInfo.setABANDONEDFLAG(AppConstants.NA);
			callInfo.setTRANSTOIVR(AppConstants.NA);
			callInfo.setSKILLNAME(AppConstants.NA);
			callInfo.setLANGCODE(mySession.getCurrentLanguage());
			callInfo.setENDDATETIME(AppConstants.NA);
			callInfo.setDTMFPATH(AppConstants.NA);
			callInfo.setMENUPATH(AppConstants.NA);
			callInfo.setCALLERPATH(AppConstants.NA);
			callInfo.setLASTMENUACCESSED("NA");
			callInfo.setDISPOSITION("ID");
			callInfo.setCALLENDREASON("IVR_DISCONNECT");
			callInfo.setHOWCALLENDED("DISCONNECT");
			callInfo.setERRREASON(AppConstants.NA);
			callInfo.setLASTNODEACCESSED(AppConstants.NA);
			callInfo.setLANGUAGEFROM(AppConstants.NA);
			callInfo.setLANGUAGETO(AppConstants.NA);
			callInfo.setTAGGING(AppConstants.NA);
			ivrreportdata.setCALLINFO(callInfo);
			
			ivrDataBean.setGetReportObject(getReportObject);
			
			
		String sessionId = mySession.getSessionId();
		String ANI = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		String DNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SESSION ID : " +sessionId);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "ANI : " +ANI);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNIS : " +DNIS);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).setValue(ANI);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DNIS).setValue(DNIS);
		
		
		/** Loading Default Language Property Location **/
		String DM_Properties_Location_Default = ivrProperties.getIVRProp(AppConstants.DM_PROPERTIES_LOCATION_HINDI);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DM_Properties_Location_Hindi : " +DM_Properties_Location_Default);
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(DM_Properties_Location_Default);
		mySession.setCurrentLanguage("HIN");
		mySession.getVariable(IProjectVariables.APP__NAME).getSimpleVariable().setValue(appName);
		
		boolean isBothAniAndDnisAvailable = false;
		
		if(ANI != null && DNIS != null && !ANI.equalsIgnoreCase(AppConstants.EMPTY) && !DNIS.equalsIgnoreCase(AppConstants.EMPTY))
		{
			isBothAniAndDnisAvailable = true;
		}
		
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_BOTH_ANI_AND_DNIS_AVAILABLE).setValue(isBothAniAndDnisAvailable);
		}
		catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(AppConstants.Yes);
			StackTrace.PrintException(e);}
			finally
			{}
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:15 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:15 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:15 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Application-Version:", "Application_Version").setDebugId(6777));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:isException", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(5354)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "** Exception In Call Start **", "").setDebugId(5355));
			actions.add(new com.avaya.sce.runtime.Next("Linkdown_PP", "exception").setDebugId(5356));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:IsBothAniAndDnisAvailable", com.avaya.sce.runtime.Expression.IS_FALSE).setDebugId(5358)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("DnisAndAniNotAvailable_PP", "(ANI/DNIS unavaiable)").setDebugId(5359));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:ANI", "session:ani", false).setDebugId(5653));
				actions.add(new com.avaya.sce.runtime.Next("DB_RoutingTable_BC", "(ANI/DNIS available)").setDebugId(5361));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
