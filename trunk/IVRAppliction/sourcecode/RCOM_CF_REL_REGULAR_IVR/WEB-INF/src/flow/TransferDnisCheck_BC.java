package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.servion.util.AppProperties;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-27  11:50:11 AM
 */
public class TransferDnisCheck_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-27  11:50:11 AM
	 */
	public TransferDnisCheck_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
	
		
		ITraceInfo trace = mySession.getTraceOutput();
		boolean isDirectTransfer = false;
		boolean isTataCaller = false;
		String dnisTataCallers = null;
		String dnisDirectTransfer = null;
		String dnis = null, ani = "", strSessionDNIS = "";
		AppProperties ivrProperties = null;
		
		
		ivrProperties = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES);
		
		/*
		 * Tata Callers check
		 */
		dnis = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DNIS).getStringValue();
		ani = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		strSessionDNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
		dnisTataCallers = ivrProperties.getIVRProp(AppConstants.DNIS_TATA_CALLERS);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Caller ANI:"+ani);
		if(dnisTataCallers != null && !dnisTataCallers.equalsIgnoreCase(AppConstants.EMPTY))
		{
			String[] listDnis = dnisTataCallers.split(AppConstants.REGREX_PIPE_SEPERATOR);
			
			for(String strDnis : listDnis)
			{
				if(strDnis.equalsIgnoreCase(strSessionDNIS))
				{	trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, strDnis);
					isTataCaller = true;
					mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_GLOBAL_PROPERTY_FILE_NAME).setValue(mySession.getVariableField(IProjectVariables.DM__PROPERTY_FILE_NAME, IProjectVariables.DM__PROPERTY_FILE_NAME_FIELD_GLOBAL).getStringValue());
					mySession.getVariableField(IProjectVariables.LANGUAGE).setValue(ivrProperties.getIVRProp(AppConstants.LANGUAGE_HINDI));
					break;
				}
			}
			
		}
		
		dnisDirectTransfer = ivrProperties.getIVRProp(AppConstants.DNIS_DIRECT_TRANSFER);
		
		if(dnisDirectTransfer != null && !dnisDirectTransfer.equalsIgnoreCase(AppConstants.EMPTY))
		{
			String[] listDnis = dnisDirectTransfer.split(AppConstants.REGREX_PIPE_SEPERATOR);
			
			for(String strDnis : listDnis)
			{
				if(strDnis.equalsIgnoreCase(ani))
				{
					isDirectTransfer = true;
					mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_GLOBAL_PROPERTY_FILE_NAME).setValue(mySession.getVariableField(IProjectVariables.DM__PROPERTY_FILE_NAME, IProjectVariables.DM__PROPERTY_FILE_NAME_FIELD_GLOBAL).getStringValue());
					mySession.getVariableField(IProjectVariables.LANGUAGE).setValue(ivrProperties.getIVRProp(AppConstants.LANGUAGE_HINDI));
					break;
				}
			}
		}
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Tata caller : " +isTataCaller);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Direct Transfer : " +isDirectTransfer);
		
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_DIRECT_TRANSFER).setValue(isDirectTransfer);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_TATA_CALLER).setValue(isTataCaller);
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:16 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:16 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:16 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsTataCaller", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(5288)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0062", false).setDebugId(5290));
			actions.add(new com.avaya.sce.runtime.Next("AccNoValidated_BC", "(TataCaller)").setDebugId(5289));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:IsDirectTransfer", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(711)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0001", false).setDebugId(917));
			actions.add(new com.avaya.sce.runtime.Next("AccNoValidated_BC", "(DirectTransfer)").setDebugId(708));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DB_CheckCritical", "(Proceed)").setDebugId(713));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
