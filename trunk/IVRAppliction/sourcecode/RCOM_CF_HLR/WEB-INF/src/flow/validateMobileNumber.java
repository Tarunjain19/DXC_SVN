
package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.hlr.util.AppConstant;
import com.hlr.util.LoadProperties;
import com.hlr.util.StackTrace;
import com.rcom.hlr.model.ValidateMDN;
import com.rcom.hlr.resource.IVRDBServiceInstance;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-16  03:15:37 PM
 */
public class validateMobileNumber extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-16  03:15:37 PM
	 */
	public validateMobileNumber() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-APR-19  05:37:50 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-APR-19  05:37:50 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-APR-19  05:37:50 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "MDN flag", "validateMobileNumber:Flag").setDebugId(1584));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:networkError", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(899)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:TransferCode", "TransferCodes:HLR_TR_0004", false).setDebugId(1582));
			actions.add(new com.avaya.sce.runtime.Next("HLR_PA_0011", "network_failure").setDebugId(900));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "validateMobileNumber:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(902)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:TransferCode", "TransferCodes:HLR_TR_0001", false).setDebugId(1332));
				actions.add(new com.avaya.sce.runtime.Next("Transfer_Menu", "valid").setDebugId(905));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "validateMobileNumber:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "failure", false).setDebugId(1633)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("HLR_PA_0004", "not_valid").setDebugId(907));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:TransferCode", "TransferCodes:HLR_TR_0004", false).setDebugId(1634));
				actions.add(new com.avaya.sce.runtime.Next("HLR_PA_0011", "network_failure").setDebugId(1635));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		ITraceInfo trace = mySession.getTraceOutput();
		String mdn=null;
		ValidateMDN validateMDN = null;
		IVRDataBean ivrDataBean = null;
		
		try{
			mdn = mySession.getVariableField(IProjectVariables.GET_MOBILE_NUMBER__MN___0_0_0_1, IProjectVariables.GET_MOBILE_NUMBER__MN___0_0_0_1_FIELD_VALUE).getStringValue();
			//Setting input for MDN hard coding
			validateMDN = new ValidateMDN();
			validateMDN.setAppName(LoadProperties.getivrconfigProp("APP_NAME"));
			validateMDN.setMdn(mdn);
			
			//Setting logger and sesion id 
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
			
			//Invoking DB
			validateMDN = IVRDBServiceInstance.getIVRDBInstance().checkMDNHardCoding(ivrDataBean, validateMDN);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "MDN FLAG:"+validateMDN.getFlag());
			
			mySession.getVariableField(IProjectVariables.VALIDATE_MOBILE_NUMBER, IProjectVariables.VALIDATE_MOBILE_NUMBER_FIELD_FLAG).setValue(validateMDN.getFlag());
		}catch (Exception e) {
			StackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(AppConstant.Yes);
		}
		
		
	}
	
	/*@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		String mdn=null;
		ValidateMDN validateMDN = null;
		try
		{	//** Request Formation **//*
			validateMDN = new ValidateMDN();
			validateMDN.setMdn(mdn);
			validateMDN.setAppName(LoadProperties.getivrconfigProp("APP_NAME"));
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Validate Number Host Input :: MobileNumber :: "+validateMDN.getMdn());
			
			//** DB Interaction To get Response **//*
			validateMDN = IVRDBServiceInstance.getIVRDBInstance().checkMDNHardCoding((IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN), validateMDN);
			mySession.getVariableField(IProjectVariables.VALIDATE_MOBILE_NUMBER, IProjectVariables.VALIDATE_MOBILE_NUMBER_FIELD_FLAG).setValue(validateMDN.getFlag());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Validate Number Host Result :: Flag :: "+validateMDN.getFlag());
			
		}catch(Exception e)
		{StackTrace.PrintException(e);
		mySession.getVariableField(IProjectVariables.APP__NAME, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstant.Yes);
		}
		finally{mdn=null;validateMDN=null;}
	}*/
}
