package flow.subflow.PushSMS;

import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.ppp.model.PushSMSInfo;
import com.servion.rcom.ppp.hostinterface.view.ReqPushSMS;
import com.servion.rcom.ppp.hostinterface.view.ResPushSMS;
import com.servion.rcom.ppp.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.ppp.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppConstant;
import com.servion.util.AppDataMap;
import com.servion.util.IVRDataBean;
import com.servion.util.SetPushSMS;
import com.servion.util.StackTrace;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-13  12:57:32 AM
 */
public class CSS_PushSMS extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-13  12:57:32 AM
	 */
	public CSS_PushSMS() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:10 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("PushSMS-Return", "Default");
		next.setDebugId(17);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:10 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:10 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo trace = mySession.getTraceOutput();
		
		Hashtable<String, String> smsHashTable = null;
		SetPushSMS setPushSMS = null;
		String strKeyword = AppConstant.EMPTY_STRING;
		PushSMSInfo pushSMSInfo = null;
		String strApplicationName = AppConstant.EMPTY_STRING,strCircle = AppConstant.EMPTY_STRING, strMsgText = AppConstant.EMPTY_STRING;
		String strSMSTemplate = AppConstant.EMPTY_STRING;
		Hashtable<String, PushSMSInfo> pushSMSHashTable = null;
		IVRDataBean ivrDataBean = null;
		String completeSMSText = AppConstant.EMPTY_STRING;
		ReqPushSMS reqPushSMS = null;
		ResPushSMS resPushSMS = null;
		IVRWebService ivrWebService = null;
		
		Hashtable<String, Hashtable<String, String>> smsHashTableDataIndexMap = null;
		
		String callerType = null;
		
		try{
			
			pushSMSInfo = new PushSMSInfo();
			setPushSMS = new SetPushSMS();
			smsHashTable = (Hashtable<String, String>) mySession.getProperty(AppConstant.SMSDataMap);
			completeSMSText = mySession.getVariableField(IProjectVariables.PUSH_SMSFLAG,IProjectVariables.PUSH_SMSFLAG_FIELD_PUSH_SMSTEXT).getStringValue();
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
			
			if(completeSMSText!=null && !AppConstant.EMPTY_STRING.equalsIgnoreCase(completeSMSText)){
				strMsgText = completeSMSText;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"SMS Text :"+strMsgText);
				
				reqPushSMS = new ReqPushSMS();
				ivrWebService = new IVRWebServiceImpl();
				
				if(mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_RETENTION_LIST).getStringValue().equalsIgnoreCase("RTN"))
				{
					reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue());
				}
				else
				{
					reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_MOBILE_NO).getStringValue());
				}
				reqPushSMS.setMessageText(strMsgText);
				
				resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
			}else{
			
			strCircle = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			strApplicationName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Cricle ID :" + strCircle);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Key Word :" + strKeyword);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Applicatin Name :" + strApplicationName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "completeSMSText :" + completeSMSText);
			callerType = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CALLER_TYPE).getStringValue();
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Caller Type  :" + callerType);
			
			pushSMSHashTable = (Hashtable<String, PushSMSInfo>) AppDataMap.getInstance(strApplicationName).getAppData(AppConstant.PUSH_SMS+strApplicationName);
			
			if(pushSMSHashTable != null){
				
				if(smsHashTable == null)
				{

					smsHashTableDataIndexMap = (Hashtable<String, Hashtable<String, String>>) mySession.getProperty(AppConstant.SMSDataIndexMap);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Hash Table:"+smsHashTableDataIndexMap);
					if(smsHashTableDataIndexMap != null){
						for (int i = 0; i < smsHashTableDataIndexMap.size(); i++) {
							
							smsHashTable = smsHashTableDataIndexMap.get(""+i);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, i+" - PushSMSDataMap:"+smsHashTable);
							strKeyword = smsHashTable.get(AppConstant.SMSKeyword);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Keyword:"+strCircle+AppConstant.SEPERATOR_UNDERSCORE+strKeyword);
							pushSMSInfo = pushSMSHashTable.get(strCircle+AppConstant.SEPERATOR_UNDERSCORE+strKeyword+AppConstant.SEPERATOR_UNDERSCORE + callerType);
							strSMSTemplate = pushSMSInfo.getSmsText();
							
							reqPushSMS = new ReqPushSMS();
							ivrWebService = new IVRWebServiceImpl();
							
							if((strSMSTemplate != null)&&(i<=3)){
								
								strMsgText = setPushSMS.getSMSText(strSMSTemplate, smsHashTable);
								if(mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_RETENTION_LIST).getStringValue().equalsIgnoreCase("RTN"))
								{
									reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue());
								}
								else
								{
									reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_MOBILE_NO).getStringValue());
								}
								reqPushSMS.setMessageText(strMsgText);
								resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, i+" - PushSMSText:"+strMsgText);
							}
							
						}
						
						
						
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
					}
					else{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "No SMS Map available");
					}
				
				}
				else
				{
					
					strKeyword = smsHashTable.get(AppConstant.SMSKeyword);
				pushSMSInfo = pushSMSHashTable.get(strCircle+AppConstant.SEPERATOR_UNDERSCORE+strKeyword+AppConstant.SEPERATOR_UNDERSCORE + callerType);
				if(pushSMSInfo!=null){
					strMsgText = pushSMSInfo.getSmsText();
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText From DB :" + strMsgText);
					if(strMsgText != null){
						
						strMsgText = setPushSMS.getSMSText(strMsgText, smsHashTable);
						
						reqPushSMS = new ReqPushSMS();
						ivrWebService = new IVRWebServiceImpl();
						if(mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_RETENTION_LIST).getStringValue().equalsIgnoreCase("RTN"))
						{
							reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue());
						}
						else
						{
							reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_MOBILE_NO).getStringValue());
						}
						reqPushSMS.setMessageText(strMsgText);
						
						resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
					}else{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not for that Circle");
					}
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this service");
				}
				}
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this application");
			}
		}
		}catch (Exception e) {
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in sending SMS");
			
		}finally{
			ivrDataBean = null;pushSMSInfo = null;
			reqPushSMS = null;setPushSMS = null;
			resPushSMS = null;
			ivrWebService = null;
		}
	}
}
