package flow.subflow.Account_Information;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.rcom.ppp.hostinterface.view.ReqActivePackDetails;
import com.servion.rcom.ppp.hostinterface.view.ReqActivePlanDetails;
import com.servion.rcom.ppp.hostinterface.view.ResActivePackDetails;
import com.servion.rcom.ppp.hostinterface.view.ResActivePlanDetails;
import com.servion.rcom.ppp.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.ppp.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppConstant;
import com.servion.util.IVRDataBean;
import com.servion.util.StackTrace;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-11  07:29:15 PM
 */
public class executePackAndPlanDetails extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-11  07:29:15 PM
	 */
	public executePackAndPlanDetails() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:18 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:18 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:18 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(2768)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Account_Information-TGSM_PA_0026", "success").setDebugId(2769));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0029", true).setDebugId(3033));
			actions.add(new com.avaya.sce.runtime.Next("Account_Information-Linkdown", "error").setDebugId(2771));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		String hostResult= AppConstant.ERROR;
		String mdn = null;
		IVariable lastRechargeDetails= null;
		IVRDataBean objIVRDataBean = null;
		ReqActivePackDetails reqActivePackDetails = null;
		ReqActivePlanDetails reqActivePlanDetails = null;
		
		ResActivePackDetails resActivePackDetails = null;
		ResActivePlanDetails resActivePlanDetails = null;
		
		IVRWebService ivrWebService = null;
		try
		{
			//Request Processing ......
			if(mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_RETENTION_LIST).getStringValue().equalsIgnoreCase("RTN"))
			{
				mdn = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			}
			else
			{
				mdn = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_MOBILE_NO).getStringValue();
			}
			reqActivePackDetails = new ReqActivePackDetails();
			reqActivePlanDetails = new ReqActivePlanDetails();
			
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			reqActivePackDetails.setMDN(mdn);
			reqActivePlanDetails.setMDN(mdn);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Pack Details request :: "+reqActivePackDetails.toString());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Pack Details request :: "+reqActivePlanDetails.toString());
			
			//Response Processing ......
			ivrWebService = new IVRWebServiceImpl();
			resActivePlanDetails = ivrWebService.executeActivePlanDetails(objIVRDataBean, reqActivePlanDetails);
			
			//moving to complex variable
			if(resActivePlanDetails!=null){
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Plan Details Host responce :: "+resActivePlanDetails.toString());
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Plan Details Response Code :: "+resActivePlanDetails.getResponseCode());
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Plan Details Pack Details :: "+resActivePlanDetails.getPlanDetailsList());
				
				
				if(AppConstant.zero.equalsIgnoreCase(resActivePlanDetails.getResponseCode())){
					resActivePackDetails = ivrWebService.executeActivePackDetails(objIVRDataBean, reqActivePackDetails);
					if(resActivePackDetails!=null && AppConstant.zero.equalsIgnoreCase(resActivePackDetails.getResponseCode())){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Pack Details Host responce :: "+resActivePackDetails.toString());
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Pack Details Response Code :: "+resActivePackDetails.getResponseCode());
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Pack Details Pack Details :: "+resActivePackDetails.getMessageText());
						hostResult =AppConstant.Success;
					}
					// Push SMS code Need to be added
				}
				
			}
			
		}
		catch(Exception e)
		{
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "ERROR Pack Details :: "+e);
		}
		finally
		{
				mdn = null;
				resActivePackDetails = null;
				resActivePlanDetails = null;
				reqActivePackDetails = null;
				reqActivePlanDetails = null;
				ivrWebService = null;
				mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResult);
			
		}
	}
}
