package flow.subflow.InternetAndVAS;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-08  10:29:56 PM
 */
public class Check_MN_0008_Options extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-08  10:29:56 PM
	 */
	public Check_MN_0008_Options() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:12 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("InternetAndVAS-AgentTransfer", "Agent");
		next.setDebugId(3814);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:12 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:12 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "MN_0008 ReturnCode :: ", "MN_0008_Inet_VAS_MM:ReturnCode").setDebugId(4970));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "MN_0008_Inet_VAS_MM:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(3807)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			com.avaya.sce.runtime.BooleanOperation bo1 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.OR);
			com.avaya.sce.runtime.Expression be1 = new com.avaya.sce.runtime.Expression("expression1", "MN_0008_Inet_VAS_MM:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:previous", true);
			bo1.addExpression(be1);
			com.avaya.sce.runtime.Expression be2 = new com.avaya.sce.runtime.Expression("expression2", "MN_0008_Inet_VAS_MM:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:MainMenu", true);
			bo1.addExpression(be2);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "MN_0008 Value :: ", "MN_0008_Inet_VAS_MM:Value").setDebugId(4971));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "MN_0008_Inet_VAS_MM:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Grammars:InternetSettings", true).setDebugId(3808)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "appVariables:callerType", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CDMA", false).setDebugId(5628)).evaluate(mySession)) {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0018", true).setDebugId(5631));
					actions.add(new com.avaya.sce.runtime.Next("InternetAndVAS-AgentTransfer", "Transfer").setDebugId(5630));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("InternetAndVAS-MN_0012", "Get_GPRS_Settings").setDebugId(3809));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "MN_0008_Inet_VAS_MM:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Grammars:VAS", true).setDebugId(3810)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("InternetAndVAS-SF_VAS", "VAS").setDebugId(3811));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "MN_0008_Inet_VAS_MM:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Grammars:CallerTune", true).setDebugId(5005)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("InternetAndVAS-PA_0028_CallerTune_Annce", "Caller_Tune").setDebugId(3813));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(5274)).evaluate(mySession, bo1)) {
				actions = new java.util.ArrayList(1);
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "IVR_CSP_Details:isPostpaid", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(5898)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("InternetAndVAS-PostpaidMainMenu", "(Postpaid Main Menu)").setDebugId(5899));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition7", "IVR_CSP_Details:IsPrepaid", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(5900)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("InternetAndVAS-PrepaidMainMenu", "(Prepaid Main Menu)").setDebugId(5901));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("InternetAndVAS-ProspectMainMenu", "(Prospect Main Menu)").setDebugId(5903));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition8", "MN_0008_Inet_VAS_MM:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:agent", true).setDebugId(5278)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0086", true).setDebugId(5608));
				actions.add(new com.avaya.sce.runtime.Next("InternetAndVAS-AgentTransfer", "Agent").setDebugId(5279));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

		}

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0017", true).setDebugId(5609));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:NIFlag", "MN_0008_Inet_VAS_MM:ReturnCode", false).setDebugId(5973));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
