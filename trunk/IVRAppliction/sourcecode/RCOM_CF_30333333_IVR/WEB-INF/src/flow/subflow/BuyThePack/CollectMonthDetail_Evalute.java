package flow.subflow.BuyThePack;

import java.util.Calendar;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.util.AppConstant;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-15  03:47:04 PM
 */
public class CollectMonthDetail_Evalute extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-15  03:47:04 PM
	 */
	public CollectMonthDetail_Evalute() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:17 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:17 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:17 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Collect Card Return Code", "CollectCreditCard:ReturnCode").setDebugId(1257));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "CollectMonthDetail:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(1258)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:validDate", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "constant:Key_true", true).setDebugId(2817)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("appVariables:monthCount").setDebugId(2802));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "appVariables:monthCount", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "3", false).setDebugId(2803)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("BuyThePack-InvalidMonth_Anno", "invalid").setDebugId(2812));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0081", true).setDebugId(2853));
					actions.add(new com.avaya.sce.runtime.Next("BuyThePack-Tries_ExceededMonth", "ExceededTries").setDebugId(2815));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("BuyThePack-CollectCVV", "CollectCVV").setDebugId(1259));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(3);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0078", true).setDebugId(2850));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:NIFlag", "CollectMonthDetail:ReturnCode", false).setDebugId(3557));
			actions.add(new com.avaya.sce.runtime.Next("BuyThePack-agent", "ExceededTries").setDebugId(2788));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		String returnValue = AppConstant.EMPTY_STRING,returnCode = AppConstant.EMPTY_STRING;
		long creditcardNumber;
		String strCurrYear = AppConstant.EMPTY_STRING;
		int currYear = 0;
		ITraceInfo trace = mySession.getTraceOutput();
		Boolean isValidDate;
		
		returnValue = mySession.getVariableField(IProjectVariables.COLLECT_MONTH_DETAIL,IProjectVariables.COLLECT_MONTH_DETAIL_FIELD_VALUE).getStringValue();
		returnCode = mySession.getVariableField(IProjectVariables.COLLECT_MONTH_DETAIL,IProjectVariables.COLLECT_MONTH_DETAIL_FIELD_RETURN_CODE).getStringValue();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Return Code :"+returnCode);

		Calendar expiry = Calendar.getInstance();
		Calendar today = Calendar.getInstance();

		if(AppConstant.Success.equalsIgnoreCase(returnCode)){

			if(returnValue.length()==4){
				String strMonth = returnValue.substring(0,2);
				String strYear = returnValue.substring(2,returnValue.length());
				
				int month,year,expiryLimit;
				month = Integer.parseInt(strMonth);
				year =  Integer.parseInt(strYear);
				
				/** correct Year Formation **/
				if(month != 0 && month<=12){
					
					currYear = today.get(Calendar.YEAR);
					
					if(year<15){
						currYear = currYear +10;
					}
					
					strCurrYear = AppConstant.EMPTY_STRING+currYear;
					strCurrYear = strCurrYear.substring(0,2);
					strYear = strCurrYear + strYear;
					year = Integer.parseInt(strYear);
					
					expiry.set(Calendar.YEAR, year);
					expiry.set(Calendar.MONTH,--month);
					
					if((expiry.getTime().after(today.getTime()) || expiry.getTime().equals(today.getTime()))){
						isValidDate= true;
					}else{
						isValidDate= false;
					}
				}else{
					isValidDate= false;
				}
			}else{
				isValidDate= false;
			}
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Valid Date :"+isValidDate);
			mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_VALID_DATE).setValue(isValidDate);

		}
	}
	
}
