package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.ppp.model.PhoneGenInfo;
import com.rcom.ppp.resource.IVRDBServiceInstance;
import com.servion.util.AppConstant;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;
import com.servion.util.StackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-28  12:27:17 PM
 */
public class AccessPhoneGen extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-28  12:27:17 PM
	 */
	public AccessPhoneGen() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {

		
		ITraceInfo trace = mySession.getTraceOutput();
		String hostResult = AppConstant.ERROR;
		IVRDataBean objIVRDataBean = null;
		AppProperties ivrProperties = null;
		String serviceType = AppConstant.EMPTY_STRING;
		String callerType = AppConstant.EMPTY_STRING;
		
		try{
			
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			ivrProperties = AppProperties.GetInstance(AppConstant.IVR_CONFIG);
			
			String mobileNo = mySession.getVariableField(IProjectVariables.GET_MOBILE_NO, IProjectVariables.GET_MOBILE_NO_FIELD_VALUE).getStringValue();
			
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_MOBILE_NO).setValue(mobileNo);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "GET_MOBILE_NO_FIELD_VALUE :" +mobileNo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Accessing Phonegen to check whether entered no is prepaid / postpaid : " +mobileNo);
			
			PhoneGenInfo phoneGenInfo = new PhoneGenInfo();
			phoneGenInfo.setMDN(mobileNo);
			
			phoneGenInfo = IVRDBServiceInstance.getInstance().getPhoneGenInfo(objIVRDataBean, phoneGenInfo);
			
			serviceType = phoneGenInfo.getServiceType();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Service Type from DB :  :" +serviceType);
			
			if(serviceType != null && serviceType.contains(ivrProperties.getIVRProp(AppConstant.PREPAID_SERVICE_TYPE)))
			{
				mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_IS_PREPAID).setValue(true);
				mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_IS_POSTPAID).setValue(false);
				
			}
			else if(serviceType != null && serviceType.contains(ivrProperties.getIVRProp(AppConstant.POSTPAID_SERVICE_TYPE)))
			{
				mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_IS_POSTPAID).setValue(true);
				mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_IS_PREPAID).setValue(false);
			}
			else
			{
				mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_IS_PREPAID).setValue(false);
				mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_IS_POSTPAID).setValue(false);
			}
			
			if(serviceType!=null && serviceType.contains(AppConstant.CDMA)){
				callerType = AppConstant.CDMA;
			}else{
				callerType = AppConstant.GSM;
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_GSMFLAG).setValue(AppConstant.Yes);
				
			}
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Caller Type :"+callerType);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CALLER_TYPE).setValue(callerType);
			
			hostResult = AppConstant.Success;
			
		}catch(Exception e)
		{
			StackTrace.PrintException(e);
			
		}
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Status :" +hostResult);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResult);
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:02 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:02 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:02 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(14893)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "IVR_CSP_Details:IsPrepaid", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(14887)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("PrepaidMainMenu", "(Prepaid MM)").setDebugId(16604));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "IVR_CSP_Details:isPostpaid", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(16563)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("PostpaidMainMenu", "(Postpaid MM)").setDebugId(16564));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("ProspectMainMenu", "(Prospect MM)").setDebugId(14892));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0008", true).setDebugId(14924));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown", "(Timeout)").setDebugId(14896));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
