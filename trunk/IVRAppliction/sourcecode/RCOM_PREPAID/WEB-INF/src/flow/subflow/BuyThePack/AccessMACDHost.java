package flow.subflow.BuyThePack;

import java.net.InetAddress;
import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.rcom.hostinterface.view.ReqPaymentUsingCoreBalance;
import com.servion.rcom.hostinterface.view.ResPaymentUsingCoreBalance;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppConstant;
import com.servion.util.AppProperties;
import com.servion.util.DynamicMenu;
import com.servion.util.IVRDataBean;
import com.servion.util.StackTrace;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-15  05:04:00 PM
 */
public class AccessMACDHost extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-15  05:04:00 PM
	 */
	public AccessMACDHost() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:24 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:24 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:24 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "EPM_Alarm:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:TRUE", true).setDebugId(2937)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "WS_Alarm_Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:ON", true).setDebugId(2941)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.tracking.ReportAlarmInfo(com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_MAJOR, "WS Down|BuythePack Flow|Access MACD|", "EPM_Alarm:Description", true).setDebugId(2938));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("EPM_Alarm:Flag", "constant:FALSE", false).setDebugId(2939));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

		}

		actions = new java.util.ArrayList(1);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Pay Core Balance Host Details", "appVariables:HostResult").setDebugId(645));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(646)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:PushSMSDone", "constant:Key_False", false).setDebugId(795));
			actions.add(new com.avaya.sce.runtime.Next("BuyThePack-PayCoreBalSuccess", "Success").setDebugId(650));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			com.avaya.sce.runtime.BooleanOperation bo1 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
			com.avaya.sce.runtime.Expression be1 = new com.avaya.sce.runtime.Expression("expression1", "appVariables:responseCode", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "constant:one", true);
			bo1.addExpression(be1);
			com.avaya.sce.runtime.Expression be2 = new com.avaya.sce.runtime.Expression("expression2", "appVariables:responseCode", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "constant:zero", true);
			bo1.addExpression(be2);

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(2030)).evaluate(mySession, bo1)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.Next("BuyThePack-PayCoreBalFailure", "other").setDebugId(2035));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferCode", "TR_0070", true).setDebugId(2846));
				actions.add(new com.avaya.sce.runtime.Next("BuyThePack-Linkdown", "LinkDown").setDebugId(652));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo trace = mySession.getTraceOutput();
		String hostResponse= AppConstant.ERROR,responseCode = AppConstant.EMPTY_STRING;
		String mdn = AppConstant.EMPTY_STRING;
	    String messageText = AppConstant.EMPTY_STRING;
		String packName = AppConstant.EMPTY_STRING;
		String EPM_Alarm_Description = AppConstant.EMPTY_STRING,IP = AppConstant.EMPTY_STRING;
		//Host Interaction Objects.....
	    ReqPaymentUsingCoreBalance reqPaymentUsingCoreBalance = null;
	    ResPaymentUsingCoreBalance resPaymentUsingCoreBalance = null;
		IVRWebService ivrWebService = null;
		IVRDataBean objIVRDataBean = null;
		try
		{
			IP = InetAddress.getLocalHost().getHostAddress();
			//Request Processing ......
			mdn =  mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			packName = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_PACK_NAME).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "pack Name :: "+packName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "mdn :: "+mdn );
			
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			reqPaymentUsingCoreBalance = new ReqPaymentUsingCoreBalance();
			reqPaymentUsingCoreBalance.setMDN(mdn);
			reqPaymentUsingCoreBalance.setPackName(packName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Payment Using CoreBalance request :: "+reqPaymentUsingCoreBalance.toString());
			
			//Response Processing ......
			ivrWebService = new IVRWebServiceImpl();
			try
			{
			resPaymentUsingCoreBalance = ivrWebService.executePaymentUsingCoreBalance(objIVRDataBean,reqPaymentUsingCoreBalance);
			}
			catch (Exception e){
				EPM_Alarm_Description =IP+"|"+e;
				mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_FLAG).setValue(AppConstant.TRUE);
				mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_DESCRIPTION).setValue(EPM_Alarm_Description);
			}
						
			//moving to complex variable
			if(resPaymentUsingCoreBalance!= null){
				
				responseCode = resPaymentUsingCoreBalance.getResponseCode();
				mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_RESPONSE_CODE).setValue(responseCode);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, " Response Code :: "+responseCode);

				if((AppConstant.zero).equals(responseCode)){
					messageText = resPaymentUsingCoreBalance.getMessageText();
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, " message Text :: "+messageText);
					hostResponse = AppConstant.Success;
					initialPrompt(mySession);
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Response Code is not zero");
				}
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Payment Using CoreBalance Response Object null");
			}
			
		}
		catch(Exception e)
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception In Payment Using CoreBalance :"+e);
			StackTrace.PrintException(e);
			
		}
		finally
		{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResponse);	
		}
	}
	
	public void initialPrompt (SCESession mySession){

		/** Declaration **/
		String initialPrompt = AppConstant.EMPTY_STRING,key = AppConstant.EMPTY_STRING;
		String dynamicWaves =  AppConstant.EMPTY_STRING,appName = AppConstant.EMPTY_STRING;
		String packWave = AppConstant.EMPTY_STRING;
		ArrayList<String> arrLanguage = null;
		ITraceInfo trace =null;
		
		/**Assign**/
		trace = mySession.getTraceOutput();
		appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
		key = appName+AppConstant.SEPERATOR_HYPEN+AppConstant.PA_0051;
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"application Name :"+appName);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Confirmation Language initial Prompt Key :"+key);
		
		dynamicWaves = AppProperties.GetInstance(AppConstant.DYN_MENU).getIVRProp(key);
		arrLanguage = new ArrayList<>();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Confirmation Language initial Prompt :"+dynamicWaves);
		
		/** Form Dynamic Initial Prompt**/
		packWave = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_PACK_WAVE).getStringValue();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"pack Wave :"+packWave);
		
		if(packWave!=null && !AppConstant.EMPTY_STRING.equalsIgnoreCase(packWave)){
			arrLanguage.add(packWave);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic wave File :"+arrLanguage.get(0));
		}
			
			
		/** Form Initial Prompt**/
		DynamicMenu objDynamicMenu = new DynamicMenu();
		initialPrompt=objDynamicMenu.playPrompt(arrLanguage, dynamicWaves, AppConstant.NA, trace);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
		
		
	}
}
