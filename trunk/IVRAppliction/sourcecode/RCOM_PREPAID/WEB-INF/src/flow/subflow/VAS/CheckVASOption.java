package flow.subflow.VAS;

import java.util.HashMap;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.util.AppConstant;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2017-JUN-09  02:51:41 PM
 */
public class CheckVASOption extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2017-JUN-09  02:51:41 PM
	 */
	public CheckVASOption() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:23 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("VAS-appTransfer", "Default");
		next.setDebugId(5737);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:23 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:23 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		String strOfferCode = "",strPrice ="",strValidity_Type = "",strValidity = "",strType ="";
		HashMap<String,String> offerPriceMap = null;
		HashMap<String,String> offerValidityTypeMap = null;
		//HashMap<String,String> offerPriceMap = null;
		ITraceInfo trace =mySession.getTraceOutput();
		int intPrice =0;
		String [] strArray =null;
		String isException = AppConstant.No;
		try{
			offerPriceMap = (HashMap<String,String>)mySession.getProperty(AppConstant.OFFER_PRICE);
			offerValidityTypeMap = (HashMap<String,String>)mySession.getProperty(AppConstant.OFFER_VALIDITY_TYPE);
			
			strOfferCode = mySession.getVariableField(IProjectVariables.MN___0_0_1_0,IProjectVariables.MN___0_0_1_0_FIELD_VALUE).getStringValue();
			strPrice = offerPriceMap.get(strOfferCode);
			strValidity_Type = offerValidityTypeMap.get(strOfferCode);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "strOfferCode :"+strOfferCode);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "strPrice :"+strPrice);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "strValidity_Type :"+strValidity_Type);
			
			if(strPrice!=null){
				if(!strPrice.equalsIgnoreCase(""))
					intPrice = Integer.parseInt(strPrice)*100;
			}
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "intPrice in paise :"+intPrice);
			strPrice = String.valueOf(intPrice);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "strPrice in paise :"+strPrice);
			
			if(strValidity_Type!=null){
				if(!strValidity_Type.equalsIgnoreCase("")&&strValidity_Type.contains("|")){
					strArray =  strValidity_Type.split("\\|");
					
					if(strArray.length>1){
						strValidity = strArray[0];
						strType = strArray[1];
					}
			}
			
			}
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "strValidity :"+strValidity);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "strType :"+strType);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_OFFER_CODE).setValue(strOfferCode);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_OFFER_PRICE).setValue(strPrice);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_OFFER_TYPE).setValue(strType);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_OFFER_VALIDTY).setValue(strValidity);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "strValidity *:"+mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_OFFER_VALIDTY).getStringValue());
			
		}catch(Exception e)
		{
			isException = AppConstant.Yes;
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Exception in CheckVASOption.jave" +e.getMessage());
		}
		finally{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(isException);
		}
	}
	
	
}
