package flow;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.SpecialTariffInfo;
import com.servion.util.AppConstant;
import com.servion.util.AppDataMap;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-15  09:10:13 PM
 */
public class Get_IVR_STV extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-15  09:10:13 PM
	 */
	public Get_IVR_STV() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:20 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:20 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:20 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(4356)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Get_STVMenu", "success").setDebugId(4358));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("LinkDown", "LinkDown").setDebugId(4360));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {

		/** Declaration **/
		String circleID = AppConstant.EMPTY_STRING,STVInfoKey = AppConstant.EMPTY_STRING;
		String hostResult = AppConstant.ERROR,appName = AppConstant.EMPTY_STRING;
		String language = AppConstant.EMPTY_STRING;
		Hashtable<String, List<SpecialTariffInfo>> mapSpecialTariffInfo = null;
		
		List<SpecialTariffInfo> listSpecialTariffInfo = null;
		SpecialTariffInfo objSpecialTariffInfo = null;
		String rechargeKey = AppConstant.EMPTY_STRING;
		String menuOption =AppConstant.EMPTY_STRING;
		ITraceInfo trace = null;
		int denominationCount = 0,packCount = 0;
		HashMap<String,SpecialTariffInfo> objMapSpecialTariffInfo = null;
		ArrayList<String> arrDynamicValue = null ,arrDynamicPackValue =null;
		
		
		/**Assign**/
		appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
		circleID = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
		language = mySession.getCurrentLanguage();
		
		objMapSpecialTariffInfo = new HashMap<>();
		trace = mySession.getTraceOutput();
		arrDynamicValue = new ArrayList<String>();
		arrDynamicPackValue = new ArrayList<String>();
		
		try{
		STVInfoKey = AppConstant.STV_KEY+appName;
		mapSpecialTariffInfo = (Hashtable<String, List<SpecialTariffInfo>>) AppDataMap.getInstance(appName).getAppData(STVInfoKey);
	
		for(int i = 1 ; i<=10 ; i++){
				
			STVInfoKey = circleID+AppConstant.SEPERATOR_UNDERSCORE+language+AppConstant.SEPERATOR_UNDERSCORE+AppConstant.Option+i;
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "STV Offer Key :: "+STVInfoKey);
			listSpecialTariffInfo = mapSpecialTariffInfo.get(STVInfoKey);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "listSpecialTariffInfo Object :: "+listSpecialTariffInfo);
			
			if(listSpecialTariffInfo!= null){
				
				for(int j = 0; j<listSpecialTariffInfo.size();j++){
					
					objSpecialTariffInfo = listSpecialTariffInfo.get(j);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SpecialTariffInfo Object :: "+objSpecialTariffInfo);
					
					if(objSpecialTariffInfo!= null){
						
						String strPackPhrase  = objSpecialTariffInfo.getPackNamePhrase();
						String packMenuOption = objSpecialTariffInfo.getPackMenuOption();
						
						objMapSpecialTariffInfo.put(packMenuOption+AppConstant.Option+j, objSpecialTariffInfo);
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "packMenuOption :: "+packMenuOption);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "packPhrase :: "+strPackPhrase);
						
						if(j==0){
							arrDynamicPackValue.add(strPackPhrase);
							menuOption = menuOption+packMenuOption+AppConstant.SEPERATOR_COMMA;
						}
						
					}
					
					hostResult = AppConstant.Success;
				}
				packCount++;
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "Total Packs Available :: " +i);
				break;
			}
			}
			mySession.setProperty(AppConstant.STV_MAP,objMapSpecialTariffInfo);
			mySession.setProperty(AppConstant.STV_PACK_PHRASE_LIST,arrDynamicPackValue);
			mySession.setProperty(AppConstant.STV_PACK_MENU_OPTION,menuOption);
			mySession.setProperty(AppConstant.STV_PACK_COUNT,packCount);
				
		}
		catch(Exception e)
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Exception in RSV Details Host : " + e);
			
		}
		finally
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResult);
		}
	
	
	}
	
}
