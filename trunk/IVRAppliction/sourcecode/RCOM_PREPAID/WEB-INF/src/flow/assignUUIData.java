package flow;

import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.prepaid.report.IVRREPORTDATA.MENUDETAILS.MENU;
import com.servion.util.AppConstant;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;
import com.sun.org.apache.xalan.internal.xsltc.compiler.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2017-JUN-09  05:07:02 PM
 */
public class assignUUIData extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2017-JUN-09  05:07:02 PM
	 */
	public assignUUIData() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:22 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:22 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:22 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:isException", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(10196)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferCode", "TR_0059", true).setDebugId(10202));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown", "LinkDown").setDebugId(10197));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.PrepareAAI("Shared", "", "appVariables:uuiData", "UUIData").setDebugId(10199));
			actions.add(new com.avaya.sce.runtime.Next("VASTransfer", "Default").setDebugId(10184));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		String strUUI ="";
		String externalVDN ="",ani = "",circle = "",language = "",price = "",validity = "",type = "",offerCode = "",UIappName = "";
		ITraceInfo trace = mySession.getTraceOutput();
		String isException =AppConstant.No;
		IVRDataBean ivrDataBean = null;
		String menuID ="",last5Menu="";
		try
		{
			/** getting the IVRData bean from session**/
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);

			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			IVRREPORTDATA ivrreportdata = getReportObject.getIvrreportdata();
			CALLINFO callInfo = ivrreportdata.getCALLINFO();
			List<MENU> menuList = ivrreportdata.getMENUDETAILS().getMENU();
			
			if(menuList  !=null){
				
				for (int i = menuList.size(); (i> (menuList.size()-5)) && (i!=0); i-- ){
					menuID = menuList.get((i-1)).getMENUID();
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "menu ID :"+menuID);
					last5Menu = last5Menu + menuID+"|";
				}
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Last 5 menu accessed :"+last5Menu);
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "No Menu accessed");
			}
			
			offerCode = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_OFFER_CODE).getStringValue();
			price = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_OFFER_PRICE).getStringValue();
			validity = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_OFFER_VALIDTY).getStringValue();
			type = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_OFFER_TYPE).getStringValue();
					
			
			externalVDN  = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(AppConstant.VAS_TRANSFER_VDN).trim();
			
			if(externalVDN != null && !AppConstant.EMPTY_STRING.equals(externalVDN)&& !externalVDN.equalsIgnoreCase("N")){
				callInfo.setAGENTEXTN(externalVDN);
				callInfo.setAGENTID(externalVDN);
				callInfo.setTRANSFERVDN(externalVDN);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(externalVDN);
			}
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "externalVDN: "+externalVDN);
			
			ani = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			circle = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			language =mySession.getCurrentLanguage();
			UIappName =mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			
			if(externalVDN.equalsIgnoreCase(AppConstant.EMPTY_STRING)|| externalVDN.equalsIgnoreCase("N")){
				externalVDN = AppConstant.DefaultExternalVDN;
				callInfo.setTRANSFERVDN(externalVDN);
			}
			strUUI = ani+AppConstant.PIPE+circle+AppConstant.PIPE+UIappName+AppConstant.PIPE+language+AppConstant.PIPE+offerCode+AppConstant.PIPE+price+AppConstant.PIPE+validity+AppConstant.PIPE+type;
		   
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "strUUI: "+strUUI);
			
			callInfo.setUUIDATA(strUUI);
			callInfo.setTRANSCODE(externalVDN);
			callInfo.setDISPOSITION(AppConstant.XA);
			callInfo.setCALLENDREASON(AppConstant.TRANSFER);
			
		}catch(Exception e)
		{
			isException = AppConstant.Yes;
		}
		finally{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_UUI_DATA).setValue(strUUI);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(isException);
		}
	
	}
}
