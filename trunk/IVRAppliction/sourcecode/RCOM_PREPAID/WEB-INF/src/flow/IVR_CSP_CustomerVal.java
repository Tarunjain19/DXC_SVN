package flow;

import java.net.InetAddress;
import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.IVRCspInfo;
import com.rcom.prepaid.resource.IVRDBServiceInstance;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppConstant;
import com.servion.util.AppProperties;
import com.servion.util.DynamicMenu;
import com.servion.util.IVRDataBean;
import com.servion.util.StackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-11  11:51:39 PM
 */
public class IVR_CSP_CustomerVal extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-11  11:51:39 PM
	 */
	public IVR_CSP_CustomerVal() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:21 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:21 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:21 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "EPM_Alarm:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:TRUE", true).setDebugId(9885)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.ReportAlarmInfo(com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_CRITICAL, "DB Down|Main Flow|IVR CSP Customer|", "EPM_Alarm:Description", true).setDebugId(9886));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("EPM_Alarm:Flag", "constant:FALSE", false).setDebugId(9887));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(477)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "appVariables:prefLanguage", com.avaya.sce.runtime.Expression.NOT_EMPTY).setDebugId(483)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "Flag:TransferBackCaller", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:Key_true", true).setDebugId(5968)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("checkMainMenuCount", "TransferBackCall").setDebugId(5969));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				}

				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("CheckBarringList", "ReturnStart").setDebugId(485));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "In else condtion and check  unidentified Customers ", "Flag:Unidentified_CUS").setDebugId(10132));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "Flag:Unidentified_CUS", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "TRUE", false).setDebugId(10128)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("ThankyouMessage", "Unidentified").setDebugId(10129));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				}

				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("LanguageMenu", "SelectLang").setDebugId(487));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferCode", "TR_0056", true).setDebugId(7442));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown", "LinkDown").setDebugId(480));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		/** Declaration **/
		String  callerANI = AppConstant.EMPTY_STRING,preferedLang = AppConstant.EMPTY_STRING,propetyKey= AppConstant.EMPTY_STRING;
		String  barringCode = AppConstant.EMPTY_STRING,key = AppConstant.EMPTY_STRING,appName= AppConstant.EMPTY_STRING,propertiesLocation = AppConstant.EMPTY_STRING;
		String  callerType = AppConstant.EMPTY_STRING,dataType = AppConstant.EMPTY_STRING,service_Type = AppConstant.EMPTY_STRING;
		String hostOutput = AppConstant.ERROR;
		String EPM_Alarm_Description = AppConstant.EMPTY_STRING;
		IVRDataBean objIVRData = null;
		IVRCspInfo objIVRCspInfo = null;
		ITraceInfo trace =null;
		String IP = AppConstant.EMPTY_STRING;
		GetReportObject objGetReportObject = null;
		IVRREPORTDATA objIVRREPORTDATA= null;
		CALLINFO objCALLINFO = null;
		String circleLangCode = AppConstant.EMPTY_STRING;
		
		/**Assign**/
		trace = mySession.getTraceOutput();
		callerANI = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
		circleLangCode = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE_LIST).getStringValue();
		
		objIVRData = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
		appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
		objIVRCspInfo = new IVRCspInfo();
		objIVRCspInfo.setMdn(callerANI);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"caller ANI :"+callerANI);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"IVRData Bean Object :"+objIVRData);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"appName :"+appName);
		
		try{
		
			IP = InetAddress.getLocalHost().getHostAddress();	
			objGetReportObject = objIVRData.getGetReportObject(); 
			objIVRREPORTDATA = objGetReportObject.getIvrreportdata();
			objCALLINFO = objIVRREPORTDATA.getCALLINFO();
			
			/**DB**/
			try
			{
				objIVRCspInfo=IVRDBServiceInstance.getInstance().getIVRCSPInfo(objIVRData, objIVRCspInfo);
			}
			catch(Exception e)
			{
				EPM_Alarm_Description =IP+"|"+e;
				mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_FLAG).setValue(AppConstant.TRUE);
				mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_DESCRIPTION).setValue(EPM_Alarm_Description);
			}
			
			if(objIVRCspInfo!=null)
			{
				/***Barring List **/
				barringCode=objIVRCspInfo.getBarringList();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Barring Code :"+barringCode);
				if(barringCode!=null && barringCode.contains(AppConstant.ABUSIVE))
					mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_BARRING_LIST).setValue(AppConstant.ABUSIVE);
				
				
				/***Preferred Language**/
				preferedLang=objIVRCspInfo.getPreLang();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"prefered Lang :"+preferedLang);
				
				if(preferedLang!=null && !AppConstant.EMPTY_STRING.equals(preferedLang) && !AppConstant.NA.equalsIgnoreCase(preferedLang)){
					
					/*key = AppConstant.Language_Code+preferedLangCode;
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language_Code Key:"+key);
					preferedLang=(String) AppDataMap.getInstance(appName).getAppData(key);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Preferred Language :"+preferedLang);*/
						if(circleLangCode != null && circleLangCode.contains(preferedLang)){
							mySession.setCurrentLanguage(preferedLang);
							propetyKey = AppConstant.PROPERTY+appName+AppConstant.SEPERATOR_UNDERSCORE+preferedLang;
							
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"propety Key :"+propetyKey);
							propertiesLocation = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(propetyKey);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location :"+propertiesLocation);
							
							if(propertiesLocation!=null && !AppConstant.N.equalsIgnoreCase(propertiesLocation))
								mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertiesLocation);
							else
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
							
							mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_PREFERED_LANGUAGE).setValue(preferedLang);
							mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_PREF_LANGUAGE).setValue(preferedLang);
							objCALLINFO.setLANGCODE(preferedLang);
						}else{
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Preferred Language is not available in Circle"+circleLangCode);
							LanguageSelectionMenu(mySession);
						}
				
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language Selection Menu Inital Prompt Start");
					LanguageSelectionMenu(mySession);
				}
				
				/**Intelligent ***/
				dataType=objIVRCspInfo.getService();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Intelligent Layer dataType :"+dataType);
				mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_DATATYPE).setValue(dataType);
				
				/**caller Type ***/
				callerType = objIVRCspInfo.getHnipre();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"caller Type :"+callerType);
				mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_DATATYPE).setValue(callerType);
				
				if(callerType!=null && !AppConstant.EMPTY_STRING.equals(callerType) &&!AppConstant.NA.equals(callerType)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"HNI CAllER FLAG :"+AppConstant.TRUE);
					mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_HNICALLER).setValue(AppConstant.TRUE);
				}
				
				/***Postpaid caller Flag***/
				service_Type =  objIVRCspInfo.getServiceType();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"service_Type :"+service_Type);
				if(service_Type!=null && service_Type.contains(AppConstant.POST)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Post Paid Caller");
					mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_POST_PAID_CALLER).setValue(AppConstant.TRUE);
				}
				
				/***If customer not prepaid and nither postpaid i.e not in phonegen table***/
						
				if(service_Type.equalsIgnoreCase("NA")){
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"NA Caller");
					if (appName.contains("RTL"))
					{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Not applicable for RTL circle");
					}
					else
					{
						mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_UNIDENTIFIED__CUS).setValue(AppConstant.TRUE);
					}
				}
				
			}else
				{ //When object is null
				
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language Selection Menu Inital Prompt Start");
					LanguageSelectionMenu(mySession);
					
/*					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Intelligent Layer dataType :"+dataType);
					mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_DATATYPE).setValue(AppConstant.NA);
				
					mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_CALLER_TYPE).setValue(AppConstant.NA);
					mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_HNICALLER).setValue(AppConstant.FALSE);
					mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_POST_PAID_CALLER).setValue(AppConstant.FALSE);*/
					
				}
		
		hostOutput = AppConstant.Success;
		
		
		}catch (Exception e) {
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in IVR CSP DB Hit :" +e);
			StackTrace.PrintException(e);
		}
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Status :" +hostOutput);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostOutput);
	}
	
	public void LanguageSelectionMenu (SCESession mySession){
		
		/** Declaration **/
		String initialPrompt = AppConstant.EMPTY_STRING,grammarValue = AppConstant.EMPTY_STRING,circleLangCode = AppConstant.EMPTY_STRING;
		String dynamicWaves =  AppConstant.EMPTY_STRING,appName = AppConstant.EMPTY_STRING,key = AppConstant.EMPTY_STRING,circleLanguage = AppConstant.EMPTY_STRING,langKey = AppConstant.EMPTY_STRING;
		String[] arrayLangCode = null;
		ArrayList<String> arrLanguage=null;
		ITraceInfo trace =null;
		
		/**Assign**/
		trace = mySession.getTraceOutput();
		appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
		key = appName+AppConstant.SEPERATOR_HYPEN+AppConstant.MN_0001;
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"application Name :"+appName);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language initial Prompt Key :"+key);
		
		dynamicWaves = AppProperties.GetInstance(AppConstant.DYN_MENU).getIVRProp(key);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language initial Prompt :"+dynamicWaves);
		arrLanguage = new ArrayList<>();
		/** Form Dynamic Initial Prompt**/
		circleLangCode = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE_LIST).getStringValue();
		
		if(circleLangCode!=null){
			arrayLangCode = circleLangCode.split(AppConstant.SEPERATOR_COMMA);
			
			for(int i = 0;i<arrayLangCode.length;i++){
				/*key = AppConstant.Language_Code+arrayLangCode[i];
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language_Code Key:"+key);*/
				circleLanguage=arrayLangCode[i];
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Circle Language : "+i+" :"+circleLanguage);
				langKey = AppConstant.LANG_+i;
				dynamicWaves = dynamicWaves.replaceAll(langKey,circleLanguage);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic Wave :" +dynamicWaves);
				arrLanguage.add(circleLanguage+AppConstant.wave);
			}
			
			/** Form Initial Prompt**/
			String count = String.valueOf(arrLanguage.size());
			DynamicMenu objDynamicMenu = new DynamicMenu();
			initialPrompt=objDynamicMenu.playPrompt(arrLanguage, dynamicWaves, count, trace);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Menu Option : "+circleLangCode);
			
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MORE_OPTION_COUNT).setValue(count);
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MENU_OPTION).setValue(circleLangCode);
			
		}
		
	}
}
