package flow.subflow.Prepaid_Account_Information;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.rcom.hni.hostinterface.view.ReqDataBalance;
import com.servion.rcom.hni.hostinterface.view.ResDataBalance;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.triplefive.utils.AppConstant;
import com.servion.triplefive.utils.PrintStackTrace;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-11  05:02:08 PM
 */
public class executeDataBalance extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-11  05:02:08 PM
	 */
	public executeDataBalance() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:58 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:58 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:58 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Prepaid_appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_constant:success", true).setDebugId(1119)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Prepaid_dataBalanceAndValidity:noDataFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_constant:Key_False", true).setDebugId(1122)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Prepaid_Account_Information-Set_TGSM_PA_0024", "Available").setDebugId(1123));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Prepaid_Account_Information-PA_0080", "NotAvailable").setDebugId(2415));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "Prepaid_Flag:CalledFromIntelligent", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_constant:Key_true", true).setDebugId(2936)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Prepaid_Account_Information-MainMenu", "MainMenu").setDebugId(2937));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Prepaid_appVariables:transferCode", "TR_0077", true).setDebugId(3026));
				actions.add(new com.avaya.sce.runtime.Next("Prepaid_Account_Information-TGSM_PA_0023", "network_failure").setDebugId(2939));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo trace = mySession.getTraceOutput();
		String sessionId = null;
		String mdn = null,hostResponse= AppConstant.ERROR;
		IVariable dataBalance = null;
		IVRDataBean objIVRDataBean = null;
		ReqDataBalance reqDataBalance = null;
		ResDataBalance resDataBalance = null;
		IVRWebService ivrWebService = null;
		SimpleDateFormat sdfObject = new SimpleDateFormat("dd-MM-yyyy");
		SimpleDateFormat formatter = new SimpleDateFormat(AppConstant.DATE_FORMAT_YYYYMMDD);
		String NoDataDetailFlag = AppConstant.TRUE,appName;
		Date dateFomat;
		DecimalFormat df;
		try
		{
			//Request Processing ......
			mdn =  mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			reqDataBalance = new ReqDataBalance();
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			reqDataBalance.setMDN(mdn);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host request :: "+reqDataBalance.toString());
			appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			dataBalance = mySession.getVariable(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY);
			df = new DecimalFormat("###.##");
			
			//Response Processing ......
			ivrWebService = new IVRWebServiceImpl();
			resDataBalance = ivrWebService.executeDataBalance(objIVRDataBean,reqDataBalance);
			
			
			if(resDataBalance!=null){
				dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_RESPONSE_CODE).setValue(resDataBalance.getResponseCode());
				if(AppConstant.zero.equals(resDataBalance.getResponseCode())){
					String strThreeGFairUsageBalance =resDataBalance.getThreeGFairUsageBalance();
					String strThreeGFairUsageBalanceExpiryDate = resDataBalance.getThreeGFairUsageBalanceExpiryDate();
					String strThreeGNetBalance = resDataBalance.getThreeGNetBalance();
					String strThreeGNetBalanceExpiryDate = resDataBalance.getThreeGNetBalanceExpiryDate();
					String strcdmaDataUsageBalance = resDataBalance.getcdmaDataBalance();
					String strcdmaDataUsageBalanceExpiryDate = resDataBalance.getcdmaDataBalanceExpiryDate();
					
					String strTwoGNetBalance = resDataBalance.getTwoGNetBalance();
					String strTwoGNetBalanceExpiryDate = resDataBalance.getTwoGNetBalanceExpiryDate();
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host ResponseCode :: "+resDataBalance.getResponseCode());
					
					mySession.getVariableField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY,IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_SMS_THREE_GFAIR_USAGE_DATE).setValue(strThreeGFairUsageBalanceExpiryDate);
					mySession.getVariableField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY,IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_SMSCDMA_USAGE_DATE).setValue(strcdmaDataUsageBalanceExpiryDate);
					mySession.getVariableField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY,IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_SMSTHREE_GNET_DATE).setValue(strThreeGNetBalanceExpiryDate);
					mySession.getVariableField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY,IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_SMSTWO_GNET_DATE).setValue(strTwoGNetBalanceExpiryDate);
					
					if(!appName.contains(AppConstant.CDMA)){
					if(strThreeGFairUsageBalance!=null && strThreeGFairUsageBalanceExpiryDate!=null){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGFairUsageBalance:: "+strThreeGFairUsageBalance);
						
						/***Convert Data Balance**/
						try {
							double dThreeGFairUsageBalance = (Double.parseDouble(strThreeGFairUsageBalance)/(1024*1024));
							strThreeGFairUsageBalance =df.format(dThreeGFairUsageBalance);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "ThreeGFair Usage Balance after Convertion" +strThreeGFairUsageBalance);
						} catch (Exception e) {
							trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Error in Convertion"+e);
						}
						
						/***Convert Data Balance Expiry Date**/
						dateFomat = sdfObject.parse(strThreeGFairUsageBalanceExpiryDate);
						strThreeGFairUsageBalanceExpiryDate = formatter.format(dateFomat);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGFairUsageBalanceExpiryDate:: "+strThreeGFairUsageBalanceExpiryDate);
						NoDataDetailFlag = AppConstant.FALSE;
					}
					
					dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GFAIR_USAGE_BALANCE).setValue(strThreeGFairUsageBalance);
					dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GFAIR_USAGE_BALANCE_EXPIRY_DATE).setValue(strThreeGFairUsageBalanceExpiryDate);
					
					if(strThreeGNetBalance!=null && strThreeGNetBalanceExpiryDate!=null){
						
						/**Data Balance Convertion***/
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGNetBalance:: "+resDataBalance.getThreeGNetBalance());
						
						try {
							double dThreeGNetBalance = (Double.parseDouble(strThreeGNetBalance)/(1024*1024));
							strThreeGNetBalance =df.format(dThreeGNetBalance);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Three Data Balance after Convertion" +strThreeGNetBalance);
							
						} catch (Exception e) {
							trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Error in Convertion"+e);
						}
						
						dateFomat = sdfObject.parse(strThreeGNetBalanceExpiryDate);
						strThreeGNetBalanceExpiryDate = formatter.format(dateFomat);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGNetBalanceExpiryDate:: "+strThreeGNetBalanceExpiryDate);
						NoDataDetailFlag = AppConstant.FALSE;
					}
					
					dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GNET_BALANCE).setValue(strThreeGNetBalance);
					dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GNET_BALANCE_EXPIRY_DATE).setValue(strThreeGNetBalanceExpiryDate);
					
					if(strTwoGNetBalance!=null && strTwoGNetBalanceExpiryDate!=null){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response TwoGNetBalance:: "+resDataBalance.getTwoGNetBalance());
						
						try {
							double dTwoGNetBalance = (Double.parseDouble(strTwoGNetBalance)/(1024*1024));
							strTwoGNetBalance =df.format(dTwoGNetBalance);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Three Data Balance after Convertion" +strTwoGNetBalance);
							
						} catch (Exception e) {
							trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Error in Convertion"+e);
						}
						
						dateFomat = sdfObject.parse(strTwoGNetBalanceExpiryDate);
						strTwoGNetBalanceExpiryDate = formatter.format(dateFomat);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response TwoGNetBalanceExpiryDate:: "+strTwoGNetBalanceExpiryDate);
						NoDataDetailFlag = AppConstant.FALSE;
					}
					dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_TWO_GNET_BALANCE).setValue(strTwoGNetBalance);
					dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_TWO_GNET_BALANCE_EXPIRY_DATE).setValue(strTwoGNetBalanceExpiryDate);
					}else{
						if(strcdmaDataUsageBalance!=null && strcdmaDataUsageBalanceExpiryDate!=null){
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response cdmaDataUsageBalance:: "+resDataBalance.getcdmaDataBalance());
							
							try {
								double dcdmaDataUsageBalance = (Double.parseDouble(strcdmaDataUsageBalance)/(1024*1024));
								strcdmaDataUsageBalance =df.format(dcdmaDataUsageBalance);
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Three Data Balance after Convertion" +strcdmaDataUsageBalance);
								
							} catch (Exception e) {
								trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Error in Convertion"+e);
							}
							
							dateFomat = sdfObject.parse(strcdmaDataUsageBalanceExpiryDate);
							strcdmaDataUsageBalanceExpiryDate = formatter.format(dateFomat);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response cdmaDataUsageBalanceExpiryDate:: "+strcdmaDataUsageBalanceExpiryDate);
							NoDataDetailFlag = AppConstant.FALSE;
						}
					dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_CDMA_USAGE_BALANCE).setValue(strcdmaDataUsageBalance);
					dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_CDMA_BALANCE_EXPIRY_DATE).setValue(strcdmaDataUsageBalanceExpiryDate);
					}
					//moving to complex variable .......
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "No Data Detail Flag:: "+NoDataDetailFlag);
					
					dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_NO_DATA_FLAG).setValue(NoDataDetailFlag);
					hostResponse= AppConstant.Success;
				}else if(AppConstant.two.equals(resDataBalance.getResponseCode())){
						hostResponse= AppConstant.Success;
						dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_NO_DATA_FLAG).setValue(NoDataDetailFlag);
				}
				else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DataBalance Responce Code is not Zero or Two");
				}
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DataBalance Responce Object is null");
			}
			
		}catch(Exception e)
		{
			PrintStackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Error in Data Balance Host Access:"+e);
		}
		finally
		{
				mdn = null;
				reqDataBalance = null;
				resDataBalance = null;
				ivrWebService = null;
				mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES, IProjectVariables.PREPAID__APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResponse);
		}
	
}
}