package flow.subflow.Prepaid_BuyThePack;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.rcom.hni.hostinterface.view.CreditCardDetails;
import com.servion.rcom.hni.hostinterface.view.ReqPaymentUsingCreditcard;
import com.servion.rcom.hni.hostinterface.view.ResPaymentUsingCreditcard;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.triplefive.utils.AppConstant;
import com.servion.triplefive.utils.PrintStackTrace;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-15  06:16:13 PM
 */
public class PaymentHostHit extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-15  06:16:13 PM
	 */
	public PaymentHostHit() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:58 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:58 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:58 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Prepaid_Flag:PushSMSDone", "Prepaid_constant:Key_False", false).setDebugId(2906));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Prepaid_appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_constant:success", true).setDebugId(1696)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Prepaid_BuyThePack-PaymentSuccess", "success").setDebugId(1698));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Prepaid_appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_constant:error", true).setDebugId(1703)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Prepaid_appVariables:transferCode", "TR_0071", true).setDebugId(2854));
			actions.add(new com.avaya.sce.runtime.Next("Prepaid_BuyThePack-Linkdown", "LinkDown").setDebugId(1702));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(3);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Prepaid_appVariables:transferCode", "TR_0106", true).setDebugId(2855));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Prepaid_dmInputParameter:propertyFileName", "Prepaid_propertyFileName:GPFeatureLevel", false).setDebugId(2907));
			actions.add(new com.avaya.sce.runtime.Next("Prepaid_BuyThePack-PaymentError", "error").setDebugId(1704));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {

		
		ITraceInfo trace = mySession.getTraceOutput();
		String hostResponse= AppConstant.EMPTY_STRING,responseCode = AppConstant.EMPTY_STRING;
		String mdn = AppConstant.EMPTY_STRING;
	    String messageText = AppConstant.EMPTY_STRING;
		
		//Host Interaction Objects.....
	    ReqPaymentUsingCreditcard reqPaymentUsingCreditcard = null;
	    ResPaymentUsingCreditcard resPaymentUsingCreditcard = null;
		IVRWebService ivrWebService = null;
		IVRDataBean objIVRDataBean = null;
		String rcType = AppConstant.EMPTY_STRING;
		String amount = AppConstant.EMPTY_STRING;
		String cardNumber = AppConstant.EMPTY_STRING,errorPropertyFileName = AppConstant.EMPTY_STRING;
		CreditCardDetails objCreditCardDetails = null;
		try
		{
			//Request Processing ......
			mdn =  mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES, IProjectVariables.PREPAID__APP_VARIABLES_FIELD_ANI).getStringValue();
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			rcType = mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES,IProjectVariables.PREPAID__APP_VARIABLES_FIELD_RCTYPE).getStringValue();
			amount = mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES,IProjectVariables.PREPAID__APP_VARIABLES_FIELD_AMOUNT).getStringValue();
			cardNumber = mySession.getVariableField(IProjectVariables.COLLECT_CREDIT_CARD,IProjectVariables.COLLECT_CREDIT_CARD_FIELD_VALUE).getStringValue();
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Payment Using credit Card RC Type :: "+rcType);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Payment Using credit Card Amount:: "+amount);
			
			objCreditCardDetails = new CreditCardDetails();
			
			
			objCreditCardDetails.setCardNumber(cardNumber);
			objCreditCardDetails.setCardExpiryDate(mySession.getVariableField(IProjectVariables.COLLECT_MONTH_DETAIL,IProjectVariables.COLLECT_MONTH_DETAIL_FIELD_VALUE).getStringValue());
			objCreditCardDetails.setCardCVV(mySession.getVariableField(IProjectVariables.COLLECT_CVV,IProjectVariables.COLLECT_CVV_FIELD_VALUE).getStringValue());
			
			if(cardNumber!=null && cardNumber.startsWith(AppConstant.five)){
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Starts with 5");
				objCreditCardDetails.setCardType(AppConstant.M);
			}else if (cardNumber!=null && cardNumber.startsWith(AppConstant.four)){
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Starts with 4");
				objCreditCardDetails.setCardType(AppConstant.V);
			}
			
			reqPaymentUsingCreditcard = new ReqPaymentUsingCreditcard();
			reqPaymentUsingCreditcard.setMDN(mdn);
			reqPaymentUsingCreditcard.setMDNToBeRecharged(mdn);
			reqPaymentUsingCreditcard.setRcType(rcType);
			reqPaymentUsingCreditcard.setOTP(mySession.getVariableField(IProjectVariables.COLLECT_OTP,IProjectVariables.COLLECT_OTP_FIELD_VALUE).getStringValue());
			reqPaymentUsingCreditcard.setAmount(amount);
			reqPaymentUsingCreditcard.setCreditCardDetails(objCreditCardDetails);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Payment Using credit Card Host request :: "+reqPaymentUsingCreditcard.toString());
			
			//Response Processing ......
			ivrWebService = new IVRWebServiceImpl();
			resPaymentUsingCreditcard = ivrWebService.executePaymentUsingCreditcard(objIVRDataBean,reqPaymentUsingCreditcard);
						
			//moving to complex variable
			if(resPaymentUsingCreditcard!= null){
				
				responseCode = resPaymentUsingCreditcard.getResponseCode();
				mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES,IProjectVariables.PREPAID__APP_VARIABLES_FIELD_RESPONSE_CODE).setValue(responseCode);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, " Response Code :: "+responseCode);

				if((AppConstant.zero).equals(responseCode)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "/*** Payment Success ***/");
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, " message Text :: "+resPaymentUsingCreditcard.getPaymentId());
					hostResponse = AppConstant.Success;
				}else if(AppConstant._999.equalsIgnoreCase(responseCode)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "/*** Payment Failure ***/");
					hostResponse = AppConstant.ERROR;
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Host Down :" + responseCode);
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Dynamic Error Code" + responseCode);
					if(AppConstant.PAYMENT_ERRORCODE_1.equalsIgnoreCase(responseCode) ||AppConstant.PAYMENT_ERRORCODE__1.equalsIgnoreCase(responseCode)){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Transaction Failed");
						errorPropertyFileName = AppConstant.PAYMENT_ERROR_CODE+AppConstant.one;
					}else if(AppConstant.PAYMENT_ERRORCODE_9.equalsIgnoreCase(responseCode) ){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Transaction Decline by Bank");
						errorPropertyFileName = AppConstant.PAYMENT_ERROR_CODE+AppConstant.PAYMENT_ERRORCODE_9;
						
					}else if(AppConstant.PAYMENT_ERRORCODE__2.equalsIgnoreCase(responseCode)){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Issue in Card Gateway");
						errorPropertyFileName = AppConstant.PAYMENT_ERROR_CODE+AppConstant.PAYMENT_ERRORCODE__2;
						
					}else if(AppConstant.PAYMENT_ERRORCODE_NA.equalsIgnoreCase(responseCode)){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Invalid Input");
						errorPropertyFileName = AppConstant.PAYMENT_ERROR_CODE+AppConstant.PAYMENT_ERRORCODE_NA;
					}
					else{
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Error Code not in the list");
						hostResponse = AppConstant.ERROR;
					}
					errorPropertyFileName = errorPropertyFileName+".properties";
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Error Code Property File:"+errorPropertyFileName);
					mySession.getVariableField(IProjectVariables.PREPAID__DM_INPUT_PARAMETER,IProjectVariables.PREPAID__DM_INPUT_PARAMETER_FIELD_ERRORCODE_PROPERTY_FILE).setValue(errorPropertyFileName);
				}
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Payment Using CoreBalance Response Object null");
			}
			
		}
		catch(Exception e){
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception In Payment Using CoreBalance :"+e);
			PrintStackTrace.PrintException(e);
			
		}
		finally{
			mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES, IProjectVariables.PREPAID__APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResponse);	
		}
	
	}
}
