package flow.subflow.ServiceManagement;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.concurrent.TimeUnit;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.hni.model.DNDInfo;
import com.rcom.hni.resource.IVRDBServiceInstance;
import com.servion.triplefive.utils.Constants;
import com.servion.triplefive.utils.PrintStackTrace;
import com.servion.triplefive.utils.SetPushSMS;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-07  02:48:51 PM
 */
public class AccessDB_DNCDeregisterDays extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
	
		ITraceInfo trace = mySession.getTraceOutput();
		
		DNDInfo dndInfo = null;
		boolean DBResponse = false;
		
		SetPushSMS setPushSMS = null;
		String strSMSFrame = "";
		ArrayList<String> arrSMSData = null;
		Hashtable<String, String> smsHashTable = null;
		AppProperties appProperties = null;
		
		try{
			
			setPushSMS = new SetPushSMS();
			arrSMSData = new ArrayList<String>();
			appProperties = (AppProperties) mySession.getProperty(Constants.IvrPropertyInstance);
			
			String MDN = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue();
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Input to DB for DND Info");
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "MDN" + MDN);
			
			dndInfo = new DNDInfo();
			dndInfo.setMdn(MDN);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Before calling DB Serice to get DND Info with MDN : " + MDN);
			dndInfo = IVRDBServiceInstance.getInstance().getDNDInfo((IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN), dndInfo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DND Info DB Response" + dndInfo.toString());
			
			if(dndInfo.getDeactivationDate() != null)
			{
			
			String dndActivationDate = dndInfo.getActivationDate();
			String dndDeActivationDate = dndInfo.getDeactivationDate();
			
			SimpleDateFormat dateFormat = new SimpleDateFormat(Constants.DATE_TIME_FORMAT);
			Calendar calendar = Calendar.getInstance();
			
			Date deactivateionDate = dateFormat.parse(dndDeActivationDate);
			Date currentDate = calendar.getTime();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DND Deactivation Date : " + deactivateionDate);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Current Date : " + currentDate);
			
			long diff = currentDate.getTime() - deactivateionDate.getTime();
			long daydiff = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Day Difference : " + daydiff);
			
			if(daydiff >= 3)
			{
				//Completed 3 days from the date of de-registration
				
				if(dndActivationDate != null && !dndActivationDate.equalsIgnoreCase(Constants.EMPTY_STRING))
				{
					Date activationDate = dateFormat.parse(dndActivationDate);
					
					//If DNC Activation done after DNC Deactivation, then considering DNC has already been registered.
					if(activationDate.compareTo(deactivateionDate)>=1)
					{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNC Activation date returned for this MDN" + activationDate);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNC de registration already done, but DNC activation is done after that");
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_DNCREGISTRATION_DONE).setValue(Constants.Yes);
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_DNCDEREGISTRATION_DONE).setValue(Constants.Yes);
					}
					else
					{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNC deactivation done, but not activated");
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_DNCREGISTRATION_DONE).setValue(Constants.No);
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_DNCDEREGISTRATION_DONE).setValue(Constants.Yes);
					}
				}
				else
				{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNC activation date is not received, hence considering DNC activation is not done, So proceeding to Host");
					mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_DNCDEREGISTRATION_DONE).setValue(Constants.Yes);
				}
			}
			else
			{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Still Not completed 3 days from the date of de-registration, hence call will be disconnected");
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_DNCDEREGISTRATION_DONE).setValue(Constants.No);
			}
			
		}else{
			
			if(dndInfo.getActivationDate() == null){
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNC deactivation is not done and acitvation not activated");
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_DNCREGISTRATION_DONE).setValue(Constants.No);
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_DNCDEREGISTRATION_DONE).setValue(Constants.Yes);
			}
		}
		}catch(Exception e)
		{
			strSMSFrame = appProperties.getIVRProp(Constants.DNC_REGISTRATION_PRE_Failure);
			smsHashTable = setPushSMS.generatePushSMSDataMap(strSMSFrame, arrSMSData);
			mySession.setProperty(Constants.SMSDataMap, smsHashTable);

			PrintStackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
			
		}
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-07  02:48:51 PM
	 */
	public AccessDB_DNCDeregisterDays() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:44 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:44 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:44 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("CallData:repeatTries", "0", true).setDebugId(5916));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(3058)).evaluate(mySession)) {
			actions = new java.util.ArrayList(3);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("CallData:transferReasonCode", "TR_0062", true).setDebugId(5906));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:isLinkDown", "Constants:no", false).setDebugId(6434));
			actions.add(new com.avaya.sce.runtime.Next("ServiceManagement-PushSMS_DNCDeregister_LD", "LinkDown").setDebugId(3059));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ServiceManagement-CheckDeregistrationDays", "Continue").setDebugId(3061));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
