package flow.subflow.Prepaid_Start;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.hni.model.CircleOffersInfo;
import com.rcom.hni.model.MDNOfferInfo;
import com.rcom.hni.resource.IVRDBServiceInstance;
import com.servion.rcom.hni.hostinterface.view.OfferDetails;
import com.servion.rcom.hni.hostinterface.view.ReqVoiceOffers;
import com.servion.rcom.hni.hostinterface.view.ResVoiceOffers;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.triplefive.utils.AppConstant;
import com.servion.triplefive.utils.AppDataMap;
import com.servion.triplefive.utils.PrintStackTrace;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-15  12:23:27 PM
 */
public class HOST_IVR_Voice extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-15  12:23:27 PM
	 */
	public HOST_IVR_Voice() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:54 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:54 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:54 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Prepaid_appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_constant:success", true).setDebugId(12855)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Prepaid_appVariables:VASCount", "0", true).setDebugId(12856));
			actions.add(new com.avaya.sce.runtime.Next("Prepaid_Start-GETIVRVoice", "success").setDebugId(12857));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Prepaid_appVariables:transferCode", "TR_0064", true).setDebugId(12859));
			actions.add(new com.avaya.sce.runtime.Next("Prepaid_Start-LinkDown", "LinkDown").setDebugId(12860));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	/*@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		String mdn = AppConstant.EMPTY_STRING,VoiceInfoKey = AppConstant.EMPTY_STRING;
		String hostResult = AppConstant.ERROR,appName = AppConstant.EMPTY_STRING;
		String language = AppConstant.EMPTY_STRING,offerKey= AppConstant.EMPTY_STRING,circleID = AppConstant.EMPTY_STRING;
		String strVoiceOfferPhrase = AppConstant.EMPTY_STRING,strVoiceOfferDetailPhrase= AppConstant.EMPTY_STRING,strOfferCode = AppConstant.EMPTY_STRING;
		int count = 0;
		ReqVoiceOffers reqVoiceOffers = null;
		ResVoiceOffers resVoiceOffers = null;
		IVRWebService webServiceManager = null;
		IVRDataBean objIVRData = null;
		
		ArrayList<OfferDetails> resPackDetails = null;
		ArrayList<String> offerCodes = null,offerPhrase = null;
		HashMap<String,String>	offerDetailPhrase = null;
		OfferDetails objPackDetails =null; 
		Hashtable<String, List<CircleOffersInfo>> mapCircleOffersInfo = null;
		HashMap<String, String> offerPhraseMap =null;
		List<CircleOffersInfo> listCircleOffersInfo = null;
		CircleOffersInfo objCircleOffersInfo = null;
		
		MDNOfferInfo objMDNOfferInfo =null;
		Hashtable<String, List<MDNOfferInfo>> mapMDNOfferInfo = null;
		try
		{
			objIVRData = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
			
			*//****Offer for You****//*
			*//**Request Processing......**//*
			mdn = mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES, IProjectVariables.PREPAID__APP_VARIABLES_FIELD_ANI).getStringValue();
			appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			circleID = mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES,IProjectVariables.PREPAID__APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			language = mySession.getCurrentLanguage();
			
			offerCodes = new ArrayList<>();
			offerPhrase = new ArrayList<>();
			offerDetailPhrase = new HashMap<String,String>();
			offerPhraseMap= new HashMap<String,String>();
			
			reqVoiceOffers = new ReqVoiceOffers();
			reqVoiceOffers.setMDN(mdn);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer Host Request :: "+reqVoiceOffers.toString());
			
			*//**Response Processing......**//*
			webServiceManager = new IVRWebServiceImpl();
			resVoiceOffers = webServiceManager.executeVoiceOffers(objIVRData,reqVoiceOffers);
			
			if(resVoiceOffers!=null && AppConstant.zero.equalsIgnoreCase(resVoiceOffers.getResponseCode())){
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN Host Response :: "+resVoiceOffers.toString());
				resPackDetails = resVoiceOffers.getOfferDetailsList();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN Package Details :: "+resPackDetails);
				
				if(resPackDetails!=null ){
					for(int i= 0;i<resPackDetails.size();i++){
						objPackDetails = resPackDetails.get(i);
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN OfferCode ::"+i+":"+resPackDetails);
						String campaignName = objPackDetails.getCampaignName(); 
						
						objMDNOfferInfo = new MDNOfferInfo();
						
						objMDNOfferInfo.setAppName(appName);
						objMDNOfferInfo.setCampaignname(campaignName);
						objMDNOfferInfo.setCircleId(circleID);
						objMDNOfferInfo.setLanguage(language);
						objMDNOfferInfo.setOfferType(AppConstant.VOICE_OFFER);
						
						objMDNOfferInfo = IVRDBServiceInstance.getInstance().getMDNSpecificOffers(objIVRData,objMDNOfferInfo);
						if(objMDNOfferInfo!= null){
							strVoiceOfferPhrase = objMDNOfferInfo.getOfferCategoryPhrase();
							strVoiceOfferDetailPhrase = objMDNOfferInfo.getOfferDetailPhrase();
							String offerID =  objMDNOfferInfo.getOfferCode();
							if(strVoiceOfferPhrase!=null && strVoiceOfferDetailPhrase !=null){
								strOfferCode = strOfferCode+offerID+AppConstant.SEPERATOR_COMMA;
								offerPhrase.add(strVoiceOfferPhrase);
								offerDetailPhrase.put(offerID,strVoiceOfferDetailPhrase);
								offerPhraseMap.put(offerID,strVoiceOfferPhrase);
								offerCodes.add(offerID);
							}
						}
						count++;
						if(i==1){
							break;
						}
						
					}
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN Offer Code List:: "+offerCodes);  
				}
				
			}
			
			//TODO: need to added offer gor you code
			
			
			*//***DB Hit to get the Voice Offer details **//*
			VoiceInfoKey = AppConstant.VOICEOFFER_KEY+appName;
			mapCircleOffersInfo = (Hashtable<String, List<CircleOffersInfo>>) AppDataMap.getInstance(appName).getAppData(VoiceInfoKey);
		
			
			offerKey = circleID+AppConstant.SEPERATOR_UNDERSCORE+language+AppConstant.SEPERATOR_UNDERSCORE+AppConstant.Option+1;
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Activate Voice Offer Key :: "+offerKey);
			listCircleOffersInfo = mapCircleOffersInfo.get(offerKey);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "listCircleOffersInfo Object :: "+listCircleOffersInfo);
			
			if(listCircleOffersInfo!= null){
				objCircleOffersInfo = listCircleOffersInfo.get(0);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circle Offers Info Object :: "+objCircleOffersInfo);
				
				if(objCircleOffersInfo!= null){
					strVoiceOfferPhrase= objCircleOffersInfo.getOfferCategoryPhrase();
					strVoiceOfferDetailPhrase = objCircleOffersInfo.getOfferDetailPhrase();
					String offerID = objCircleOffersInfo.getOfferCode();
				
					strOfferCode = strOfferCode+offerID+AppConstant.SEPERATOR_COMMA;
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Category Phrase :: "+strVoiceOfferPhrase);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Detail Phrase :: "+strVoiceOfferDetailPhrase);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Code :: "+strOfferCode);
					
					offerPhrase.add(strVoiceOfferPhrase);
					offerCodes.add(offerID);
					offerDetailPhrase.put(offerID,strVoiceOfferDetailPhrase);
					offerPhraseMap.put(offerID,strVoiceOfferPhrase);
					count++;
				}
				hostResult = AppConstant.Success;
			}
		
		mySession.setProperty(AppConstant.OFFERCODES,strOfferCode);
		mySession.setProperty(AppConstant.OFFER_PHRASE,offerPhrase);
		mySession.setProperty(AppConstant.OFFER_PHRASE_MAP,offerPhraseMap);
		mySession.setProperty(AppConstant.OFFER_DETAILS_PHRASE,offerDetailPhrase);
		mySession.setProperty(AppConstant.OFFER_COUNT,count);
		
		
	}
	catch(Exception e)
	{
		trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Exception in Voice Offer Details Host : " + e);
		PrintStackTrace.PrintException(e);
	}
	finally
	{
		reqVoiceOffers = null;
		resVoiceOffers = null;
		webServiceManager = null;
		mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES, IProjectVariables.PREPAID__APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResult);
	}
		
	
	}
*/	
	
	
	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		String mdn = AppConstant.EMPTY_STRING,VoiceInfoKey = AppConstant.EMPTY_STRING;
		String hostResult = AppConstant.ERROR,appName = AppConstant.EMPTY_STRING;
		String language = AppConstant.EMPTY_STRING,offerKey= AppConstant.EMPTY_STRING,circleID = AppConstant.EMPTY_STRING;
		String strVoiceOfferPhrase = AppConstant.EMPTY_STRING,strVoiceOfferDetailPhrase= AppConstant.EMPTY_STRING,strOfferCode = AppConstant.EMPTY_STRING;
		int count = 0;
		ReqVoiceOffers reqVoiceOffers = null;
		ResVoiceOffers resVoiceOffers = null;
		IVRWebService webServiceManager = null;
		IVRDataBean objIVRData = null;
		
		ArrayList<OfferDetails> resPackDetails = null;
		ArrayList<String> offerCodes = null,offerPhrase = null;
		HashMap<String,String>	offerDetailPhrase = null;
		OfferDetails objPackDetails =null; 
		Hashtable<String, List<CircleOffersInfo>> mapCircleOffersInfo = null;
		HashMap<String, String> offerPhraseMap =null;
		List<CircleOffersInfo> listCircleOffersInfo = null;
		CircleOffersInfo objCircleOffersInfo = null;
		
		MDNOfferInfo objMDNOfferInfo =null;
		Hashtable<String, List<MDNOfferInfo>> mapMDNOfferInfo = null;
		try
		{
			objIVRData = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
			
			/****Offer for You****/
			/**Request Processing......**/
			mdn = mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES, IProjectVariables.PREPAID__APP_VARIABLES_FIELD_ANI).getStringValue();
			appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			circleID = mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES,IProjectVariables.PREPAID__APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			language = mySession.getCurrentLanguage();
			
			offerCodes = new ArrayList<>();
			offerPhrase = new ArrayList<>();
			offerDetailPhrase = new HashMap<String,String>();
			offerPhraseMap= new HashMap<String,String>();
			
			reqVoiceOffers = new ReqVoiceOffers();
			reqVoiceOffers.setMDN(mdn);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer Host Request :: "+reqVoiceOffers.toString());
			
			/**Response Processing......**/
			webServiceManager = new IVRWebServiceImpl();
			resVoiceOffers = webServiceManager.executeVoiceOffers(objIVRData,reqVoiceOffers);
			
			if(resVoiceOffers!=null && AppConstant.zero.equalsIgnoreCase(resVoiceOffers.getResponseCode())){
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN Host Response :: "+resVoiceOffers.toString());
				resPackDetails = resVoiceOffers.getOfferDetailsList();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN Package Details :: "+resPackDetails);
				
				if(resPackDetails!=null ){
					for(int i= 0;i<resPackDetails.size();i++){
						objPackDetails = resPackDetails.get(i);
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN OfferCode ::"+i+":"+resPackDetails);
						String campaignName = objPackDetails.getCampaignName(); 
						
						objMDNOfferInfo = new MDNOfferInfo();
						
						objMDNOfferInfo.setAppName(appName);
						objMDNOfferInfo.setCampaignname(campaignName);
						objMDNOfferInfo.setCircleId(circleID);
						objMDNOfferInfo.setLanguage(language);
						objMDNOfferInfo.setOfferType(AppConstant.VOICE_OFFER);
						
						objMDNOfferInfo = IVRDBServiceInstance.getInstance().getMDNSpecificOffers(objIVRData,objMDNOfferInfo);
						if(objMDNOfferInfo!= null){
							strVoiceOfferPhrase = objMDNOfferInfo.getOfferCategoryPhrase();
							strVoiceOfferDetailPhrase = objMDNOfferInfo.getOfferDetailPhrase();
							String offerID =  objMDNOfferInfo.getOfferCode();
							if(strVoiceOfferPhrase!=null && strVoiceOfferDetailPhrase !=null){
								strOfferCode = strOfferCode+offerID+AppConstant.SEPERATOR_COMMA;
								offerPhrase.add(strVoiceOfferPhrase);
								offerDetailPhrase.put(offerID,strVoiceOfferDetailPhrase);
								offerPhraseMap.put(offerID,strVoiceOfferPhrase);
								offerCodes.add(offerID);
							}
						}
						count++;
						if(i==1){
							break;
						}
						
					}
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN Offer Code List:: "+offerCodes);  
				}
				
			}
			
			//TODO: need to added offer gor you code
			
			
			/***DB Hit to get the Voice Offer details **/
			VoiceInfoKey = AppConstant.VOICEOFFER_KEY+appName;
			mapCircleOffersInfo = (Hashtable<String, List<CircleOffersInfo>>) AppDataMap.getInstance(appName).getAppData(VoiceInfoKey);
		
			
			offerKey = circleID+AppConstant.SEPERATOR_UNDERSCORE+language+AppConstant.SEPERATOR_UNDERSCORE+AppConstant.Option+1;
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Activate Voice Offer Key :: "+offerKey);
			listCircleOffersInfo = mapCircleOffersInfo.get(offerKey);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "listCircleOffersInfo Object :: "+listCircleOffersInfo);
			
			if(listCircleOffersInfo!= null){
				objCircleOffersInfo = listCircleOffersInfo.get(0);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circle Offers Info Object :: "+objCircleOffersInfo);
				
				if(objCircleOffersInfo!= null){
					strVoiceOfferPhrase= objCircleOffersInfo.getOfferCategoryPhrase();
					strVoiceOfferDetailPhrase = objCircleOffersInfo.getOfferDetailPhrase();
					String offerID = objCircleOffersInfo.getOfferCode();
				
					strOfferCode = strOfferCode+offerID+AppConstant.SEPERATOR_COMMA;
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Category Phrase :: "+strVoiceOfferPhrase);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Detail Phrase :: "+strVoiceOfferDetailPhrase);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Code :: "+strOfferCode);
					
					offerPhrase.add(strVoiceOfferPhrase);
					offerCodes.add(offerID);
					offerDetailPhrase.put(offerID,strVoiceOfferDetailPhrase);
					offerPhraseMap.put(offerID,strVoiceOfferPhrase);
					count++;
				}
				hostResult = AppConstant.Success;
			}
		
		mySession.setProperty(AppConstant.OFFERCODES,strOfferCode);
		mySession.setProperty(AppConstant.OFFER_PHRASE,offerPhrase);
		mySession.setProperty(AppConstant.OFFER_PHRASE_MAP,offerPhraseMap);
		mySession.setProperty(AppConstant.OFFER_DETAILS_PHRASE,offerDetailPhrase);
		mySession.setProperty(AppConstant.OFFER_COUNT,count);
		
		
	}
	catch(Exception e)
	{
		trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Exception in Voice Offer Details Host : " + e);
		PrintStackTrace.PrintException(e);
	}
	finally
	{
		reqVoiceOffers = null;
		resVoiceOffers = null;
		webServiceManager = null;
		mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES, IProjectVariables.PREPAID__APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResult);
	}
		
	
	}

}
