package flow;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import org.apache.log4j.Logger;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.IVRRoutingInfo;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.StackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-26  11:39:20 AM
 */
public class Capture_ANI_DNIS_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-26  11:39:20 AM
	 */
	public Capture_ANI_DNIS_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:37 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:37 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:37 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Application Version :", "Application_Version").setDebugId(9353));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(6929)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ANI_UnavailableAnnc", "LoadError").setDebugId(6931));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:IsBothAniAndDnisAvailable", com.avaya.sce.runtime.Expression.IS_FALSE).setDebugId(6924)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("ANI_UnavailableAnnc", "(ANI/DNIS unavaiable)").setDebugId(6925));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("DB_RoutingTable_BC", "Default").setDebugId(27));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		
		/** Declaration **/
		ITraceInfo trace = null;Logger logger = null;IVRRoutingInfo ivrRoutingInfo = null;
		GetReportObject getReportObject = null;IVRDataBean ivrDataBean = null;
		IVRREPORTDATA ivrreportdata = null;SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		InetAddress ip = null;
		String HUB = "NA";
		
		CALLINFO callInfo  = null;String ANI = null,DNIS =null,Default_Language = null,Default_property_Location = null,callBackDNIS = null,appName=null,sessionId=null;AppProperties ivrProperties = null;
		try
		{
		
		
		trace = mySession.getTraceOutput();
		logger = Logger.getLogger("Dialog.Designer.TraceWriter.RCOM_CF_RDTV_IVR");
		sessionId = mySession.getSessionId();
		ANI = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		DNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SESSION ID : " +sessionId);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "ANI : " +ANI);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNIS : " +DNIS);
	
		ivrProperties = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES);
		
		
		appName = ivrProperties.getIVRProp(AppConstants.APP_NAME);
		//Changes Done
		String registeredNumber = ivrProperties.getIVRProp(AppConstants.REGISTERED_NUMBER);
		
		HUB = ivrProperties.getIVRProp(AppConstants.HUB);
		
		if(HUB == null || HUB.length() <= 0) HUB = "NA";
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "HUB : " +sessionId);
		
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_HUB).setValue(HUB);
		
		if(!registeredNumber.equalsIgnoreCase(AppConstants.EMPTY_STRING)&&!registeredNumber.equalsIgnoreCase(null)&&!registeredNumber.equalsIgnoreCase(AppConstants.N))
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).setValue(registeredNumber);
		}
		else{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).setValue(ANI);
		}
		
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DNIS).setValue(DNIS);
		mySession.getVariableField(IProjectVariables.APP__NAME).setValue(appName);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "APP_NAME :: " +appName);
		
		/** Creating IVRDATABEAN **/
		ivrDataBean = new IVRDataBean();
		ivrDataBean.setLogger(logger);
		ivrDataBean.setSessionID(mySession.getSessionId());
		getReportObject = new GetReportObject();
		ivrreportdata = getReportObject.createIVRReportObject();
		mySession.setProperty(AppConstants.BEANREPORTDATA, getReportObject);
		getReportObject.setIvrreportdata(ivrreportdata);
		ivrDataBean.setGetReportObject(getReportObject);
		mySession.setProperty(AppConstants.IVRDATABEAN, ivrDataBean);
		
		/**Assigning call info data for report*/
		ip= InetAddress.getLocalHost();
		callInfo  = ivrreportdata.getCALLINFO();
		callInfo.setUNIQUECALLID(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue());
		callInfo.setSESSIONID(mySession.getSessionId());
		callInfo.setVXMLIP(String.valueOf(ip));
		callInfo.setSTARTDATETIME(dateFormat.format(new Date()));
		callInfo.setAPPNAME(appName);
		callInfo.setCALLERTYPE(AppConstants.NA);
		callInfo.setCATEGORY(AppConstants.NA);
		callInfo.setCIRCLEID(AppConstants.NA);
		callInfo.setCLI(ANI);
		callInfo.setDNIS(DNIS);
		callInfo.setDNISTYPE(AppConstants.NA);
		callInfo.setHUB(HUB);
		callInfo.setAGENTID(AppConstants.NA);
		callInfo.setAGENTEXTN(AppConstants.NA);
		callInfo.setTRANSCODE(AppConstants.NA);
		callInfo.setTRANSFERVDN(AppConstants.NA);
		callInfo.setUUIDATA(AppConstants.NA);
		callInfo.setABANDONEDFLAG(AppConstants.NA);
		callInfo.setTRANSTOIVR(AppConstants.NA);
		callInfo.setSKILLNAME(AppConstants.NA);
		callInfo.setLANGCODE(AppConstants.NA);
		callInfo.setENDDATETIME(AppConstants.NA);
		callInfo.setDTMFPATH(AppConstants.NA);
		callInfo.setMENUPATH(AppConstants.NA);
		callInfo.setCALLERPATH(AppConstants.NA);
		callInfo.setLASTMENUACCESSED("NA");
		callInfo.setDISPOSITION("ID");
		callInfo.setCALLENDREASON("IVR_DISCONNECT");
		callInfo.setHOWCALLENDED("DISCONNECT");
		callInfo.setERRREASON(AppConstants.NA);
		callInfo.setLASTNODEACCESSED(AppConstants.NA);
		callInfo.setLANGUAGEFROM(AppConstants.NA);
		callInfo.setLANGUAGETO(AppConstants.NA);
		callInfo.setTAGGING(AppConstants.NA);
		callInfo.setTRANSCODE(AppConstants.NA);
		callInfo.setTRANSFERVDN(AppConstants.NA);
		ivrreportdata.setCALLINFO(callInfo);
		
		ivrDataBean.setGetReportObject(getReportObject);
		
		/** Loading Default Language Property Location **/
		Default_Language = ivrProperties.getIVRProp(AppConstants.Default_Language);
		Default_property_Location = ivrProperties.getIVRProp(AppConstants.PROPERTY+appName+AppConstants.SEPERATOR_UNDERSCORE+Default_Language);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " Default_property_Location : " +Default_property_Location);
		mySession.setCurrentLanguage(Default_Language);
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(Default_property_Location);
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_GLOBAL_PROPERTY_FILE_NAME).setValue(mySession.getVariableField(IProjectVariables.PROPERTY_FILE_NAME, IProjectVariables.PROPERTY_FILE_NAME_FIELD_GLOBAL).getStringValue());
		
		mySession.getVariableField(IProjectVariables.BARRING_VARIABLES, IProjectVariables.BARRING_VARIABLES_FIELD_DBAR).setValue(ivrProperties.getIVRProp(AppConstants.DBARRED));
		mySession.getVariableField(IProjectVariables.BARRING_VARIABLES, IProjectVariables.BARRING_VARIABLES_FIELD_WBAR).setValue(ivrProperties.getIVRProp(AppConstants.WBARRED));
		mySession.getVariableField(IProjectVariables.BARRING_VARIABLES, IProjectVariables.BARRING_VARIABLES_FIELD_MBAR).setValue(ivrProperties.getIVRProp(AppConstants.MBARRED));
	
		boolean isBothAniAndDnisAvailable = false;
		
		if(ANI != null && DNIS != null && !ANI.equalsIgnoreCase(AppConstants.EMPTY) && !DNIS.equalsIgnoreCase(AppConstants.EMPTY))
		{	
			
			isBothAniAndDnisAvailable = true;
		}
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " isBothAniAndDnisAvailable :: "+isBothAniAndDnisAvailable);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_BOTH_ANI_AND_DNIS_AVAILABLE).setValue(isBothAniAndDnisAvailable);
		
		
		/** Call Back Transfer VDN Check **/
		callBackDNIS = ivrProperties.getIVRProp(AppConstants.CALL_BACK_REGISTRATION_DNIS);
		if(callBackDNIS != null && !callBackDNIS.equalsIgnoreCase(AppConstants.EMPTY))
		{
			String[] listDnis = callBackDNIS.split(AppConstants.SEPERATOR_PIPE);
			
			for(String strDnis : listDnis)
			{
				if(strDnis.equalsIgnoreCase(DNIS))
				{	trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, strDnis);
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_CALL_BACK_DNIS).setValue(AppConstants.Yes);
					break;
				}
			}
			
		}
		
		/** Loading the Block Buster Movies Daily on 1 AM **/
		
		}
		catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
			StackTrace.PrintException(e);}
			finally
			{trace=null;ivrRoutingInfo=null;getReportObject=null;callBackDNIS=null;ivrreportdata=null;dateFormat=null;callInfo=null;logger=null;ivrDataBean=null;ANI=null;DNIS=null;ivrProperties=null;Default_Language=null;Default_property_Location=null;}
		}
	
	public static void main(String[] args) {
		Timer timer = new Timer();
		System.out.println("Waiting " +Calendar.getInstance().getTime());
		TimerTask tt = new TimerTask(){
			public void run(){
				System.out.println(Calendar.getInstance().getTime());
				Calendar cal = Calendar.getInstance(); //this is the method you should use, not the Date(), because it is desperated.
 
				int hour = cal.get(Calendar.HOUR_OF_DAY);//get the hour number of the day, from 0 to 23
				//System.out.println("Hour :: "+ hour);
				if(hour >= 13){
					System.out.println("doing the scheduled task");
				}
			}
		};
		timer.schedule(tt, 1000*5, 1000*60);//	delay the task 1 second, and then run task every five seconds
	}
}

