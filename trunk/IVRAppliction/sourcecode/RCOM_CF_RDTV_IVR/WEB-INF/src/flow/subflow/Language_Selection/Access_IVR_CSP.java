package flow.subflow.Language_Selection;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.UpdateLanguage;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.AppDataMap;
import com.rcom.rdtv.util.StackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-15  09:00:24 PM
 */
public class Access_IVR_CSP extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-15  09:00:24 PM
	 */
	public Access_IVR_CSP() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:57 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:57 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:57 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(151)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0005", false).setDebugId(153));
			actions.add(new com.avaya.sce.runtime.Next("Language_Selection-linkdown", "linkdown").setDebugId(152));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Language_Selection-CheckBackDNIS", "next").setDebugId(381));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		/** Declaration **/
		String callerANI = AppConstants.EMPTY_STRING,preferedLang = AppConstants.EMPTY_STRING,propetyKey= AppConstants.EMPTY_STRING;
		String key = AppConstants.EMPTY_STRING,appName= AppConstants.EMPTY_STRING,propertiesLocation = AppConstants.EMPTY_STRING,selectedLanguageCode=null,ivrLanguageCode=null;
		IVRDataBean ivrDataBean = null;
		//IVRCspInfo objIVRCspInfo = null;
		UpdateLanguage updateLanguage = null;
		ITraceInfo trace =null;
		GetReportObject objGetReportObject = null;
		IVRREPORTDATA objIVRREPORTDATA= null;
		CALLINFO objCALLINFO = null;
		
		/**Assign**/
		trace = mySession.getTraceOutput();
		callerANI = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
		ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstants.IVRDATABEAN);
		appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
		updateLanguage = new UpdateLanguage();
		updateLanguage.setMdn(callerANI);
		updateLanguage.setSmartCardNumber(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_SCNUMBER).getStringValue());
		selectedLanguageCode=mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_PREFFERED_LANG).getStringValue();
		
		/** Language Code Change Happening here **/
		if(selectedLanguageCode.length()!=AppConstants.Three)
		{
		trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Preffered Language Code From External DB :: "+ selectedLanguageCode);
		preferedLang = (String) AppDataMap.getInstance(AppConstants.RDTV_9001_EXTERNAL).getAppData(AppConstants.LANG_+selectedLanguageCode);
		}
		else
			preferedLang = selectedLanguageCode;
		trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Preffered Language From External DB :: "+ preferedLang);
		ivrLanguageCode = (String) AppDataMap.getInstance(AppConstants.RDTV_9001).getAppData(preferedLang);
		updateLanguage.setLanguageFrom(ivrLanguageCode);
		updateLanguage.setLanguageTo(AppConstants.NA);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " UpdateLanguage Host Request :: "+updateLanguage.toString());
		
		try{
			objGetReportObject = ivrDataBean.getGetReportObject(); 
			objIVRREPORTDATA = objGetReportObject.getIvrreportdata();
			objCALLINFO = objIVRREPORTDATA.getCALLINFO();
			
			/**DB Hit to Update(or)Add Preferred Language **/
			updateLanguage=IVRDBServiceInstance.getIVRDBInstance().getUpdateLanguage(ivrDataBean, updateLanguage);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " UpdateLanguage Host Response :: "+updateLanguage.toString());
			
			if(updateLanguage != null && updateLanguage.getFlag().equalsIgnoreCase(AppConstants.Success)&&updateLanguage.getErrorCode().equalsIgnoreCase(AppConstants.zero))
			{
				/***Preferred Language**/
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"preferred Lang :"+preferedLang);
				
				if(preferedLang!=null && !AppConstants.EMPTY_STRING.equals(preferedLang) && !AppConstants.NA.equalsIgnoreCase(preferedLang))
				{
					mySession.setCurrentLanguage(preferedLang);
					propetyKey = AppConstants.PROPERTY+appName+AppConstants.SEPERATOR_UNDERSCORE+preferedLang;
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"property Key :"+propetyKey);
					propertiesLocation = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(propetyKey);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location :"+propertiesLocation);
					
					if(propertiesLocation!=null && !AppConstants.N.equalsIgnoreCase(propertiesLocation))
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertiesLocation);
					else
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
					
					//mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_PREFFERED_LANG).setValue(preferedLang);
					//mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_IS_PREFFERED_LANG_CHOOSEN).setValue(AppConstants.Yes);
					objCALLINFO.setLANGCODE(preferedLang);
				}
				else
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"** Flow Continues in Circle Default Language **");
					
				}
			else
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
			}
			catch (Exception e) {
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
				StackTrace.PrintException(e);
			}
		finally
		{ivrDataBean=null;updateLanguage=null;objGetReportObject = null;ivrLanguageCode=null;objIVRREPORTDATA=null;objCALLINFO = null;trace=null;callerANI = null;preferedLang = null;propetyKey= null;key = null;appName= null;propertiesLocation = null;selectedLanguageCode=null;}
	}
	
	public static void main(String[] args) {
		String HIN = "HIN";
		System.out.println(HIN.length());
	}
}

