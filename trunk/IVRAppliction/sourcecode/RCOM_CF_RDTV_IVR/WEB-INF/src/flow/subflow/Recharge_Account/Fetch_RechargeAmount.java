package flow.subflow.Recharge_Account;

import java.util.ArrayList;
import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.dthdun.models.FetchRechargeAmount;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.DynamicMenu;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-26  04:38:33 PM
 */
public class Fetch_RechargeAmount extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-26  04:38:33 PM
	 */
	public Fetch_RechargeAmount() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:53 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:53 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:53 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(642)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0011", false).setDebugId(643));
			actions.add(new com.avaya.sce.runtime.Next("Recharge_Account-link_down", "linkdown").setDebugId(644));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "RechargeMN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "dmGrammarValues:CashCard", true).setDebugId(612)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:ForPurchase", "CONSTANTS:NO", false).setDebugId(632));
				actions.add(new com.avaya.sce.runtime.Next("Recharge_Account-Cash_RechargeAmountAnnc", "cash-card").setDebugId(613));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0056", false).setDebugId(656));
				actions.add(new com.avaya.sce.runtime.Next("Recharge_Account-Credit_RechargeAmountAnnc", "credit-card").setDebugId(615));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		
		String rechargeAmount,appName,announceID,initialPrompt,key = null;
		List<String> dynamicList = new ArrayList<>();
		FetchRechargeAmount fetchRechargeAmount = null;
		try
		{
			if(AppConstants.Success.equalsIgnoreCase(mySession.getVariableField(IProjectVariables.RECHARGE_MN, IProjectVariables.RECHARGE_MN_FIELD_RETURN_CODE).getStringValue()))
			{
				/** Formating the Request **/
				fetchRechargeAmount = new FetchRechargeAmount();
				fetchRechargeAmount.setCafNo(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CAFNUMBER).getStringValue());
				fetchRechargeAmount.setScnNo(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_SCNUMBER).getStringValue());
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Fetch Recharge Amount Host Request :: "+fetchRechargeAmount.toString());
				
				/** Getting Response By Host Processing **/				
				fetchRechargeAmount = IVRDBServiceInstance.getDthdunDataService().getNextRechargeAmount((IVRDataBean) mySession.getProperty(AppConstants.IVRDATABEAN), fetchRechargeAmount);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Fetch Recharge Amount Host Response :: "+fetchRechargeAmount.toString());
				
				if(fetchRechargeAmount != null && fetchRechargeAmount.getRechargeAmount() != null && !fetchRechargeAmount.getRechargeAmount().equalsIgnoreCase(AppConstants.EMPTY_STRING))
				{
				
				if(AppConstants.CashCard.equalsIgnoreCase(mySession.getVariableField(IProjectVariables.RECHARGE_MN, IProjectVariables.RECHARGE_MN_FIELD_VALUE).getStringValue()))
					announceID = AppConstants.RD01_PA_0026;
				else
					announceID = AppConstants.RD01_PA_0027;
				
				/** Forming the Dynamic Prompt **/
				appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
				rechargeAmount = fetchRechargeAmount.getRechargeAmount();
				key = appName+AppConstants.SEPERATOR_HYPEN+announceID;
				initialPrompt = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(key);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Prompt Key "+announceID+" :: "+key);
				dynamicList.add(rechargeAmount+AppConstants.currency);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DENOMINATION).setValue(rechargeAmount);
				
				/** Invoking the playPromt method **/
				initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, AppConstants.NA, announceID, trace);
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Initial Prompt "+announceID+" :: "+initialPrompt);
				}
				else
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
			}
			
		}catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
		StackTrace.PrintException(e);
		}
		finally
		{initialPrompt = null;rechargeAmount = null;appName=null;key=null;dynamicList=null;fetchRechargeAmount=null;}
		
	}
}
