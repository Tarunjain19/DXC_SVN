package flow.subflow.Base_Pack;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.BasePacks;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.AppDataMap;
import com.rcom.rdtv.util.DynamicMenu;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.AppProperties;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-28  04:24:19 PM
 */
public class Check_BasePackMN extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-28  04:24:19 PM
	 */
	public Check_BasePackMN() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:05 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:05 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:05 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Global_Counter:Max_NoMatch", "BasePack_MN:NomatchRemaining", false).setDebugId(901));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(657)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:NonSouthFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(680)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0051", false).setDebugId(659));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0050", false).setDebugId(683));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Base_Pack-link_down", "linkdown").setDebugId(658));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "BasePack_Menu ReturnCode :: ", "BasePack_MN:ReturnCode").setDebugId(144));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "BasePack_MN:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:SUCCESS", true).setDebugId(145)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "BasePack_Menu Value :: ", "BasePack_MN:Value").setDebugId(146));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "BasePack_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "dmGrammarValues:previous", true).setDebugId(661)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Base_Pack-previous", "previous").setDebugId(662));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "BasePack_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "dmGrammarValues:MainMenu", true).setDebugId(663)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Base_Pack-mainmenu", "mainmenu").setDebugId(664));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "BasePack_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "dmGrammarValues:agent", true).setDebugId(665)).evaluate(mySession)) {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0045", false).setDebugId(669));
					actions.add(new com.avaya.sce.runtime.Next("Base_Pack-transfer", "agent").setDebugId(666));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Base_Pack-PackMN", "success").setDebugId(147));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Base_Pack-tries_exceed", "tries-exceed").setDebugId(149));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = null;
		String packOptionId = null,appName=null,circleID=null,langId=null,key=null,initialPrompt = null,dynamicWaves = null,menuID=null,menuOption = AppConstants.EMPTY_STRING;
		Hashtable<String, Hashtable<String, Hashtable<String, Hashtable<String, BasePacks>>>> basePackList = null;
		Hashtable<String, Hashtable<String, Hashtable<String, BasePacks>>> circlePackInfo = null;
		Hashtable<String, Hashtable<String, BasePacks>> langPackInfo = null;
		Hashtable<String, BasePacks> basePackInfo = null;
		List<String> arrPacks=null;Set<String> basePaseKey = null;
		try
		{
			if(AppConstants.Success.equalsIgnoreCase(mySession.getVariableField(IProjectVariables.BASE_PACK__MN, IProjectVariables.BASE_PACK__MN_FIELD_RETURN_CODE).getStringValue()))
			{
				trace = mySession.getTraceOutput();
				packOptionId = mySession.getVariableField(IProjectVariables.BASE_PACK__MN, IProjectVariables.BASE_PACK__MN_FIELD_VALUE).getStringValue();
				if(!packOptionId.equalsIgnoreCase(AppConstants.Previous)&&!packOptionId.equalsIgnoreCase(AppConstants.MainMenu)&&!packOptionId.equalsIgnoreCase(AppConstants.Agent))
				{
					appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
					circleID = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
					/** Checking South/NonSouth Circle **/
					if(AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(AppConstants.SOUTH_CIRCLE).contains(circleID))menuID = AppConstants.RD01_MN_0045;
					else {menuID = AppConstants.RD01_MN_0043;mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NON_SOUTH_FLAG).setValue(AppConstants.Yes);}
					langId = mySession.getCurrentLanguage();
					
					/** Formating the Request **/
					key = AppConstants.BASEPACKS_KEY+appName;
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " BasePack Key :: "+key);
					basePackList = (Hashtable<String, Hashtable<String, Hashtable<String, Hashtable<String, BasePacks>>>>) AppDataMap.getInstance(appName).getAppData(key);
					
					if(basePackList != null)
					{
						circlePackInfo = basePackList.get(circleID);
						langPackInfo = circlePackInfo.get(langId);
						basePackInfo = langPackInfo.get(packOptionId);
						basePaseKey = basePackInfo.keySet();

						arrPacks = new ArrayList<>();
						for (String basePack : basePaseKey) {
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " BasePackCategory From DB :: "+basePack+" :: "+basePackInfo.get(basePack).toString());
							arrPacks.add(basePackInfo.get(basePack).getSubPackInfoPhrase());
							menuOption = menuOption+basePackInfo.get(basePack).getPackID()+AppConstants.SEPERATOR_COMMA;
							}
						
						/** Form Initial Prompt**/
						String count = String.valueOf(arrPacks.size());
						dynamicWaves = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(appName+AppConstants.SEPERATOR_HYPEN+menuID);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " DynamicWaves from Property for "+menuID+" :: "+dynamicWaves);
						initialPrompt = DynamicMenu.playPrompt(arrPacks, dynamicWaves, count, menuID, trace);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Menu Option : "+menuOption);
						
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MORE_OPTION_COUNT).setValue(count);
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MENU_OPTION).setValue(menuOption);
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MENU_ID).setValue(menuID);
					}
					else
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
				}
			}
		}catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
		StackTrace.PrintException(e);
		}
		finally
		{trace=null;arrPacks=null;basePackList=null;circlePackInfo=null;menuID=null;langPackInfo=null;basePackInfo=null;basePaseKey=null;packOptionId = null;appName=null;circleID=null;langId=null;key=null;initialPrompt = null;dynamicWaves = null;menuOption = null;		}
	}
	
}
