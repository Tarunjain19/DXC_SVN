package flow.subflow.Cancel_A_Pack;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Hashtable;
import java.util.Set;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.CancelPackInfo;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.DynamicMenu;
import com.rcom.rdtv.util.SayItSmartTime;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-27  07:02:29 PM
 */
public class Check_CancelPackMenu extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-27  07:02:29 PM
	 */
	public Check_CancelPackMenu() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:04 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:04 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:04 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Global_Counter:Max_NoMatch", "CancelPack_MN:NomatchRemaining", false).setDebugId(1800));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "CancelPack_Menu ReturnCode :: ", "CancelPack_MN:ReturnCode").setDebugId(1429));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "CancelPack_MN:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:SUCCESS", true).setDebugId(1430)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "CancelPack_Menu Value :: ", "CancelPack_MN:Value").setDebugId(1431));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "CancelPack_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "dmGrammarValues:agent", true).setDebugId(1778)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0045", false).setDebugId(1791));
				actions.add(new com.avaya.sce.runtime.Next("Cancel_A_Pack-transfer", "agent").setDebugId(1779));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "CancelPack_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "dmGrammarValues:previous", true).setDebugId(1780)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Cancel_A_Pack-previous", "previous").setDebugId(1781));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "CancelPack_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "dmGrammarValues:MainMenu", true).setDebugId(1782)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Cancel_A_Pack-main_menu", "mainmenu").setDebugId(1783));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "AppVariables:IsWithinLockingPeriod", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(1795)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Cancel_A_Pack-CannotCancelled_Annc", "lockingPeriod").setDebugId(1432));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Cancel_A_Pack-CancelConfirm_MN", "next").setDebugId(1797));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}

			}


		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Cancel_A_Pack-tries_exceed", "tries-exceed").setDebugId(1434));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = null;
		String key=null,appName = null,circleID = null,langId = null,menuOption = AppConstants.EMPTY_STRING,initialPrompt = null,datePeriod=null,menuID = null,dynamicWaves = null,packId = null,returnValue=null;;
	/*	Hashtable<String, Hashtable<String, Hashtable<String, CancelPackInfo>>> packInfoMessage = null;
		Hashtable<String, Hashtable<String, CancelPackInfo>> circlePackInfo = null;
		Hashtable<String, CancelPackInfo> langPackInfo = null;*/SimpleDateFormat sdFormat=null,sdFormat2=null;
		ArrayList<String> arrPacks=null;Date date=null;
		Set<String> cancelPackKeySet = null;Hashtable<String,String> lockingPeriod = null;CancelPackInfo cancelPackInfo;
		
		try
		{
			if(mySession.getVariableField(IProjectVariables.CANCEL_PACK__MN, IProjectVariables.CANCEL_PACK__MN_FIELD_RETURN_CODE).getStringValue().equalsIgnoreCase(AppConstants.Success))
			{
				returnValue = mySession.getVariableField(IProjectVariables.CANCEL_PACK__MN, IProjectVariables.CANCEL_CONFIRM__MN_FIELD_VALUE).getStringValue();
				if(!returnValue.equalsIgnoreCase(AppConstants.Agent)&&!returnValue.equalsIgnoreCase(AppConstants.Previous)&&!returnValue.equalsIgnoreCase(AppConstants.MainMenu))
				{
					trace = mySession.getTraceOutput();
					appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
					arrPacks = new ArrayList<>();
					lockingPeriod = (Hashtable<String, String>) mySession.getProperty(AppConstants.LOCKING_PERIOD);
					datePeriod = lockingPeriod.get(returnValue);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " Locking Period for selected Pack :: "+datePeriod);
					/** Locking Peroid Check **/
					if(SayItSmartTime.checkLockingPeriod(datePeriod)==AppConstants.One)
					{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** With In Locking Period **");
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_WITHIN_LOCKING_PERIOD).setValue(AppConstants.Yes);
						
						sdFormat2 = new SimpleDateFormat("dd-MMM-yy");
						sdFormat = new SimpleDateFormat("yyyyMMdd");
						date = sdFormat2.parse(datePeriod);
						arrPacks.add(sdFormat.format(date));
						/** Forming Dynamic Announcement **/
						dynamicWaves = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(appName+AppConstants.SEPERATOR_HYPEN+AppConstants.RD01_PA_0071);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " DynamicWaves from Property for "+AppConstants.RD01_PA_0071+" :: "+dynamicWaves);
						initialPrompt = DynamicMenu.playPrompt(arrPacks, dynamicWaves, AppConstants.NA, AppConstants.RD01_PA_0071, trace);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
						
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
					}
					else
					{
					appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
					circleID = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
					langId = mySession.getCurrentLanguage();
					
					/*key = AppConstants.CANCELPACKS_KEY+appName;
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " CancelPackInfoKey :: "+key);
					packInfoMessage = (Hashtable<String, Hashtable<String, Hashtable<String, CancelPackInfo>>>) AppDataMap.getInstance(appName).getAppData(key);
					if(packInfoMessage != null)
					{
						circlePackInfo = packInfoMessage.get(circleID);
						langPackInfo = circlePackInfo.get(langId);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " CancelPackInfo From DB :: "+returnValue+" :: "+langPackInfo.get(returnValue).toString());
						arrPacks.add(langPackInfo.get(returnValue).getPackPhrase());
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CANCEL_PACK_NAME).setValue(langPackInfo.get(returnValue).getPackPhrase());
						
						dynamicWaves = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(appName+AppConstants.SEPERATOR_HYPEN+AppConstants.RD01_MN_0052);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " DynamicWaves from Property for "+AppConstants.RD01_MN_0052+" :: "+dynamicWaves);
						initialPrompt = DynamicMenu.playPrompt(arrPacks, dynamicWaves, AppConstants.NA, AppConstants.RD01_MN_0052, trace);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
						
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
					}
					else
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
					*/
					
					/** Changes Done Here **/
					cancelPackInfo = new CancelPackInfo();
					cancelPackInfo.setOfferCode(returnValue);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "CancelPackInfo Request :: "+cancelPackInfo.toString());
					cancelPackInfo = IVRDBServiceInstance.getIVRDBInstance().queryCancelPackInfo((IVRDataBean) mySession.getProperty(AppConstants.IVRDATABEAN), cancelPackInfo);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "CancelPackInfo Response :: "+cancelPackInfo.toString());
					
					if(cancelPackInfo.getStatusFlag().equalsIgnoreCase(AppConstants.Success) && cancelPackInfo.getErrorCode().equalsIgnoreCase(AppConstants.zero))
					{
					arrPacks.add(cancelPackInfo.getPhraseId());
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CANCEL_PACK_NAME).setValue(cancelPackInfo.getPhraseId());
					
					dynamicWaves = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(appName+AppConstants.SEPERATOR_HYPEN+AppConstants.RD01_MN_0052);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " DynamicWaves from Property for "+AppConstants.RD01_MN_0052+" :: "+dynamicWaves);
					initialPrompt = DynamicMenu.playPrompt(arrPacks, dynamicWaves, AppConstants.NA, AppConstants.RD01_MN_0052, trace);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
					
					mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
					}
					else
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
					
					}
				}
			}
			
			
		}catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
		StackTrace.PrintException(e);
		}
		finally
		{trace=null;/*packInfoMessage=null;circlePackInfo=null;langPackInfo=null;*/cancelPackInfo = null;arrPacks=null;lockingPeriod=null;datePeriod=null;cancelPackKeySet=null;key=null;appName = null;circleID = null;returnValue=null;langId = null;menuOption = null;initialPrompt = null;menuID = null;dynamicWaves = null;}
	}
}
