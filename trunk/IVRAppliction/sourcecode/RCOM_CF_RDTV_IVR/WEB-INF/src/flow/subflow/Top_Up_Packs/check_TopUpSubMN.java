package flow.subflow.Top_Up_Packs;

import java.util.ArrayList;
import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.GetTopUpMainCategory;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.AppDataMap;
import com.rcom.rdtv.util.DynamicMenu;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.AppProperties;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-30  12:26:55 AM
 */
public class check_TopUpSubMN extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-30  12:26:55 AM
	 */
	public check_TopUpSubMN() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:43 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:43 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:43 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Global_Counter:Max_NoMatch", "TopUp_SubMN:NomatchRemaining", false).setDebugId(901));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(645)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0052", false).setDebugId(646));
			actions.add(new com.avaya.sce.runtime.Next("Top_Up_Packs-link_down", "linkdown").setDebugId(647));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Top_Up_SubMN ReturnCode :: ", "TopUp_SubMN:ReturnCode").setDebugId(649));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "TopUp_SubMN:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:SUCCESS", true).setDebugId(650)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Top_Up_SubMN Value :: ", "TopUp_SubMN:Value").setDebugId(651));
				actions.add(new com.avaya.sce.runtime.Next("Top_Up_Packs-TopUpPackChannel_MN", "next").setDebugId(652));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Top_Up_Packs-triesexceed", "trie_exceed").setDebugId(654));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		String appName = null,circleID = null,langId = null,key = null,initialPrompt = null;
		Hashtable<String, Hashtable<String, Hashtable<String, Hashtable<String, GetTopUpMainCategory>>>> topUpSubCategory = null;
		Hashtable<String, Hashtable<String, Hashtable<String, GetTopUpMainCategory>>> circlePackInfo = null;
		Hashtable<String, Hashtable<String, GetTopUpMainCategory>> langPackInfo = null;
		Hashtable<String, GetTopUpMainCategory> topUpSubInfo = null;
		GetTopUpMainCategory getTopUpMainCategory =null;ArrayList<String> arrChannelMessage=null;
		
		try
		{
			if(mySession.getVariableField(IProjectVariables.TOP_UP__SUB_MN, IProjectVariables.TOP_UP__SUB_MN_FIELD_RETURN_CODE).getStringValue().equalsIgnoreCase(AppConstants.Success))
			{
				appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
				circleID = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
				langId = mySession.getCurrentLanguage();
				
				/** Formating the Request To Get Data from DB **/
				key = AppConstants.TOPUP_MAINCATEGORY_KEY+appName;
				topUpSubCategory = (Hashtable<String, Hashtable<String, Hashtable<String, Hashtable<String, GetTopUpMainCategory>>>>) AppDataMap.getInstance(appName).getAppData(key);
				if(topUpSubCategory != null)
				{
					circlePackInfo = topUpSubCategory.get(circleID);
					langPackInfo = circlePackInfo.get(langId);
					topUpSubInfo = langPackInfo.get(mySession.getVariableField(IProjectVariables.TOP__UP__MN, IProjectVariables.TOP__UP__MN_FIELD_VALUE).getStringValue());
					getTopUpMainCategory = topUpSubInfo.get(mySession.getVariableField(IProjectVariables.TOP_UP__SUB_MN, IProjectVariables.TOP_UP__SUB_MN_FIELD_VALUE).getStringValue());
					
					if(getTopUpMainCategory != null)
					{
						arrChannelMessage = new ArrayList<>();
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " PlayOut Channel Message Phrase :: "+getTopUpMainCategory.toString());
						arrChannelMessage.add(getTopUpMainCategory.getSubCategoryDetailPhrase());
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DENOMINATION).setValue(getTopUpMainCategory.getMrp());
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_PACKNAME).setValue(getTopUpMainCategory.getSubCategoryInfoPhrase());
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_OFFER_CODE).setValue(getTopUpMainCategory.getOfferCode());
						
						/** Dynamic Prompt Formation **/
						initialPrompt = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(appName+AppConstants.SEPERATOR_HYPEN+AppConstants.RD01_MN_0040);
						initialPrompt = DynamicMenu.playPrompt(arrChannelMessage, initialPrompt, AppConstants.NA, AppConstants.RD01_MN_0040, trace);							
					}
				}
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			
			}
		}catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
		StackTrace.PrintException(e);
		}
		finally
		{trace=null;topUpSubInfo=null;langPackInfo=null;circlePackInfo=null;topUpSubCategory=null;circlePackInfo=null;langPackInfo=null;arrChannelMessage=null;getTopUpMainCategory = null;appName = null;circleID = null;langId = null;key = null;initialPrompt = null;}
	}
}
