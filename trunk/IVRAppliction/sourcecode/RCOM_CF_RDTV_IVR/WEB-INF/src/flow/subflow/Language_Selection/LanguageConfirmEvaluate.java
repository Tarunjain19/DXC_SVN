package flow.subflow.Language_Selection;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.rcomdth02.model.UpdatePrefferedLanguage;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.AppDataMap;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-12  03:58:47 PM
 */
public class LanguageConfirmEvaluate extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-12  03:58:47 PM
	 */
	public LanguageConfirmEvaluate() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:58 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:58 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:58 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Global_Counter:Max_NoMatch", "LanguageConfirm:NomatchRemaining", false).setDebugId(700));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Language Confirmation Menu Return Code", "LanguageConfirm:ReturnCode").setDebugId(320));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(532)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:IsHostFailure", "CONSTANTS:NO", false).setDebugId(674));
			actions.add(new com.avaya.sce.runtime.Next("Language_Selection-LangUpdateFailureAnnc", "linkdown").setDebugId(533));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "LanguageConfirm:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:SUCCESS", true).setDebugId(322)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Language Confirmation Menu Return Value", "LanguageConfirm:Value").setDebugId(321));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "LanguageConfirm:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "dmGrammarValues:Confirm", true).setDebugId(323)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Language_Selection-Add_PreferredLanguage", "confirm").setDebugId(324));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Language_Selection-CheckBackDNIS", "otherwise").setDebugId(360));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			}

			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Language_Selection-CheckBackDNIS", "exceeded").setDebugId(327));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		UpdatePrefferedLanguage updatePrefferedLanguage = null;
		try
		{	/** Sp_IVR_Set_Pref_Lang Happening Here **/
			if(mySession.getVariableField(IProjectVariables.LANGUAGE_CONFIRM, IProjectVariables.LANGUAGE_CONFIRM_FIELD_RETURN_CODE).getStringValue().equalsIgnoreCase(AppConstants.Success))
			{
				if(mySession.getVariableField(IProjectVariables.LANGUAGE_CONFIRM, IProjectVariables.LANGUAGE_CONFIRM_FIELD_VALUE).getStringValue().equalsIgnoreCase(AppConstants.Confirm))
				{
					/** Update Language Request Formation **/
					updatePrefferedLanguage = new UpdatePrefferedLanguage();
					updatePrefferedLanguage.setScnNo(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_SCNUMBER).getStringValue());
					updatePrefferedLanguage.setPrefferedLang((String) AppDataMap.getInstance(AppConstants.RDTV_9001_EXTERNAL).getAppData(mySession.getCurrentLanguage()));
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " Update Language Host Request :: "+updatePrefferedLanguage.toString());
					
					/** Getting Response From Host **/
					updatePrefferedLanguage = IVRDBServiceInstance.getRcomdth02DataService().getUpdatePrefferedLanguage((IVRDataBean) mySession.getProperty(AppConstants.IVRDATABEAN), updatePrefferedLanguage);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " Update Language Host Response :: "+updatePrefferedLanguage.toString());
					
					if(updatePrefferedLanguage.getErrorCode().equalsIgnoreCase(AppConstants.zero) && updatePrefferedLanguage.getStatus().contains(AppConstants.Success))
					{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** Language Updated Successfully **");
					}
					else
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);		
				}
			}
		}catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
		StackTrace.PrintException(e);}
		finally
		{updatePrefferedLanguage=null;trace=null;}
		
	}
}
