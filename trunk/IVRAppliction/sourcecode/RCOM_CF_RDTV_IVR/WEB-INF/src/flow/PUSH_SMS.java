package flow;

import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

import com.rcom.otherflows.model.PushSMSInfo;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.AppDataMap;
import com.rcom.rdtv.util.StackTrace;
import com.servion.rdtv.hostinterface.TransURLHitPushSMS;
import com.servion.rdtv.hostservice.ReqPushSMS;
import com.servion.rdtv.hostservice.ResPushSMS;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-23  07:25:46 PM
 */
public class PUSH_SMS extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-23  07:25:46 PM
	 */
	public PUSH_SMS() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:40 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("CallBack_SuccessAnnc", "Default");
		next.setDebugId(7464);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:40 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:40 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@SuppressWarnings("unused")
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo trace = mySession.getTraceOutput();
		Hashtable<String, String> smsHashTable = null;
		String strKeyword = AppConstants.EMPTY_STRING;
		PushSMSInfo pushSMSInfo = null;
		String strApplicationName = AppConstants.EMPTY_STRING,strCircle = AppConstants.EMPTY_STRING, strMsgText = AppConstants.EMPTY_STRING;
		String strSMSTemplate = AppConstants.EMPTY_STRING;
		Hashtable<String, PushSMSInfo> pushSMSHashTable = null;
		IVRDataBean ivrDataBean = null;
		String completeSMSText = AppConstants.EMPTY_STRING;
		ReqPushSMS reqPushSMS = null;
		ResPushSMS resPushSMS = null;
		TransURLHitPushSMS transURLHitPushSMS = null;
		String callerType = null;
		
		try{
			
			pushSMSInfo = new PushSMSInfo();
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstants.IVRDATABEAN);

			strCircle = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			strApplicationName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
			strKeyword = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(AppConstants.SMSKeyword);
			
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Cricle ID :" + strCircle);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Key Word :" + strKeyword);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Applicatin Name :" + strApplicationName);
			
			pushSMSHashTable = (Hashtable<String, PushSMSInfo>) AppDataMap.getInstance(strApplicationName).getAppData(AppConstants.PUSH_SMS+strApplicationName);
			
			if(pushSMSHashTable != null){
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Keyword:"+strCircle+AppConstants.SEPERATOR_UNDERSCORE+strKeyword);
							pushSMSInfo = pushSMSHashTable.get(strCircle+AppConstants.SEPERATOR_UNDERSCORE+strKeyword);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Check :: "+pushSMSInfo.toString());
							if(pushSMSInfo !=null)
							{
							strSMSTemplate = pushSMSInfo.getSmsText();
							reqPushSMS = new ReqPushSMS();
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Check :: "+pushSMSInfo.toString());
							reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.GET__CBMOBILE_NUMBER, IProjectVariables.GET__CBMOBILE_NUMBER_FIELD_VALUE).getStringValue().substring(AppConstants.Zero, AppConstants.Ten));
							reqPushSMS.setMessageText(strSMSTemplate);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " ReqPushSMS request :: "+reqPushSMS);
							transURLHitPushSMS = new TransURLHitPushSMS();
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Check :: "+pushSMSInfo.toString());
							resPushSMS = transURLHitPushSMS.getHostInterface(ivrDataBean, reqPushSMS);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " ResPushSMS response :: "+resPushSMS);
							if(resPushSMS.getResponseCode().equalsIgnoreCase(AppConstants.zero))
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** SMS sent successfully ** ");
							else
							{
								mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "** SMS Not sent successfully ** ");
							}
							}
							else
								mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
							
							}
			else
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
		}catch (Exception e) {
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in sending SMS");
			
		}finally{
			ivrDataBean = null;pushSMSInfo = null;
			reqPushSMS = null;transURLHitPushSMS = null;
			resPushSMS = null;
		}
	}
}
