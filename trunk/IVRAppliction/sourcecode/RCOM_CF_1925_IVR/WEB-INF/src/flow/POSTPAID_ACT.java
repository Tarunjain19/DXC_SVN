package flow;

import java.text.SimpleDateFormat;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.AppConstant;
import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.StackTrace;
import com.rcom.data.model.DataActivation;
import com.rcom.data.resource.IVRDBServiceInstance;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-DEC-04  11:15:42 AM
 */
public class POSTPAID_ACT extends com.avaya.sce.runtime.Data {
	
	//private static Logger logger = Logger.getLogger("Dialog.Designer.TraceWriter.RCOM_CF_1925_IVR");

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-DEC-04  11:15:42 AM
	 */
	public POSTPAID_ACT() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("SetLinkDown", "NotInsertInDB");
		next.setDebugId(3252);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isInsertInDb", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "true", false).setDebugId(3265)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("PostPaidAct_1925_PA_007", "InsertInDB").setDebugId(3266));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		ITraceInfo trace = mySession.getTraceOutput();
		IVRDataBean objIVRDataBean = null;
		String action ="";
		
		try{
			SimpleDateFormat simpDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			java.util.Date date = new java.util.Date();
			String strDate = simpDate.format(date);
			
			// *Setting logger and sesion id */
			
			/*Setting logger and sesion id */
			objIVRDataBean = (IVRDataBean)mySession.getProperty(Constants.IVRDataBean);
			String mdn =  mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_ANI).getStringValue();
			String Altmdn =  mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_ALT_MDN).getStringValue();
			action =  mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_IS_DATA_CARD).getStringValue();
			
		
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Date is :: "+strDate);
			
			DataActivation  dareq=new DataActivation();
			
			dareq.setInsertDate(strDate);
			dareq.setMdn(mdn);
			dareq.setReqType("DATA");
			dareq.setOPType(action);
			dareq.setSource("IVR");
			dareq.setPunch_No(Altmdn);
			dareq.setConnection_Type("POSTPAID");
			dareq.setSessionid(mySession.getSessionId());
			dareq.setLangid("0");
			dareq.setTransDate(strDate);
			dareq.setStatus("P");
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Request from ivr is :: "+dareq);
			
			dareq= IVRDBServiceInstance.getInstance().InsertActivationData(objIVRDataBean, dareq);
			
			String data_res=dareq.getProc_Status();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Responce :: "+data_res);
			
			if(data_res.equalsIgnoreCase("1"))
			{
				 mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_INSERT_IN_DB).setValue(AppConstant.TRUE);	
			}
			else
			{
				 mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_INSERT_IN_DB).setValue(AppConstant.FALSE);
			}
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Flag is :: "+ mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_INSERT_IN_DB).getStringValue());
			
			
		}
		catch (Exception e) {
			
			StackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
		}
	}
}
