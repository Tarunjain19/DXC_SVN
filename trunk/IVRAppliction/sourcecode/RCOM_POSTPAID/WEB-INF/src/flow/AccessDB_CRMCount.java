package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.postpaid.model.PostpaidCRMCountInfo;
import com.rcom.postpaid.resource.IVRDBServiceInstance;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.PrintStackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;
import com.sun.corba.se.impl.orbutil.closure.Constant;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-24  05:58:28 PM
 */
public class AccessDB_CRMCount extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		AppProperties appProperties = null;
		IVRDataBean ivrDataBean = null;
		PostpaidCRMCountInfo postpaidCRMCountInfo = null;
		String strMDN = "", strUnbilledCount = "0", strFreeUnitCount = "0", strBilledCount = "0", strPaymentCount = "0", strBillDeliveryCount = "0";
		String circleCode ="";
		String IP ="",EPM_Alarm_Description = "";
		try {
			IP = mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_TOMCAT__SERVER_IP).getStringValue();
			postpaidCRMCountInfo = new PostpaidCRMCountInfo();
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			
			strMDN = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue();
			postpaidCRMCountInfo.setMdn(strMDN);
			try{
			postpaidCRMCountInfo = IVRDBServiceInstance.getInstance().getPostpaidCRMCountInfo(ivrDataBean, postpaidCRMCountInfo);
			}
			catch(Exception e)
			{
				EPM_Alarm_Description =IP+"|"+e;
				mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_FLAG).setValue("TRUE");
				mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_DESCRIPTION).setValue(EPM_Alarm_Description);
			}
			
			if(postpaidCRMCountInfo != null){
				if(postpaidCRMCountInfo.getFreeUnitCount() != null)
					strFreeUnitCount = postpaidCRMCountInfo.getFreeUnitCount();
				
				if(postpaidCRMCountInfo.getBilledCount() != null)
					strBilledCount = postpaidCRMCountInfo.getBilledCount();
				
				if(postpaidCRMCountInfo.getPaymentCount() != null)
					strPaymentCount = postpaidCRMCountInfo.getPaymentCount();
				
				if(postpaidCRMCountInfo.getUnbilledCount() != null)
					strUnbilledCount = postpaidCRMCountInfo.getUnbilledCount();
				
				if(postpaidCRMCountInfo.getBillDeliveryCount() != null)
					strBillDeliveryCount = postpaidCRMCountInfo.getBillDeliveryCount();
				
			}
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Free Unit count:"+strFreeUnitCount+" , Billed Count:"+strBilledCount+", Unbilled count:"+strUnbilledCount);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Payment count:"+strPaymentCount+" , Bill Delivery count:"+strBillDeliveryCount);
			mySession.getVariableField(IProjectVariables.INTERACTION_COUNT, IProjectVariables.INTERACTION_COUNT_FIELD_FREE_UNIT).setValue(strFreeUnitCount);
			mySession.getVariableField(IProjectVariables.INTERACTION_COUNT, IProjectVariables.INTERACTION_COUNT_FIELD_BILL_INFO).setValue(strBilledCount);
			mySession.getVariableField(IProjectVariables.INTERACTION_COUNT, IProjectVariables.INTERACTION_COUNT_FIELD_UNBILLED_INFO).setValue(strUnbilledCount);
			mySession.getVariableField(IProjectVariables.INTERACTION_COUNT, IProjectVariables.INTERACTION_COUNT_FIELD_PAYMENT_INFO).setValue(strPaymentCount);
			mySession.getVariableField(IProjectVariables.INTERACTION_COUNT, IProjectVariables.INTERACTION_COUNT_FIELD_BILL_DELIVERY).setValue(strBillDeliveryCount);
			
			
			//For Playing out interaction History upto 3 buckets for circle wise
		/*	
			appProperties = (AppProperties) mySession.getProperty(Constants.IvrPropertyInstance);
			String circleValue = appProperties.getIVRProp("ILCRMHistoryCircleBased");
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circlelist from config File "+circleValue);
			circleCode =  mySession.getVariableField(IProjectVariables.ROUTING_INFO, IProjectVariables.ROUTING_INFO_FIELD_CIRCLE).getStringValue();
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "CircleCode "+circleCode);
			String[] circles	   =  circleValue.split(Constants.PIPE);
			for (String circle:circles)
					{
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circle comparison::"+circle);
						if (circle.equalsIgnoreCase(circleCode))
						{
							info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "In loop1");
							info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circle in the list of ILInteraction History");
							mySession.getVariableField(IProjectVariables.ILCRMHIT_FLAG,IProjectVariables.ILCRMHIT_FLAG_FIELD_HIT_TRAVERSAL_COUNT).setValue(Constants.three);
							break;
						}
					}*/
		} catch (Exception e) {
			PrintStackTrace.PrintException(e);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Exception");
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);;
		}
		
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-24  05:58:28 PM
	 */
	public AccessDB_CRMCount() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:36:18 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:36:18 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:36:18 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(13);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:isFromInteractionHistory", "Constants:yes", false).setDebugId(3071));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "UnbilledInfoCount:", "InteractionCount:unbilledInfo").setDebugId(6496));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "TraversalFlag", "ILCRMHitFlag:UnbilledInfo").setDebugId(6497));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "FreeUnitCount:", "InteractionCount:freeUnit").setDebugId(6498));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Traversalflg-freeUnit", "ILCRMHitFlag:freeUnitInfo").setDebugId(6499));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "BillInfoCount", "InteractionCount:billInfo").setDebugId(6500));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "TraversalFlag-billInfo", "ILCRMHitFlag:checkBillInfo").setDebugId(6501));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "PaymentCount", "InteractionCount:paymentInfo").setDebugId(6502));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "TraversalFlag-payment", "ILCRMHitFlag:paymentInfo").setDebugId(6503));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "DeliveryCount", "InteractionCount:billDelivery").setDebugId(6504));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "TraversalFlag-delivery", "ILCRMHitFlag:deliveryStatus").setDebugId(6505));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "EPM_Alarm:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:True", true).setDebugId(6872)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.ReportAlarmInfo(com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_CRITICAL, "DB Down|Main Flow|AccessDB_CRMCount|", "EPM_Alarm:Description", true).setDebugId(6873));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("EPM_Alarm:Flag", "Constants:False", false).setDebugId(6874));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(1569)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Initialize_MN_0005", "LinkDown").setDebugId(1570));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			com.avaya.sce.runtime.BooleanOperation bo1 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
			com.avaya.sce.runtime.Expression be1 = new com.avaya.sce.runtime.Expression("expression1", "InteractionCount:freeUnit", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "CallData:totalFreeUnitCount", true);
			bo1.addExpression(be1);
			com.avaya.sce.runtime.Expression be2 = new com.avaya.sce.runtime.Expression("expression2", "ILCRMHitFlag:freeUnitInfo", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:False", true);
			bo1.addExpression(be2);
			com.avaya.sce.runtime.BooleanOperation bo2 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
			com.avaya.sce.runtime.Expression be3 = new com.avaya.sce.runtime.Expression("expression3", "InteractionCount:unbilledInfo", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "CallData:totalUnbilledCount", true);
			bo2.addExpression(be3);
			com.avaya.sce.runtime.Expression be4 = new com.avaya.sce.runtime.Expression("expression4", "ILCRMHitFlag:UnbilledInfo", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:False", true);
			bo2.addExpression(be4);
			com.avaya.sce.runtime.BooleanOperation bo3 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
			com.avaya.sce.runtime.Expression be5 = new com.avaya.sce.runtime.Expression("expression5", "InteractionCount:billInfo", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "CallData:totalBillInfoCount", true);
			bo3.addExpression(be5);
			com.avaya.sce.runtime.Expression be6 = new com.avaya.sce.runtime.Expression("expression6", "ILCRMHitFlag:checkBillInfo", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:False", true);
			bo3.addExpression(be6);
			com.avaya.sce.runtime.BooleanOperation bo4 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
			com.avaya.sce.runtime.Expression be7 = new com.avaya.sce.runtime.Expression("expression7", "InteractionCount:paymentInfo", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "CallData:totalPaymentInfo", true);
			bo4.addExpression(be7);
			com.avaya.sce.runtime.Expression be8 = new com.avaya.sce.runtime.Expression("expression8", "ILCRMHitFlag:paymentInfo", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:False", true);
			bo4.addExpression(be8);
			com.avaya.sce.runtime.BooleanOperation bo5 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
			com.avaya.sce.runtime.Expression be9 = new com.avaya.sce.runtime.Expression("expression9", "InteractionCount:billDelivery", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "CallData:totalBillDeliveryCount", true);
			bo5.addExpression(be9);
			com.avaya.sce.runtime.Expression be10 = new com.avaya.sce.runtime.Expression("expression10", "ILCRMHitFlag:deliveryStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:False", true);
			bo5.addExpression(be10);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "TraversalCount", "ILCRMHitFlag:HitTraversalCount").setDebugId(6510));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(6449)).evaluate(mySession, bo1)) {
				actions = new java.util.ArrayList(5);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:accountInformation", "FreeUnitInfo", true).setDebugId(1640));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("ILCRMHitFlag:freeUnitInfo", "Constants:True", false).setDebugId(6455));
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("ILCRMHitFlag:HitTraversalCount").setDebugId(6456));
				actions.add(new com.avaya.sce.runtime.Next("AccountInformation", "FreeUnitInfo").setDebugId(1580));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(6457)).evaluate(mySession, bo2)) {
				actions = new java.util.ArrayList(5);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:accountInformation", "UnbilledInfo", true).setDebugId(1641));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("ILCRMHitFlag:UnbilledInfo", "Constants:True", false).setDebugId(6463));
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("ILCRMHitFlag:HitTraversalCount").setDebugId(6464));
				actions.add(new com.avaya.sce.runtime.Next("AccountInformation", "UnbilledInfo").setDebugId(1581));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(6465)).evaluate(mySession, bo3)) {
				actions = new java.util.ArrayList(5);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:accountInformation", "CheckBill", true).setDebugId(1642));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("ILCRMHitFlag:checkBillInfo", "Constants:True", false).setDebugId(6471));
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("ILCRMHitFlag:HitTraversalCount").setDebugId(6472));
				actions.add(new com.avaya.sce.runtime.Next("AccountInformation", "CheckBill").setDebugId(1582));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(6473)).evaluate(mySession, bo4)) {
				actions = new java.util.ArrayList(5);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:accountInformation", "CheckPayment", true).setDebugId(1643));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("ILCRMHitFlag:paymentInfo", "Constants:True", false).setDebugId(6479));
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("ILCRMHitFlag:HitTraversalCount").setDebugId(6480));
				actions.add(new com.avaya.sce.runtime.Next("AccountInformation", "CheckPayment").setDebugId(1583));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(6481)).evaluate(mySession, bo5)) {
				actions = new java.util.ArrayList(5);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:accountInformation", "DeliveryStatus", true).setDebugId(1644));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("ILCRMHitFlag:deliveryStatus", "Constants:True", false).setDebugId(6488));
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("ILCRMHitFlag:HitTraversalCount").setDebugId(6489));
				actions.add(new com.avaya.sce.runtime.Next("AccountInformation", "DeliveryStatus").setDebugId(1584));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "ILCRMHitFlag:HitTraversalCount", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "Constants:one", true).setDebugId(6506)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Initialize_MN_0005", "MainMenu").setDebugId(6507));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("AccessHost_FreeUnitInfo", "EventBasedInfo").setDebugId(1571));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
