package flow;

import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.postpaid.model.PushSMSInfo;
import com.servion.postpaid.utils.AppDataMap;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.PrintStackTrace;
import com.servion.postpaid.utils.SetPushSMS;
import com.servion.rcom.hostinterface.view.ReqPushSMS;
import com.servion.rcom.hostinterface.view.ResPushSMS;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-DEC-09  05:22:20 PM
 */
public class Post_CampignSMS extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-DEC-09  05:22:20 PM
	 */
	public Post_CampignSMS() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:36:21 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("EndCall", "Default");
		next.setDebugId(6600);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:36:21 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:36:21 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		
		Hashtable<String, String> smsHashTable = null;
		SetPushSMS setPushSMS = null;
		String strKeyword = "";
		PushSMSInfo pushSMSInfo = null;
		String strApplicationName = "",strCircle = "", strMsgText = "", strSMSTemplate = "";
		Hashtable<String, PushSMSInfo> pushSMSHashTable = null;
		IVRDataBean ivrDataBean = null;
		Hashtable<String, Hashtable<String, String>> smsHashTableDataIndexMap = null;
		
		ReqPushSMS reqPushSMS = null;
		ResPushSMS resPushSMS = null;
		IVRWebService ivrWebService = null;
		
		try{
			
			pushSMSInfo = new PushSMSInfo();
			setPushSMS = new SetPushSMS();
			smsHashTable = (Hashtable<String, String>) mySession.getProperty(Constants.SMSDataMap);// (Hashtable<String, String>) mySession.getProperty(Constants.SMSDataMap);
			strCircle = mySession.getVariableField(IProjectVariables.ROUTING_INFO, IProjectVariables.ROUTING_INFO_FIELD_CIRCLE).getStringValue();
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Data map:"+smsHashTable);
			
			strApplicationName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
			
			pushSMSHashTable = (Hashtable<String, PushSMSInfo>) AppDataMap.getInstance(strApplicationName).getAppData(Constants.PUSH_SMS+strApplicationName);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Push SMS Table:"+pushSMSHashTable);
			if(mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_CALL_END).getStringValue().equalsIgnoreCase(Constants.Yes)){
				if(mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_MAIN_MENU_TRAVERSED).getStringValue().equalsIgnoreCase(Constants.Yes)){
						strKeyword = Constants.MAINMENU_OFFER;
						mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_MAIN_MENU_TRAVERSED).setValue(Constants.No);
					 	info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Keyword:"+strCircle+Constants.UNDERSCORE+strKeyword);
					 	
					 	if(pushSMSHashTable!=null){
					 		pushSMSInfo = pushSMSHashTable.get(strCircle+Constants.UNDERSCORE+strKeyword);
					 		if(pushSMSInfo!=null){				 				
					 				if(pushSMSInfo.getSmsText() != null){
					 					strSMSTemplate = pushSMSInfo.getSmsText();
					 					reqPushSMS = new ReqPushSMS();
					 					ivrWebService = new IVRWebServiceImpl();
					 					reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue());
					 					reqPushSMS.setMessageText(strSMSTemplate);
				
					 					resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
					 					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strSMSTemplate);
					 				}
					 		}
					 	else
					 		info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this service");
					 }
				}
			}
			
		}catch (Exception e) {
			PrintStackTrace.PrintException(e);
			info.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in sending SMS");
		}
		
	}

}
