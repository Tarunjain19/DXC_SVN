package flow.subflow.ServiceManagement;

import java.util.HashMap;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.PrintStackTrace;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2017-MAY-24  04:25:05 PM
 */
public class Initialize_Price extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2017-MAY-24  04:25:05 PM
	 */
	public Initialize_Price() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:42 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:42 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:42 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(6516)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("CallData:transferReasonCode", "Constants:TR_0054", false).setDebugId(6517));
			actions.add(new com.avaya.sce.runtime.Next("ServiceManagement-CantProcess_PA_0041", "LinkDown").setDebugId(6518));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ServiceManagement-appTransfer", "Default").setDebugId(6510));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo info = null;
		String selectedOfferID =Constants.EMPTY_STRING,hostError = Constants.Success;
		HashMap<String,String> offerPrice = null,offerValidity_Type = null;
		String strPrice ="",strValidity_Type ="",strValidity ="",strType = "";
		String[] arrValidity_Type =null ;
		int intPrice =0;
		try
		{
			info = mySession.getTraceOutput();
			
			selectedOfferID = mySession.getVariableField(IProjectVariables.PACK_NAME__MN___0_0_1_9,IProjectVariables.PACK_NAME__MN___0_0_1_9_FIELD_VALUE).getStringValue();
			
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "selectedOfferID :: "+selectedOfferID);

			offerPrice = (HashMap<String,String>) mySession.getProperty(Constants.OFFER_PRICE);
			offerValidity_Type = (HashMap<String,String>) mySession.getProperty(Constants.OFFER_VALIDITY_TYPE);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "offerPrice :: "+offerPrice);
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "offerValidity_Type :: "+offerValidity_Type);
			
			
			if(offerPrice!=null){
				strPrice = offerPrice.get(selectedOfferID);
			}
			if(offerValidity_Type!=null)
			{
				strValidity_Type = offerValidity_Type.get(selectedOfferID);
			}
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "selectedOfferPrice :: "+strPrice);
			 intPrice = Integer.parseInt(strPrice)*100;
			
			 strPrice = String.valueOf(intPrice);
			 
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "selectedOfferID :: "+selectedOfferID);
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "selectedOfferPrice after conversion :: "+strPrice);
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "selectedOfferValidity_Type :: "+strValidity_Type);
			
			if(strValidity_Type!="" && strValidity_Type.contains("|"))
			{
				arrValidity_Type = strValidity_Type.split(Constants.PIPE);
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "arrValidity_Type size :: "+arrValidity_Type.length);
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "arrValidity_zero :: "+arrValidity_Type[0]);
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "arrValidity_one :: "+arrValidity_Type[1]);
				if(arrValidity_Type.length>1)
				{
				strValidity = arrValidity_Type[0];
				strType = arrValidity_Type[1];
			}
			}
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "selectedOfferValidity:: "+strValidity);
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "selectedOfferType :: "+strType);
			
			mySession.getVariableField(IProjectVariables.VASOFFER_SELECTED,IProjectVariables.VASOFFER_SELECTED_FIELD_OFFER_CODE).setValue(selectedOfferID);
			mySession.getVariableField(IProjectVariables.VASOFFER_SELECTED,IProjectVariables.VASOFFER_SELECTED_FIELD_PRICE).setValue(strPrice);
			mySession.getVariableField(IProjectVariables.VASOFFER_SELECTED,IProjectVariables.VASOFFER_SELECTED_FIELD_VALIDITY).setValue(strValidity);
			mySession.getVariableField(IProjectVariables.VASOFFER_SELECTED,IProjectVariables.VASOFFER_SELECTED_FIELD_TYPE).setValue(strType);
			
			
		}
		catch(Exception e)
		{
			PrintStackTrace.PrintException(e);
			info.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in  Initialize_Price "+e);
			hostError = Constants.Yes;
		}
		
		finally{
			mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(hostError);
		}
	
	}
}
