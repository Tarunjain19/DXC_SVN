package flow;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.StackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2017-MAY-22  12:10:58 PM
 */
public class initializeVariables extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	private static Logger logger = Logger.getLogger("Dialog.Designer.TraceWriter.RCOM_CF_ACT_VAS_IVR");

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2017-MAY-22  12:10:58 PM
	 */
	public initializeVariables() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-19  04:57:49 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("initializeInputParams", "Default");
		next.setDebugId(68);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-19  04:57:49 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-19  04:57:49 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = null;
		IVRDataBean ivrDataBean = null;
	    
		String strInitialAudios = Constants.BLANK;
		String propertiesFilePath = Constants.BLANK,ivrConfigFileName = Constants.BLANK,dynamicConfigFileName = Constants.BLANK;
		String strDefaultLanguage = Constants.HIN;
		GetReportObject getReportObject = null;
		IVRREPORTDATA ivrreportdata = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		InetAddress ip = null;
		CALLINFO callInfo  = null;
		String ani = Constants.BLANK,dnis = Constants.BLANK,appName = Constants.BLANK;;
		String propertyKey = Constants.BLANK,propertyLocation = Constants.BLANK,hostresult = Constants.Success;
		info = mySession.getTraceOutput();
		String circleID="NAA";
		String language = Constants.EMPTY_STRING;
		
			
		/*Setting logger and sesion id */
		ivrDataBean = new IVRDataBean();
		ivrDataBean.setLogger(logger);
		ivrDataBean.setSessionID(mySession.getSessionId());
		mySession.setProperty(Constants.IVRDataBean, (IVRDataBean) ivrDataBean);
		//IVRRoutingInfo objIVRRoutingInfo = null;
		
		ani 	= mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue().trim();
		dnis 	= mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).getStringValue().trim();
		appName = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.ApplicationName).trim();
		info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Application name ::"+appName);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_APP_NAME).setValue(appName);
		
		if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(ani).trim()!= null && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(ani).trim()!="N")
			ani = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(ani).trim();
		info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Masked Ani ::"+ani);	
		/* Test Configuration */
			
		try{
			
			
			getReportObject = new GetReportObject();
			ivrreportdata = getReportObject.createIVRReportObject();
			getReportObject.setIvrreportdata(ivrreportdata);
			ivrDataBean.setGetReportObject(getReportObject);
			
			mySession.setProperty("BEANREPORTDATA", getReportObject);
			
			//mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_ANI).setValue(ani);
			//mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_DNIS).setValue(dnis);
			

			/*Assigning call info data for report*/
			
			ip= InetAddress.getLocalHost();
			callInfo  = ivrreportdata.getCALLINFO();
			callInfo.setUNIQUECALLID(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue());
			callInfo.setSESSIONID(mySession.getSessionId());
			callInfo.setVXMLIP(String.valueOf(ip));
			callInfo.setSTARTDATETIME(dateFormat.format(new Date()));
			callInfo.setAPPNAME(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_APP_NAME).getStringValue());
			callInfo.setCALLERTYPE("NA");
			callInfo.setCATEGORY("NA");
			callInfo.setCIRCLEID(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue());
			callInfo.setCLI(ani);
			callInfo.setDNIS(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
			callInfo.setDNISTYPE("NA");
			callInfo.setHUB(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp("HUB").trim());
			callInfo.setAGENTID("NA");
			callInfo.setAGENTEXTN("NA");
			callInfo.setTRANSCODE("NA");
			callInfo.setTRANSFERVDN("NA");
			callInfo.setUUIDATA("NA");
			callInfo.setABANDONEDFLAG("NA");
			callInfo.setTRANSTOIVR("NA");
			callInfo.setSKILLNAME("NA");
			callInfo.setLANGCODE("ENG");
			callInfo.setENDDATETIME("NA");
			callInfo.setDTMFPATH("NA");
			callInfo.setMENUPATH("NA");
			callInfo.setCALLERPATH("NA");
			callInfo.setLASTMENUACCESSED("NA");
			callInfo.setDISPOSITION("ID");
			callInfo.setCALLENDREASON("IVR_DISCONNECT");
			callInfo.setHOWCALLENDED("DISCONNECT");
			callInfo.setERRREASON("NA");
			callInfo.setLANGUAGEFROM("NA");
			callInfo.setLANGUAGETO("NA");
			callInfo.setTAGGING("NA");
			callInfo.setLASTNODEACCESSED("NA");
			ivrreportdata.setCALLINFO(callInfo);
			
			ivrDataBean.setGetReportObject(getReportObject);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Application Name:: "+mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_APP_NAME).getStringValue());
			
			
			
			//objIVRRoutingInfo = new IVRRoutingInfo();
			
			
			
			if(mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue()!=null &&
					mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue()!=Constants.EMPTY_STRING)	
				  		circleID = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue();
				
			language = strDefaultLanguage;
			 	
			if(mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE).getStringValue()!=null &&
					mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE).getStringValue()!=Constants.EMPTY_STRING)	
				language = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE).getStringValue();
			
								
			propertyKey = Constants.PROPERTY+appName+Constants.UNDERSCORE+language;
			propertyLocation = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(propertyKey).trim();
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Property Location :"+propertyLocation);
					
			if(propertyLocation!=null && !"N".equalsIgnoreCase(propertyLocation))
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertyLocation);
					else{
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
						propertyLocation = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.DEFAULT_PROPERTY_LOCATION).trim();
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"default properties Location :"+propertyLocation);
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertyLocation);
					}
					
					
					
					
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Language Set :"+language);
				
					//info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Language list :"+strLanguages);
					
					// mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(PropertyLocation);
					
			
			
		}catch (Exception e) {
			language = strDefaultLanguage;
			circleID = "NA";
			StackTrace.PrintException(e);
			hostresult = Constants.ERROR;
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "language in catch:"+language);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "circleID in catch :"+circleID);
		}finally{
			
		
			
			
			//mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_ANI).setValue(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
			mySession.setCurrentLanguage(language);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).setValue(circleID);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE).setValue(language);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostresult);
								
			
		}
	}
}
