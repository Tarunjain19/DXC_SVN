package flow.subflow.PushSMS;

import java.net.InetAddress;
import java.util.Hashtable;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.rcom.hostinterface.view.ReqPushSMS;
import com.servion.rcom.hostinterface.view.ResPushSMS;
//import com.rcom.prepaid.model.PushSMSInfo;
//import com.servion.rcom.hostinterface.view.ReqPushSMS;
//import com.servion.rcom.hostinterface.view.ResPushSMS;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;
import com.sun.corba.se.impl.orbutil.closure.Constant;
import com.rcom.otherflows.model.PushSMSInfo;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.util.AppDataMap;
import com.rcom.util.AppConstant;
import com.rcom.util.SetPushSMS;
import com.rcom.util.StackTrace;
import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-NOV-03  02:09:39 PM
 */
public class CSS_PushSMS extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-NOV-03  02:09:39 PM
	 */
	public CSS_PushSMS() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-24  10:30:29 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("PushSMS-Return", "Default");
		next.setDebugId(17);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-24  10:30:29 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-24  10:30:29 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Push_SMSFlag:Push_SMSText", "", true).setDebugId(27));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo trace = mySession.getTraceOutput();
		
		Hashtable<String, String> smsHashTable = null;
		SetPushSMS setPushSMS = null;
		String strKeyword = AppConstant.EMPTY_STRING;
		PushSMSInfo pushSMSInfo = null;
		String strApplicationName = AppConstant.EMPTY_STRING,strCircle = AppConstant.EMPTY_STRING, strMsgText = AppConstant.EMPTY_STRING;
		Hashtable<String, PushSMSInfo> pushSMSHashTable = null;
		IVRDataBean ivrDataBean = null;
		String completeSMSText = AppConstant.EMPTY_STRING;
		ReqPushSMS reqPushSMS = null;
		ResPushSMS resPushSMS = null;
		IVRWebService ivrWebService = null;
	
		try{
			
			pushSMSInfo = new PushSMSInfo();
			setPushSMS = new SetPushSMS();
			smsHashTable = (Hashtable<String, String>) mySession.getProperty(AppConstant.SMSDataMap);
			completeSMSText = mySession.getVariableField(IProjectVariables.PUSH__SMSFLAG,IProjectVariables.PUSH__SMSFLAG_FIELD_PUSH__SMSTEXT).getStringValue();
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
		
			
			if(completeSMSText!=null && !AppConstant.EMPTY_STRING.equalsIgnoreCase(completeSMSText)){
				strMsgText = completeSMSText;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"SMS Text :"+strMsgText);
				
				reqPushSMS = new ReqPushSMS();
				ivrWebService = new IVRWebServiceImpl();
				
				reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue());
				reqPushSMS.setMessageText(strMsgText);
				
				resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
			}else{

				
			     if(mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_CALL_END).getStringValue().equalsIgnoreCase(AppConstant.Yes)){
			    	
			    	 if(mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_IS_MAIN_MENU_TRAVERSED).getStringValue().equalsIgnoreCase(AppConstant.Yes)){
			    		strKeyword = AppConstant.MAINMENU_OFFER;
						mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_IS_MAIN_MENU_TRAVERSED).setValue(AppConstant.No);
					  }
			     }
				else
					strKeyword = smsHashTable.get(AppConstant.SMSKeyword);
			strCircle = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			strApplicationName  = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(AppConstant.APP_NAME);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Cricle ID :" + strCircle);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Key Word :" + strKeyword);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Applicatin Name :" + strApplicationName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "completeSMSText :" + completeSMSText);
			
			
			pushSMSHashTable = (Hashtable<String, PushSMSInfo>) AppDataMap.getInstance(strApplicationName).getAppData(AppConstant.PUSH_SMS+strApplicationName);
			
			
			if(pushSMSHashTable != null && (!pushSMSHashTable.isEmpty())){
				pushSMSInfo = pushSMSHashTable.get(strCircle+AppConstant.SEPERATOR_UNDERSCORE+strKeyword);
				if(pushSMSInfo!=null){
					strMsgText = pushSMSInfo.getSmsText();
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText From DB :" + strMsgText);
					if(strMsgText != null){
						
						strMsgText = setPushSMS.getSMSText(strMsgText, smsHashTable);
						
						reqPushSMS = new ReqPushSMS();
						ivrWebService = new IVRWebServiceImpl();
						
						reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue());
						reqPushSMS.setMessageText(strMsgText);
						
						resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
					}else{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not for that Circle");
					}
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this service");
				}
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this application");
			}
		}
		}catch (Exception e) {
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in sending SMS");
			
		}finally{
			ivrDataBean = null;pushSMSInfo = null;
			reqPushSMS = null;setPushSMS = null;
			resPushSMS = null;
			ivrWebService = null;
		}
	}
}


