package flow.subflow.CF_Hotflash;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.HotFlashInfo;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.utilities.IVRConstants;
import com.rcom.utilities.StackTrace;
import com.servion.util.IVRDataBean;


import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-JAN-20  01:40:09 PM
 */
public class Dat_getHotflashMessage extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-JAN-20  01:40:09 PM
	 */
	public Dat_getHotflashMessage() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-27  12:38:48 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-27  12:38:48 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-27  12:38:48 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "HotFlashInfo:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:TRUE", true).setDebugId(18)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("CF_Hotflash-Ann_Hotflash", "playHotFalsh").setDebugId(19));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("CF_Hotflash-Ann_Hotflash", "Default").setDebugId(7));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		/**Declaration**/
		String phraseID = IVRConstants.EMPTY_QUOTES,appName =  IVRConstants.EMPTY_QUOTES,circleID = IVRConstants.EMPTY_QUOTES,hotFlashFlag = IVRConstants.FALSE;
		String startDate = IVRConstants.EMPTY_QUOTES, endDate = IVRConstants.EMPTY_QUOTES,language = IVRConstants.EMPTY_QUOTES;
		String hotFlashKey = IVRConstants.EMPTY_QUOTES,phraseKey=IVRConstants.EMPTY_QUOTES,nodeID =  IVRConstants.EMPTY_QUOTES;
		String flagPlayHotFlash = IVRConstants.FALSE;
		Hashtable<String, HotFlashInfo> objMapHotFlashInfo = null;
		HotFlashInfo objHotFlashInfo = null;
		SimpleDateFormat sdFormat = null;
		Date dstartDate = null, dendDate = null , currDate = null;
		ITraceInfo trace = null;
		HotFlashInfo hotFlashInfo = null;
		IVRDataBean ivrDataBean = null;
		
		
		/**Assign**/
		try{
			
			trace = mySession.getTraceOutput();
			appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			nodeID = mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO,IProjectVariables.HOT_FLASH_INFO_FIELD_ANN_ID).getStringValue();
			circleID = mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_CIRCLE).getStringValue();
			language = mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_CURRENT_LANG).getStringValue();
			hotFlashInfo = new HotFlashInfo();
			ivrDataBean = (IVRDataBean) mySession.getProperty(IVRConstants.IVRDATABEAN);
			
			hotFlashKey = IVRConstants.HOTFLASH_KEY+appName;
			hotFlashInfo.setAppName(appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Node ID :" +nodeID);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Application Name Inside Hot Flash :" +appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Applevel hot Flash Key :" +hotFlashKey);
			objMapHotFlashInfo = (Hashtable<String, HotFlashInfo>) IVRDBServiceInstance.getIVRDBInstance().getHotFlashInfo(ivrDataBean, hotFlashInfo);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"object Map Hot Flash Info :" +objMapHotFlashInfo);
			
			/**Take Node Level Phrase **/
			
			if(objMapHotFlashInfo!=null){
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"object Map Hot Flash Info :" +objMapHotFlashInfo.toString());
				
				phraseKey =nodeID+IVRConstants.UNDER_SCORE+circleID+IVRConstants.UNDER_SCORE+language;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"phrase Key For Hot flash message :" +phraseKey);
				objHotFlashInfo = objMapHotFlashInfo.get(phraseKey);
				
				if(objHotFlashInfo!=null){
					startDate = objHotFlashInfo.getStartDate();
					endDate =objHotFlashInfo.getEndDate();
					hotFlashFlag = objHotFlashInfo.getEnabledFlag();
					phraseID =objHotFlashInfo.getPhraseId();
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash start Date:" +startDate);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash end Date:" +endDate);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash Flag:" +hotFlashFlag);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash phrase ID:" +phraseID);
					
					if(IVRConstants.Y.equalsIgnoreCase(hotFlashFlag)){
						/*sdFormat = new SimpleDateFormat(AppConstant.DATE_FORMAT_DDMMYYYY);
						dstartDate = sdFormat.parse(startDate);
						dendDate = sdFormat.parse(endDate);
						
						*//**Remove Time**//*
						currDate = Calendar.getInstance().getTime();
						String strCurrDate = sdFormat.format(currDate);
						currDate = sdFormat.parse(strCurrDate);*/
						
						//if((currDate.compareTo(dstartDate)==0)||(currDate.compareTo(dendDate)==0)||(currDate.after(dstartDate) && dendDate.after(currDate))){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash is Valid:Flag is set to true");
						mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO,IProjectVariables.HOT_FLASH_INFO_FIELD_PHRASE_ID).setValue(phraseID);
						flagPlayHotFlash = IVRConstants.TRUE;
						//}
					}
				}
				
			}
		}catch(Exception e){
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in Hot Flash :" +e);
			StackTrace.PrintException(e);
		}
		mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO,IProjectVariables.HOT_FLASH_INFO_FIELD_FLAG).setValue(flagPlayHotFlash);
	}

}
