package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.avaya.sce.runtimecommon.VariableTypeException;
import com.rcom.red.constants.Constants;
import com.rcom.red.loadproperty.LoadProperty;
import com.rcom.red.utils.PrintStackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-17  03:28:21 PM
 */
public class SetLanguage extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		String strKey = "";
		String strReturnCode = "";
		ITraceInfo info = mySession.getTraceOutput();
		String strLanguageValue = "";
		String strSouthernStatesFlag = "";
		
		try {
			strReturnCode = mySession.getVariableField(IProjectVariables.LANG_SELECT__RED__MN___0_0_0_3___0_0_0_1, IProjectVariables.LANG_SELECT__RED__MN___0_0_0_3___0_0_0_1_FIELD_RETURN_CODE).getStringValue();
			strSouthernStatesFlag = mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_CALL_FROM_SOUTHERN_STATE).getStringValue();
			
			if(strReturnCode.equalsIgnoreCase(Constants.Success)){
				
				strLanguageValue = mySession.getVariableField(IProjectVariables.LANG_SELECT__RED__MN___0_0_0_3___0_0_0_1, IProjectVariables.LANG_SELECT__RED__MN___0_0_0_3___0_0_0_1_FIELD_VALUE).getStringValue();
				strKey = strLanguageValue+Constants.DMConfigPath;
				mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_CONFIG_FILE_PATH).setValue(LoadProperty.getivrconfigProp(strKey));
				mySession.setCurrentLanguage(strLanguageValue);
			}else
			{
				if(strSouthernStatesFlag.equalsIgnoreCase(Constants.yes))
					strKey = "HIN"+Constants.DMConfigPath;
				else
					strKey = "ENG"+Constants.DMConfigPath;
				mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_CONFIG_FILE_PATH).setValue(LoadProperty.getivrconfigProp(strKey));
			}
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Key:"+strKey);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Config File Path:"+LoadProperty.getivrconfigProp(strKey));
		} catch (VariableTypeException e) {
			PrintStackTrace.PrintException(e);
			mySession.setCurrentLanguage("HIN");
		}
		
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-17  03:28:21 PM
	 */
	public SetLanguage() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("ChkMDNHardCoded", "Continue");
		next.setDebugId(315);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
