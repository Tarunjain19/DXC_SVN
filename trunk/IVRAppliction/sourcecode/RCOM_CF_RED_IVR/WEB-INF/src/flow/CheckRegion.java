package flow;

import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.red.constants.Constants;
import com.rcom.red.loadproperty.LoadProperty;
import com.rcom.red.utils.DynamicMenu;
import com.rcom.red.utils.PrintStackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-17  02:43:20 PM
 */
public class CheckRegion extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-17  02:43:20 PM
	 */
	public CheckRegion() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		
		/*Declaring variables*/
		String  strLanguages = "";
		String[] arrLanguages = null;
		String strInitialAudio = "";
		String strMoreOptions = "";
		String strCircle = "", strSouthernStates = "";
		DynamicMenu dynamicMenu = null;
		ArrayList<String> dynamicValueList = null;
		
		try{
			
			dynamicMenu = new DynamicMenu();
			dynamicValueList = new ArrayList<String>();

			strSouthernStates = LoadProperty.getivrconfigProp(Constants.SouthernStates);
			strCircle = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_CIRCLE).getStringValue();
			strLanguages = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_CIRCLE_LANGUAGES).getStringValue();
			
			if(strSouthernStates.contains(strCircle))
			{
				arrLanguages = strLanguages.split(",");
				
				strInitialAudio = LoadProperty.getivrconfigProp(Constants.RED_MN_0003);
				
				for (int i = 0; i < arrLanguages.length; i++) {
					strInitialAudio = strInitialAudio.replaceAll("L"+i,  arrLanguages[i]);
					dynamicValueList.add(LoadProperty.getivrconfigProp(arrLanguages[i]));
					
				}
				
				strInitialAudio = dynamicMenu.playPrompt(dynamicValueList, strInitialAudio, ""+dynamicValueList.size(), info);
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_CALL_FROM_SOUTHERN_STATE).setValue(Constants.yes);
			}else{
				
				/*Initializing audios*/
				strInitialAudio = LoadProperty.getivrconfigProp(Constants.RED_MN_0001);
				strLanguages = LoadProperty.getivrconfigProp(Constants.NorthernStateLanguage);
				arrLanguages = strLanguages.split(",");
			}
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Initial Audio :"+strInitialAudio);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "More Option:"+strLanguages);
			
			mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_INITIAL_PROMPT).setValue(strInitialAudio);
			mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_MORE_OPTION).setValue(strLanguages);
			
			
			
		}catch (Exception e) {
			
			PrintStackTrace.PrintException(e);
			strInitialAudio = LoadProperty.getivrconfigProp(Constants.RED_MN_0001);
			strLanguages = LoadProperty.getivrconfigProp(Constants.NorthernStateLanguage);
			arrLanguages = strLanguages.split(",");
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Initial Audio :"+strInitialAudio);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "More Option:"+strLanguages);
			mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_INITIAL_PROMPT).setValue(strInitialAudio);
			mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_MORE_OPTION).setValue(strLanguages);
			mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_MORE_OPTION_COUNT).setValue(arrLanguages.length);
			
		}
		
	}
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("LangSelect_RED_MN_0003_0001", "Default");
		next.setDebugId(1020);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isCallFromSouthernState", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Y", false).setDebugId(1018)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("DMProperties:RED_MN_0003_0001_property", "DMProperties:RED_MN_0003_property", false).setDebugId(1021));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("DMProperties:RED_MN_0003_0001_property", "DMProperties:RED_MN_0001_property", false).setDebugId(1022));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
