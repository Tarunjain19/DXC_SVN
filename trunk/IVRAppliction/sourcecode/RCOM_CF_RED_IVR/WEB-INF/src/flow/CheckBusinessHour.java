package flow;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.red.constants.Constants;
import com.rcom.red.loadproperty.LoadProperty;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-17  02:52:30 PM
 */
public class CheckBusinessHour extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		
		String strDate=null, strHolidayFlag=null, strHour=null, strMin=null, strWeeklyHolidays=null;
		String days[]=null,TodaysDay=null,TodayDayShortForm=null;
		String Weekdays[] = {"SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY"};
		String Offhour=Constants.no;

		
		SimpleDateFormat sdf = null;
		Date date =null;
		Calendar cal = null;
		int  intCurrentHourMin=0,intBusinessStartHourMin=0,intBusinessEndHourMin=0;
		
		
		try
		{
			
			cal = new GregorianCalendar();
			TodaysDay = Weekdays[cal.get(Calendar.DAY_OF_WEEK)-1];			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Todays Day: "+TodaysDay);
			TodayDayShortForm=TodaysDay.substring(0, 3);
			String strStartHr = LoadProperty.getivrconfigProp(TodayDayShortForm+"_BUSINESSHOURS_START");
			String strEndHr = LoadProperty.getivrconfigProp(TodayDayShortForm+"_BUSINESSHOURS_END");
			intBusinessStartHourMin = Integer.parseInt(strStartHr);
			intBusinessEndHourMin = Integer.parseInt(strEndHr);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "StartHour :"+strStartHr+" EndHour :"+strEndHr);
			
						
			//checking for holidays in config file
			sdf =  new SimpleDateFormat("MMddyyyy");
			//MM-dd-yyyy HH:mm:ss:SSS
			date = new Date();
			strDate = sdf.format(date);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Today's Date: "+strDate);
			strHolidayFlag=LoadProperty.getivrconfigProp(strDate);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "strHolidayFlag: "+strHolidayFlag);

			//Get Value from property file for Checking Weekly Holidays
			strWeeklyHolidays =  LoadProperty.getivrconfigProp("WEEKEND");
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "From property file, strWeeklyHolidays: "+strWeeklyHolidays);

			if ((strHolidayFlag != null)&&(!strHolidayFlag.equalsIgnoreCase("NA")))
			{
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Today is HOLIDAY by date in properties file ");
				
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_OFFICE_HOUR).setValue("N");
				
			}else{
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Today is not HOLIDAY by date in properties file. Checking Weekly Holiday...");
				if (strWeeklyHolidays!=null){ //**Check for weekly Holidays *//*
					days = strWeeklyHolidays.split(":");
					for (int i=0;i<days.length;i++){
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "days["+i+"]-"+days[i]);
						if (days[i].equalsIgnoreCase(TodaysDay)){
							info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Today Is Holiday by weekday in properties file");
							mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_OFFICE_HOUR).setValue("N");
							//mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_HOLIDAY_FLAG).setValue(Constants.True);
							
							break;
						}
					}
				}else {
					Offhour = Constants.no;
				}
				//checking for business hour
				if(Offhour.equalsIgnoreCase(Constants.no))
				{
					date = new Date();
					
					sdf =  new SimpleDateFormat("HH");
					strHour = sdf.format(date);
					sdf =  new SimpleDateFormat("mm");
					strMin =  sdf.format(date);
					intCurrentHourMin = Integer.parseInt(strHour.concat(strMin));
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "intCurrentHourMin-"+intCurrentHourMin);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Start Time:"+intBusinessStartHourMin+","+"End Time"+intBusinessEndHourMin);
					if((intCurrentHourMin<intBusinessStartHourMin)||(intCurrentHourMin>intBusinessEndHourMin))
					{
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_OFFICE_HOUR).setValue("N");
					}
				}
			}
		}catch (Exception e) {
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw); 
			info.writeln(ITraceInfo.TRACE_LEVEL_ERROR, sw.toString());
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_OFFICE_HOUR).setValue("Y");
		}
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-17  02:52:30 PM
	 */
	public CheckBusinessHour() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isOfficeHour", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Y", false).setDebugId(591)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("OfficeHour_RED_PA_0003", "OfficeHour").setDebugId(590));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("OutofOfficeHour_RED_PA_0004", "OutofOfficeHour").setDebugId(593));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
