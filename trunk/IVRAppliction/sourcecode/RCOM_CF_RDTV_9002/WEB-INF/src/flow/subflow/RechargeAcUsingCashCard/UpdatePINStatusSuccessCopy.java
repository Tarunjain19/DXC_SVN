package flow.subflow.RechargeAcUsingCashCard;

/*import java.sql.Date;
import java.text.SimpleDateFormat;*/
import java.text.SimpleDateFormat;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.Constants;
import com.rcom.rdtv.StackTrace;
import com.rcom.rdtv.dthvoms.UpdateVoucherStock;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-SEP-10  02:53:11 PM
 */
public class UpdatePINStatusSuccessCopy extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		IVRDataBean objIVRData = null;
		UpdateVoucherStock updateVocherStock = null;
		String strVoucherPIN = "";
		try{
			
			objIVRData = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			strVoucherPIN = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_VOUCHER_PIN).getStringValue();
			
			updateVocherStock = new UpdateVoucherStock();
			updateVocherStock.setVoucherPIN(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_VOUCHER_NO).getStringValue());
			updateVocherStock.setStatusCode(2);
			updateVocherStock.setRechargedMDN(mySession.getVariableField(IProjectVariables.GET_SMART_CARD_NUMBER__MN, IProjectVariables.GET_SMART_CARD_NUMBER__MN_FIELD_VALUE).getStringValue());
			updateVocherStock.setMin("NULL");
			updateVocherStock.setRechargeMedia("IVF");
			
			/*SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd");
			java.util.Date dt = new java.util.Date();
			
			java.util.Date date = Date.valueOf(sd.format(dt));
			updateVocherStock.setRechargedDate(date);*/
			//Changes Done Here
			SimpleDateFormat simpDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			java.util.Date rechargeDate = new java.util.Date();
			String strDate = simpDate.format(rechargeDate);
			updateVocherStock.setRechargedDate(strDate);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Update PIN Status :"+updateVocherStock.toString());
			updateVocherStock = IVRDBServiceInstance.getDthvomsDataService().queryVoucherStock(objIVRData, updateVocherStock);	
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Update PIN Status :"+updateVocherStock.toString());
			
		}catch(Exception e){
			StackTrace.PrintException(e);
			
		}
		
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-SEP-10  02:53:11 PM
	 */
	public UpdatePINStatusSuccessCopy() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-SEP-10  05:03:00 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("RechargeAcUsingCashCard-GetCashCardNo_MN", "Default");
		next.setDebugId(1420);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-SEP-10  05:03:00 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-SEP-10  05:03:00 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
