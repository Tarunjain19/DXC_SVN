package flow;

import java.util.ArrayList;
import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.rdtv.Constants;
import com.rcom.rdtv.DynamicMenu;
import com.rcom.rdtv.StackTrace;
import com.rcom.rdtv.Utils;
import com.servion.rdtv.hostinterface.TransAccountDetails;
import com.servion.rdtv.hostservice.ReqAccountDetails;
import com.servion.rdtv.hostservice.ResAccountDetails;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-29  03:40:27 PM
 */
public class BalanceCheck extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-29  03:40:27 PM
	 */
	public BalanceCheck() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:10 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:10 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:10 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:isException", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(1978)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferPoint", "TransferPoints:RD02_TR_0017", false).setDebugId(3408));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_PP", "LinkDown").setDebugId(1979));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("BalanceAmt_PP", "Success").setDebugId(1228));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		String key = null,balanceAmt = null,appName = null,initialPrompt = null;
		List<String> dynamicList = new ArrayList<>();
		
		String sessionId = null;
		String scn = null;
		
		ReqAccountDetails reqAccountDetails = null;
		ResAccountDetails resAccountDetails = null;
		
		TransAccountDetails transAccountDetails = null;
		
		IVRDataBean objIVRData = null;
		
		
		try
		{
			objIVRData = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);			
			sessionId = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_SESSIONID).getStringValue();
			scn = mySession.getVariableField(IProjectVariables.SCN__NUMBER,IProjectVariables.SCN__NUMBER_FIELD_NUMBER).getStringValue();
			reqAccountDetails = new ReqAccountDetails();
			reqAccountDetails.setAccountId(scn);
			reqAccountDetails.setStartDate(Utils.parseDate());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Account Details Host request :: "+ reqAccountDetails.toString());
			
			transAccountDetails = new TransAccountDetails();
			resAccountDetails = transAccountDetails.getHostInterface(objIVRData, reqAccountDetails);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Account Details Host response :: "+resAccountDetails.toString());
			
			
			if(resAccountDetails.getResponseCode().equalsIgnoreCase(Constants.Zero)){
			//mySession.getVariableField(IProjectVariables.CURRENT_BALANCE,IProjectVariables.CURRENT_BALANCE_FIELD_AMOUNT).setValue(resAccountDetails.getAccBalance());	
			try
			{	/** Forming the Dynamic Prompt **/
				appName = mySession.getVariable(IProjectVariables.APP__NAME).getSimpleVariable().getStringValue();
				//balanceAmt = mySession.getVariableField(IProjectVariables.BALANCE_CHECK,IProjectVariables.BALANCE_CHECK_FIELD_AMOUNT).getStringValue();
				balanceAmt = resAccountDetails.getAccBalance();
				key = appName+Constants.SEPERATOR_HYPEN+Constants.RD02_PA_0013;
				initialPrompt = AppProperties.GetInstance(Constants.IVR_CONFIG_FILE_NAME).getIVRProp(key);
				dynamicList.add(balanceAmt + Constants.currency);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Prompt Key "+Constants.RD02_PA_0013+" :: "+key);
				
				/** Invoking the playPromt method **/
				initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, Constants.NA, Constants.RD02_PA_0013, trace);
				mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Initial Prompt "+Constants.RD02_PA_0013+" :: "+initialPrompt);
				
			}catch(Exception e)
			{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
			StackTrace.PrintException(e);}
			finally
			{initialPrompt = null;balanceAmt = null;appName=null;key=null;}
			}
			else{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
			}
		}
		catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
		}
		finally
		{
			reqAccountDetails = null;
			reqAccountDetails = null;
			transAccountDetails = null;
		}
		
		
	
	}
}
