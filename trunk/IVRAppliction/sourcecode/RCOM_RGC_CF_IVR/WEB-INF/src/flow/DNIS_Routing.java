package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.ppp.dbservice.IVRDataService;
import com.rcom.ppp.model.IVRRoutingInfo;
import com.rcom.ppp.resource.IVRDBServiceInstance;
import com.hpe.util.AppConstant;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-JUN-06  04:46:47 PM
 */
public class DNIS_Routing extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-JUN-06  04:46:47 PM
	 */
	public DNIS_Routing() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession)
	
	{
        String dnis = AppConstant.EMPTY_STRING,defaultLanguage = AppConstant.EMPTY_STRING,Language = AppConstant.EMPTY_STRING;
        String circleID = AppConstant.EMPTY_STRING,trunkID = AppConstant.EMPTY_STRING,propertiesLocation = AppConstant.EMPTY_STRING,propetyKey = AppConstant.EMPTY_STRING;
        String appName = AppConstant.EMPTY_STRING,hostOutput = AppConstant.ERROR,key=AppConstant.EMPTY_STRING;
        IVRRoutingInfo objIVRRoutingInfo = null;
        IVRDataBean objIVRDataBean = null;

        ITraceInfo trace = mySession.getTraceOutput();
        
        try {
               
               /**Assigning**/
               dnis = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
               appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
               
               trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"DNIS :"+dnis +" - App Name :" + appName);
               objIVRRoutingInfo = new IVRRoutingInfo();
               trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Line 1 - objIVRRoutingInfo");
               objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
               trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Line 2 - objIVRDataBean");
               
               /**DB Hit**/
               objIVRRoutingInfo.setDnis(dnis);
               trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Line 3 - objIVRDataBean");
               IVRDataService ivrDataService = IVRDBServiceInstance.getInstance();
               trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Line 4 - objIVRDataBean");
               objIVRRoutingInfo = ivrDataService.getIVRRoutingInfo(objIVRDataBean,objIVRRoutingInfo);
               trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Line 5 - objIVRDataBean");
               
               if(objIVRRoutingInfo!=null){
                     circleID=objIVRRoutingInfo.getCircle();
                     trunkID= objIVRRoutingInfo.getTrunkGroup();
                     defaultLanguage = objIVRRoutingInfo.getDefaultLanguage();
                     
                     /** Assign Language List Code **/
                     
                     if(defaultLanguage.equalsIgnoreCase(null) || !AppConstant.EMPTY_STRING.equals(defaultLanguage))  defaultLanguage = "ENG";
                     
                     mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE_LIST).setValue(defaultLanguage);
                     trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language List :"+Language);
                     
                     if(circleID.equalsIgnoreCase(null) || !AppConstant.EMPTY_STRING.equals(circleID))  defaultLanguage = "NA";
                     
                     mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).setValue(circleID);
                     trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"circleID :"+circleID);
                    	
                     
               }
               
               
        } catch (Exception e) {
        	   mySession.getVariableField(IProjectVariables.EXCEPTION__FLAG).setValue(AppConstant.TRUE);
               trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in DNIS ROUTING :" +e);
        }

	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-JUN-25  02:40:38 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JUN-25  02:40:38 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JUN-25  02:40:38 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Exception_Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:TRUE", true).setDebugId(16804)).evaluate(mySession)) {
			actions = new java.util.ArrayList(5);
			actions.add(new com.avaya.sce.runtime.tracking.ReportAlarmInfo(com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_CRITICAL, "RCOM_RGC_CF_IVR - DB Error while fetching DNIS & circle details", "session:sessionid", true).setDebugId(16805));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Exception_Flag", "constant:FALSE", false).setDebugId(16806));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:circleID", "NA", true).setDebugId(16807));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:languageList", "ENG", true).setDebugId(16808));
			actions.add(new com.avaya.sce.runtime.Next("DM_WelcomeMessage", "Continue_Call").setDebugId(16809));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DM_WelcomeMessage", "Default").setDebugId(16811));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
