package flow;

import java.text.SimpleDateFormat;
import java.util.Calendar;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-OCT-07  04:03:00 PM
 */
public class ReportEnd extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-07  04:03:00 PM
	 */
	public ReportEnd() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		String menuEndTime = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(Calendar.getInstance().getTime());
		mySession.getVariableField(IProjectVariables.OUTPUT__PARAMETERS,IProjectVariables.OUTPUT__PARAMETERS_FIELD_MENU_END_TIME).setValue(menuEndTime);
		
		String reportEnabled = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_REPORT_ENABLED).getStringValue();
		boolean privateData=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_PRIVATE_DATA).getBooleanValue();
		if(Constants.TRUE.equalsIgnoreCase(reportEnabled)){
			try {
				String activityName = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES, IProjectVariables.INPUT_VARIABLES_FIELD_DIALOG_NAME).getStringValue();;
				String returnCode = mySession.getVariableField(IProjectVariables.OUTPUT__PARAMETERS, IProjectVariables.OUTPUT__PARAMETERS_FIELD_RETURNCODE).getStringValue();
				java.util.Collection actions = null;
				
				if (Constants.SUCCESS.equalsIgnoreCase(returnCode)) {
					actions = new java.util.ArrayList(4);
					actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, activityName, "Return Code", "Output_Parameters:returncode"));
					actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, activityName, "Input Type", "Output_Parameters:inputType"));
				if(privateData){
					actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, activityName, "Value", "*** value skipped due to privacy ***"));
				}else{
					actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, activityName, "Value", "Output_Parameters:value"));
				}
					
					actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_END_TRANS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, activityName, "", ""));
				} else {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, activityName, "Return Code", "Output_Parameters:returncode"));
					actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_END_TRANS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, activityName, "", ""));
				}
				
				if (evaluateActions(actions, mySession)){
					if(mySession.isAppTraceEnabled()){
			        	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "-- Reports Generated Correctly --");
					}
				}else{
					if(mySession.isAppTraceEnabled()){
			        	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_WARN,  "-- Reports NOT Generated Correctly --");
					}
				}
				
			} catch (Exception e) {
				if(mySession.isAppTraceEnabled()){
		        	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR,  "-- An Exception was thrown while trying to report the outputs --");
				}
			}
		}
	
	}	

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:29 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("LogEnable", "Default");
		next.setDebugId(272);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:29 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:29 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
