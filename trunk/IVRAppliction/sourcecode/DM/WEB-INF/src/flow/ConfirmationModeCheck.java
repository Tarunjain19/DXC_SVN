package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-OCT-07  11:03:56 AM
 */
public class ConfirmationModeCheck extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-07  11:03:56 AM
	 */
	public ConfirmationModeCheck() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		
		ITraceInfo trace = mySession.getTraceOutput();

		IVariable promptVar = mySession.getVariable(IProjectVariables.PROMPT_AND_COLLECT);
		IVariable inputVar = mySession.getVariable(IProjectVariables.INPUT_VARIABLES);
		IVariable flagVar = mySession.getVariable(IProjectVariables.FLAGS);

		String inputMode = "",value = "",result = "",confirmationMode = "",inputVarConfirmationMode = "",utterance = "";
		boolean dtmfuseSlots = false;
		float confidence; 
		float inputVarConfidence;

		inputMode = promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_INPUTMODE).getStringValue();
		dtmfuseSlots = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DTMF_GRAMMARS_USE_SLOTS).getBooleanValue();

		result = promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_RESULT).getStringValue();
		confidence = Float.parseFloat(promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_CONFIDENCE).getStringValue());
		inputVarConfidence = Float.parseFloat(inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_HIGH_CONFIDENCE_LEVEL).getStringValue());
		confirmationMode = promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_CONFIRMATION__MODE).getStringValue();
		/**
		 * Checks for the input Mode of the Prompt and Collect and the Confirmation Mode.
		 * Based on the Confirmation Confidence level is checked.
		 */
		if(Constants.VOICE.equalsIgnoreCase(inputMode)||(Constants.DTMF.equalsIgnoreCase(inputMode)&&dtmfuseSlots))
		{
			if(!Constants.UNDEFINED.equalsIgnoreCase(confirmationMode))
			{
				confirmationMode = promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_CONFIRMATION__MODE).getStringValue();
			}
			else
			{
				confirmationMode = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_MODE).getStringValue();
			}
		}
		else
		{
			confirmationMode = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_MODE).getStringValue();
		}

		if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"InputMode : "+inputMode);}

		if((Constants.ONE.equalsIgnoreCase(confirmationMode)&&(confidence<inputVarConfidence))||(Constants.ZERO.equalsIgnoreCase(confirmationMode)))
		{
			flagVar.getComplexVariable().getField(IProjectVariables.FLAGS_FIELD_CONFIRMATION_MODE).setValue(Constants.TRUE);	
		}		
		else
		{
			flagVar.getComplexVariable().getField(IProjectVariables.FLAGS_FIELD_CONFIRMATION_MODE).setValue(Constants.FALSE);	
		}
		if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Confirmation Mode Flag is set to : "+flagVar.getComplexVariable().getField(IProjectVariables.FLAGS_FIELD_CONFIRMATION_MODE).getStringValue());
		}	


	}
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:33 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("PromptandCollectCheck", "PromptOptionsCheck");
		next.setDebugId(1722);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:33 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:33 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "FLAGS:ConfirmationMode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(395)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ConfirmationPromptsCheck", "LowConfidenceWithConfirmation").setDebugId(687));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
