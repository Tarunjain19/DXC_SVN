package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.IVariableField;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.CheckConsecutiveNumber;
import com.dm.util.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-NOV-06  03:27:18 PM
 */
public class CheckValue extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-NOV-06  03:27:18 PM
	 */
	public CheckValue() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {

		String slots=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_SPECIFIC_SLOTS).getStringValue();
		IVariableField nextNode = mySession.getVariableField(IProjectVariables.OPERATION_RESULT);
		IVariable promptCollectVar=mySession.getVariable(IProjectVariables.PROMPT_AND_COLLECT);
		ITraceInfo trace = mySession.getTraceOutput();
		String privateFlag=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_PRIVATE_DATA).getStringValue();

		if(!slots.equalsIgnoreCase(Constants.NONE)){
			String[] grammarSlot=slots.split(Constants.COMMA);
			for (int i = 0; i < grammarSlot.length; i++) {
				if(grammarSlot[i].equalsIgnoreCase(Constants.GRAMMAR_TYPE) && promptCollectVar.getComplexVariable().getField(Constants.GRAMMAR_TYPE).getStringValue().equalsIgnoreCase(Constants.GLOBAL)){
					nextNode.setValue(Constants.GLOBAL);
				}
			}


		}
		String checkConsecutive = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_CHECK_CONSECUTIVE_FLAG).getStringValue();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "checkConsecutive :"+checkConsecutive);
		if(Constants.TRUE.equalsIgnoreCase(checkConsecutive)){
			if (mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Consecutive Check Called:");}
			boolean isConsecutiveNumber =false;
			String valueEntered =mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT,IProjectVariables.PROMPT_AND_COLLECT_FIELD_VALUE).getStringValue();
			if(Constants.FALSE.equalsIgnoreCase(privateFlag)){
				if (mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "valueEntered :"+valueEntered);}
			}
			isConsecutiveNumber=CheckConsecutiveNumber.checkConsecutive(valueEntered, mySession);
			mySession.getVariableField(IProjectVariables.FLAGS,IProjectVariables.FLAGS_FIELD_IS_CONSECUTIVE_NUMBER).setValue(isConsecutiveNumber);
			if (mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "isConsecutiveNumber :"+isConsecutiveNumber);}
		}
	}
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:35 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("ConstraintListCheck", "Constraint Check");
		next.setDebugId(1706);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:35 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:35 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		com.avaya.sce.runtime.BooleanOperation bo1 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
		com.avaya.sce.runtime.Expression be1 = new com.avaya.sce.runtime.Expression("expression1", "inputVariables:isDTMF", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:FALSE", true);
		bo1.addExpression(be1);
		com.avaya.sce.runtime.Expression be2 = new com.avaya.sce.runtime.Expression("expression2", "inputVariables:builtInGrammarFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true);
		bo1.addExpression(be2);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "FLAGS:isConsecutiveNumber", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1844)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("NoMatch", "NoMatch").setDebugId(1845));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "OperationResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:GLOBAL", true).setDebugId(1705)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ConfirmationModeCheck", "No constraint Check").setDebugId(1702));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(2020)).evaluate(mySession, bo1)) {
			actions = new java.util.ArrayList(3);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("PromptAndCollect:RESULT", "PromptAndCollect:value", false).setDebugId(2025));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Assigning Prompt and Collect Value for Builtin Boolean", "").setDebugId(2026));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
