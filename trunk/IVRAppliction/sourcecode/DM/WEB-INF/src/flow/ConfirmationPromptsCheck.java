package flow;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-OCT-11  08:17:43 PM
 */
public class ConfirmationPromptsCheck extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-11  08:17:43 PM
	 */
	public ConfirmationPromptsCheck() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:34 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("LogEnable", "ConfirmationPromptEmpty");
		next.setDebugId(716);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:34 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:34 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "inputVariables:confirmationDefaultPrompt", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "CONSTANTS:NONE", true).setDebugId(695)).evaluate(mySession)) {
			actions = new java.util.ArrayList(6);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:firstconfirmationattempt", "CONSTANTS:TRUE", false).setDebugId(696));
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONCONFIRMATION", "inputVariables:confirmationDefaultPrompt", "|", false).setDebugId(697));
			actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("COLLECTIONCONFIRMATION").setDebugId(698));
			actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONCONFIRMATION").setDebugId(699));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Collection Confirmation :", "COLLECTIONCONFIRMATION").setDebugId(700));
			actions.add(new com.avaya.sce.runtime.Next("CheckConfirmationGrammars", "DefaultConfirmationPrompt").setDebugId(694));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "inputVariables:confirmationSpecificPrompt", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "CONSTANTS:NONE", true).setDebugId(701)).evaluate(mySession)) {
			actions = new java.util.ArrayList(6);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:firstconfirmationattempt", "CONSTANTS:TRUE", false).setDebugId(702));
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONCONFIRMATION", "inputVariables:confirmationSpecificPrompt", "|", false).setDebugId(703));
			actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("COLLECTIONCONFIRMATION").setDebugId(704));
			actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONCONFIRMATION").setDebugId(705));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Collection Confirmation :", "COLLECTIONCONFIRMATION").setDebugId(706));
			actions.add(new com.avaya.sce.runtime.Next("CheckConfirmationGrammars", "SpecificConfirmationPrompt").setDebugId(707));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(8);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:value", "PromptAndCollect:value", false).setDebugId(708));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:confidence", "PromptAndCollect:confidence", false).setDebugId(709));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:inputType", "PromptAndCollect:inputmode", false).setDebugId(710));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:returncode", "CONSTANTS:NO_CONFIRMATION_AUDIO", false).setDebugId(711));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:utterance", "PromptAndCollect:utterance", false).setDebugId(712));
		actions.add(new com.avaya.sce.runtime.varoperations.Subtract("Output_Parameters:noInputRemaining", "inputVariables:maxNoInputCount", false, "IDM_Variables:noinputcount", false).setDebugId(713));
		actions.add(new com.avaya.sce.runtime.varoperations.Subtract("Output_Parameters:noMatchsRemaining", "inputVariables:maxNoMatchCount", false, "IDM_Variables:nomatchcount", false).setDebugId(714));
		actions.add(new com.avaya.sce.runtime.varoperations.Subtract("Output_Parameters:confirmationsRemaining", "inputVariables:confirmationMaxCount", false, "IDM_Variables:countConfirmation", false).setDebugId(715));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
