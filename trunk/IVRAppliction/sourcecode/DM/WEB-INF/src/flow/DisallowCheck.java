package flow;

import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.IVariableField;
import com.avaya.sce.runtimecommon.SCESession;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-OCT-11  02:40:36 PM
 */
public class DisallowCheck extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-11  02:40:36 PM
	 */
	public DisallowCheck() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:33 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:33 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:33 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "OperationResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:NOMATCH", true).setDebugId(656)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("NoMatch", "NoMatch").setDebugId(608));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ConfirmationModeCheck", "CheckResponse").setDebugId(658));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);

		//Define the name of the RESULT.FIELD ("RESULT" or "value")
		boolean dtmfUseSlots = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES, IProjectVariables.INPUT_VARIABLES_FIELD_DTMF_GRAMMARS_USE_SLOTS).getBooleanValue();
		String inputMode = mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, IProjectVariables.PROMPT_AND_COLLECT_FIELD_INPUTMODE).getStringValue();
		String FIELD_RESULT = "RESULT";
		if ("dtmf".equalsIgnoreCase(inputMode) && !dtmfUseSlots) FIELD_RESULT = "value";


		IVariableField nextNode = mySession.getVariableField(IProjectVariables.OPERATION_RESULT);		
		IVariableField nBestCollection = mySession.getVariableField(IProjectVariables.N_BEST_VALUES_COLLECTION);
		IVariableField disallowCollection = mySession.getVariableField(IProjectVariables.DISALLOW_COLLECTION);

		nextNode.setValue("RESPONSE");
		nBestCollection.setValue("");
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"########## DM CHECK RESULT ##########");
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"### Field Name: "+FIELD_RESULT);

		//Generate DisallowArray
		String[] disallowArray = null;
		if(!"NONE".equalsIgnoreCase(disallowCollection.getStringValue())) { 
			disallowArray = generateDisallowArray(disallowCollection.getStringValue());
			int len = disallowArray==null ? 0 : disallowArray.length;
			if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"### Disallow List Values ("+len+"): "+disallowCollection.getStringValue());}		
		}
		else{
			if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG," Next node value " + nextNode.getStringValue());}
		}

		//Check if the grammar result was a collection
		IVariable promptCollect = mySession.getVariable(IProjectVariables.PROMPT_AND_COLLECT);
		boolean isCollection=promptCollect.isCollection();
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"### Prompt&Collect - Is Collection: "+isCollection);		

		ArrayList<String> arrayList = new ArrayList<String>();
		//Collection - Check DisallowValues and set nBestValues
		//======================================================================
		if(isCollection) {

			String tempValues="";
			promptCollect.getCollection().reset();
			int colSize = promptCollect.getCollection().size();			
			for(int i=0; i<colSize; i++) {
				promptCollect.getCollection().next();	    		
				String value = promptCollect.getComplexVariable().getField(FIELD_RESULT).getStringValue();
				Boolean isValid = isValidValue(disallowArray, value);	    		
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"### Prompt&Collect["+i+"] - VALUE: ["+value+"]  VALID: ["+isValid.toString()+"]");

				if(isValid){
					//Add to the nBestValues & Set the ResultField with the cleanValue
					value = cleanValidationChar(value);
					arrayList.add(value);
					tempValues = tempValues +"|"+ value;
					promptCollect.getComplexVariable().getField("RESULT").setValue(value);
				} else {
					promptCollect.getCollection().delete();
					//RePosition the Collection
					if(promptCollect.getCollection().hasPrevious()) promptCollect.getCollection().previous();
					else promptCollect.getCollection().reset();
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"### Prompt&Collect["+i+"] - VALUE: ["+value+"] was deleted.");
				}
			}
			nBestCollection.setValue(tempValues.isEmpty()?"":tempValues.substring(1));	    	
			promptCollect.getCollection().reset();
			if( promptCollect.getCollection().size() > 0) promptCollect.getCollection().next();
			else nextNode.setValue("NOMATCH");

		}

		//Simple - Check DisallowValues and set nBestValues
		//======================================================================
		else {

			String value = mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, FIELD_RESULT).getStringValue();
			Boolean isValid = isValidValue(disallowArray, value);	    		
			//mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"### Prompt&Collect - VALUE: ["+value+"]  VALID: ["+isValid.toString()+"]");

			if(isValid){
				//Add to the nBestValues & Set the ResultField with the cleanValue
				value = cleanValidationChar(value);
				arrayList.add(value);
				nBestCollection.setValue(value);
				mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, FIELD_RESULT).setValue(value);
			} else {
				nextNode.setValue("NOMATCH");
			}
		}
		mySession.setProperty("NBestArrayList", arrayList);
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"######################################");
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"### [RESULT] nextNode: "+nextNode.getStringValue());
		//mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"### [RESULT] nBestCollection Values: "+nBestCollection.getStringValue());
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"######################################");


	}


	private String cleanValidationChar(String value) {
		return value.replace("~0", "");
	}

	private boolean isValidValue(String[] disallowArray, String value) {		
		//VALID = Has no Accent[~] OR has AccentZero[~0]
		boolean isValid = !value.contains("~") || value.contains("~0");
		//VALID = Not in DisallowList
		boolean isDisallow=false;
		if(isValid) isDisallow = isDisallowedValue(disallowArray, cleanValidationChar(value));
		return isValid && !isDisallow;
	}

	private boolean isDisallowedValue(String[] disallowArray, String value) {		
		boolean response=false;
		if(null!=disallowArray){
			int len = disallowArray.length;	
			for(int i=0; i<len; i++) {
				if(value.equalsIgnoreCase(disallowArray[i])) response=true;
			}
		}
		return response ;
	}

	private String[] generateDisallowArray(String disallowValues) {	
		String[] disallowArray = null;
		if(null != disallowValues && !disallowValues.isEmpty()) {
			disallowArray = disallowValues.split(",");
		}
		return disallowArray ;
	}
}
