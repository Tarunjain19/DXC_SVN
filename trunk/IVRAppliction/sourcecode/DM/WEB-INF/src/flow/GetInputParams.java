package flow;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.regex.Pattern;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;
import com.servion.propertyReader.DMPropertyReader;
import com.servion.propertyReader.DMPropertyReaderImpl;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2013-OCT-03  03:21:38 PM
 */
public class GetInputParams extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-03  03:21:38 PM
	 */
	public GetInputParams() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Voice Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2013-OCT-03  03:21:38 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();

		String menuStartTime = new SimpleDateFormat(Constants.DATE_FORMAT).format(Calendar.getInstance().getTime());
		mySession.getVariableField(IProjectVariables.OUTPUT__PARAMETERS,IProjectVariables.OUTPUT__PARAMETERS_FIELD_MENU_START_TIME).setValue(menuStartTime);

		//These parameters contains the location of the property files, audio files and the Grammars
		String propertiesLocation = mySession.getVariable(IProjectVariables.INPUT__PROPERTIES_LOCATION).getSimpleVariable().getStringValue();
		String audioLocation = mySession.getVariable(IProjectVariables.INPUT__CUSTOM_AUDIO_LOCATION).getSimpleVariable().getStringValue();
		String grammarLocation = mySession.getVariable(IProjectVariables.INPUT__GRAMMAR_LOCATION).getSimpleVariable().getStringValue();
		String standardAudioLocation = mySession.getVariable(IProjectVariables.INPUT__STANDARD_AUDIO_LOCATION).getSimpleVariable().getStringValue();
		String isDTMF = mySession.getVariable(IProjectVariables.INPUT__IS_DTMF).getSimpleVariable().getStringValue();

		//These parameters contains the file Names of both Global properties and Properties Specific to any Prompt and Collect or Menu
		String globalPropertiesFileName = mySession.getVariable(IProjectVariables.INPUT__GLOBAL_PROPERTY_FILE_NAME).getSimpleVariable().getStringValue();
		String particularPropertiesFileName = mySession.getVariable(IProjectVariables.INPUT__PROPERTY_FILE_NAME).getSimpleVariable().getStringValue();

		//These parameters contains the DTMF and Speech Grammar file names for both Global and specific to that prompt and collect or a Menu
		String dtmfGrammar = mySession.getVariable(IProjectVariables.INPUT__DTMF_GRAMMAR).getSimpleVariable().getStringValue();
		String dtmfGlobalGrammar = mySession.getVariable(IProjectVariables.INPUT__DTMF_GLOBAL_GRAMMAR).getSimpleVariable().getStringValue();
		String speechGlobalGrammar = mySession.getVariable(IProjectVariables.INPUT__VOICE_GLOBAL_GRAMMAR).getSimpleVariable().getStringValue();
		String speechGrammar = mySession.getVariable(IProjectVariables.INPUT__VOICE_GRAMMAR).getSimpleVariable().getStringValue();
		String builtInGrammar = mySession.getVariable(IProjectVariables.INPUT__BUILT_IN_GRAMMAR).getSimpleVariable().getStringValue();
		String builtInGrammarFlag = mySession.getVariable(IProjectVariables.INPUT__BUILT_IN_GRAMMAR_FLAG).getSimpleVariable().getStringValue();
		//These parameters contains the confirmation DTMF and Speech Grammar File Names
		String confirmationDtmfGrammar = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_DTMF_GRAMMAR).getSimpleVariable().getStringValue();
		String confirmationSpeechGramamr = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_VOICE_GRAMMAR).getSimpleVariable().getStringValue();

		//These parameters contains the phrase files to be played
		String initialPrompt = mySession.getVariable(IProjectVariables.INPUT__INITIAL_PROMPT).getSimpleVariable().getStringValue();
		String noMatchPrompt = mySession.getVariable(IProjectVariables.INPUT__NO_MATCH_PROMPT).getSimpleVariable().getStringValue();
		String noInputPrompt = mySession.getVariable(IProjectVariables.INPUT__NO_INPUT_PROMPT).getSimpleVariable().getStringValue();
		String rePromptNoMatch = mySession.getVariable(IProjectVariables.INPUT__RE_PROMPT_NO_MATCH).getSimpleVariable().getStringValue();
		String rePromptNoInput = mySession.getVariable(IProjectVariables.INPUT__RE_PROMPT_NO_INPUT).getSimpleVariable().getStringValue();
		String noMatchLimitPrompt = mySession.getVariable(IProjectVariables.INPUT__NO_MATCH_MAX_TRY_PROMPT).getSimpleVariable().getStringValue();
		String noInputLimitPrompt = mySession.getVariable(IProjectVariables.INPUT__NO_INPUT_MAX_TRY_PROMPT).getSimpleVariable().getStringValue();

		//These parameters contains the wav files to be played for confirmation
		String confirmationDefaultPrompt = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_INITIAL_PROMPT).getSimpleVariable().getStringValue();
		String confirmationNoMatchPrompt = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_NO_MATCH_PROMPT).getSimpleVariable().getStringValue();
		String confirmationNoInputPrompt = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_NO_INPUT_PROMPT).getSimpleVariable().getStringValue();
		String confirmationSpecificPrompt = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_SPECIFIC_PROMPT).getSimpleVariable().getStringValue();
		String confirmationRePrompt = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_REPROMPT).getSimpleVariable().getStringValue();

		String helpPrompt = mySession.getVariable(IProjectVariables.INPUT__HELP_PROMPT).getSimpleVariable().getStringValue();
		String globalPrompt = mySession.getVariable(IProjectVariables.INPUT__GLOBAL_PROMPT).getSimpleVariable().getStringValue();
		String successPrompt = mySession.getVariable(IProjectVariables.INPUT__SUCCESS_PROMPT).getSimpleVariable().getStringValue();
		String nBest = mySession.getVariable(IProjectVariables.INPUT__NBEST).getSimpleVariable().getStringValue();
		String disallowList = mySession.getVariable(IProjectVariables.INPUT__DISALLOW_LIST).getSimpleVariable().getStringValue();
		String language = mySession.getVariable(IProjectVariables.INPUT__LANGUAGE).getSimpleVariable().getStringValue();
		String privateData = mySession.getVariable(IProjectVariables.INPUT__PRIVATE_DATA).getSimpleVariable().getStringValue();
		String menuID=mySession.getVariable(IProjectVariables.INPUT__MENU_ID).getSimpleVariable().getStringValue();
		String announceID=mySession.getVariable(IProjectVariables.INPUT__ANNOUNCE_ID).getSimpleVariable().getStringValue();

		IVariable inputVar = mySession.getVariable(IProjectVariables.INPUT_VARIABLES);
		// These parameters are specific to a particular Prompt and Collect Properties
		String loggingEnabled = mySession.getVariable(IProjectVariables.INPUT__LOGGING_ENABLED).getSimpleVariable().getStringValue();
		String loggerName = mySession.getVariable(IProjectVariables.INPUT__LOGGER_NAME).getSimpleVariable().getStringValue();
		String confirmationMode = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_MODE).getSimpleVariable().getStringValue();
		String highConfidenceLevel = mySession.getVariable(IProjectVariables.INPUT__HIGH_CONFIDENCE_LEVEL).getSimpleVariable().getStringValue();
		String lowConfidenceLevel = mySession.getVariable(IProjectVariables.INPUT__LOW_CONFIDENCE_LEVEL).getSimpleVariable().getStringValue();
		String timeout = mySession.getVariable(IProjectVariables.INPUT__INITIAL_TIMEOUT).getSimpleVariable().getStringValue();
		String interdigitTimeout = mySession.getVariable(IProjectVariables.INPUT__INTERDIGIT_TIMEOUT).getSimpleVariable().getStringValue();
		String terminatingTimeout = mySession.getVariable(IProjectVariables.INPUT__TERMINATING_TIMEOUT).getSimpleVariable().getStringValue();
		String completeTimeout = mySession.getVariable(IProjectVariables.INPUT__COMPLETE_TIMEOUT).getSimpleVariable().getStringValue();
		String incompleteTimeout = mySession.getVariable(IProjectVariables.INPUT__INCOMPLETE_TIMEOUT).getSimpleVariable().getStringValue();
		String mediaTypeVoice = mySession.getVariable(IProjectVariables.INPUT__MEDIA_TYPE_VOICE).getSimpleVariable().getStringValue();
		String mediaTypeDTMF = mySession.getVariable(IProjectVariables.INPUT__MEDIA_TYPE_DTMF).getSimpleVariable().getStringValue();
		String bargeIn = mySession.getVariable(IProjectVariables.INPUT__BARGE_IN).getSimpleVariable().getStringValue();
		String bargeInType = mySession.getVariable(IProjectVariables.INPUT__BARGE_IN_TYPE).getSimpleVariable().getStringValue();
		String NINMCounter = mySession.getVariable(IProjectVariables.INPUT__NINMCOUNTER).getSimpleVariable().getStringValue();
		String NINMCommonCounterFlag = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_NINMCOMMON_COUNTER_FLAG).getStringValue();
		String noMatchRandom = mySession.getVariable(IProjectVariables.INPUT__NO_MATCH_RANDOM).getSimpleVariable().getStringValue();
		String noInputRandom = mySession.getVariable(IProjectVariables.INPUT__NO_INPUT_RANDOM).getSimpleVariable().getStringValue();
		String noAnswerApologiesRandom = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_DENIED_APOLOGY_RANDOM).getSimpleVariable().getStringValue();
		String manageRepeat = mySession.getVariable(IProjectVariables.INPUT__MANAGE_REPEAT).getSimpleVariable().getStringValue();
		String repeatCount = mySession.getVariable(IProjectVariables.INPUT__REPEAT_COUNTER).getSimpleVariable().getStringValue();
		String repeatPrompt = mySession.getVariable(IProjectVariables.INPUT__REPEAT_PROMPT).getSimpleVariable().getStringValue();
		String repeatMaxTryPrompt = mySession.getVariable(IProjectVariables.INPUT__REPEAT_MAX_TRY_PROMPT).getSimpleVariable().getStringValue();
		String reportEnabled = mySession.getVariable(IProjectVariables.INPUT__REPORT_ENABLED).getSimpleVariable().getStringValue();
		String dialogName = mySession.getVariable(IProjectVariables.INPUT__DIALOG_NAME).getSimpleVariable().getStringValue();
		String terminatingChar = mySession.getVariable(IProjectVariables.INPUT__TERMINATING_CHAR).getSimpleVariable().getStringValue();
		String recordUtterance = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_RECORD_UTTERANCE).getStringValue();
		String constraintList = mySession.getVariable(IProjectVariables.INPUT__STATIC_CONSTRAINT_LIST).getSimpleVariable().getStringValue();
		String maxNoInput = mySession.getVariable(IProjectVariables.INPUT__MAX_NO_INPUT_COUNT).getSimpleVariable().getStringValue();
		String maxNoMatch = mySession.getVariable(IProjectVariables.INPUT__MAX_NO_MATCH_COUNT).getSimpleVariable().getStringValue();
		String noAnswerApologies = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_DENIED_APOLOGY).getSimpleVariable().getStringValue();
		String dtmfGrammarsUseSlots = mySession.getVariable(IProjectVariables.INPUT__DTMFGRAMMARUSE_SLOTS).getSimpleVariable().getStringValue();
		String confirmationMaxCount = mySession.getVariableField(IProjectVariables.INPUT__CONFIRMATION_MAX_COUNT).getStringValue();
		String successPromptOnlyForConfirmation = mySession.getVariable(IProjectVariables.INPUT__SUCCESS_PROMPT_ONLY_FOR_CONFIRMATION).getSimpleVariable().getStringValue();
		String confirmationLimitPrompt = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_MAX_TRY_PROMPT).getSimpleVariable().getStringValue();
		String confirmationValueFlag = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_VALUE_FLAG).getSimpleVariable().getStringValue();
		String noAnswerMaxCount = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_DENIED_MAX_COUNT).getSimpleVariable().getStringValue();
		String noAnswerLimitPrompt = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_DENIED_MAX_TRY_PROMPT).getSimpleVariable().getStringValue();
		String reEntry = mySession.getVariable(IProjectVariables.INPUT__RE_ENTRY).getSimpleVariable().getStringValue();

		// These parameters are specific to Dynamic Constraint List 
		String dynamicConstraintListFlag = mySession.getVariable(IProjectVariables.INPUT__DYNAMIC_CONSTRAINT_LIST_FLAG).getSimpleVariable().getStringValue();
		String dynamicConstraintListCounterFlag = Constants.EMPTY_STRING;
		String dynamicConstraintListCounter = Constants.EMPTY_STRING;
		String dynamicConstraintListPrompts = Constants.EMPTY_STRING;
		String dynamicConstraintListValues = Constants.EMPTY_STRING;
		if(dynamicConstraintListFlag.equalsIgnoreCase(Constants.TRUE)){
			dynamicConstraintListCounterFlag = mySession.getVariable(IProjectVariables.INPUT__DYNAMIC_CONSTRAINT_LIST_COUNTER_FLAG).getSimpleVariable().getStringValue();
			dynamicConstraintListCounter = mySession.getVariable(IProjectVariables.INPUT__DYNAMIC_CONSTRAINT_LIST_COUNTER).getSimpleVariable().getStringValue();
			dynamicConstraintListPrompts = mySession.getVariable(IProjectVariables.INPUT__DYNAMIC_CONSTRAINT_LIST_PROMPTS).getSimpleVariable().getStringValue();
			dynamicConstraintListValues = mySession.getVariable(IProjectVariables.INPUT__DYNAMIC_CONSTRAINT_LIST_VALUES).getSimpleVariable().getStringValue();
		}
		String oneTimeFlag = mySession.getVariable(IProjectVariables.INPUT__ONE_TIME_FLAG).getSimpleVariable().getStringValue();

		String ssNumberFormat = mySession.getVariable(IProjectVariables.INPUT__SS__NUMBER).getSimpleVariable().getStringValue();
		String ssNumberFormatValues = mySession.getVariable(IProjectVariables.INPUT__SS__NUMBER_VALUES).getSimpleVariable().getStringValue();
		String ssDigitsFormat = mySession.getVariable(IProjectVariables.INPUT__SS__DIGITS).getSimpleVariable().getStringValue();
		String ssDigitsFormatValues = mySession.getVariable(IProjectVariables.INPUT__SS__DIGITS_VALUES).getSimpleVariable().getStringValue();
		String ssDateFormat = mySession.getVariable(IProjectVariables.INPUT__SS__DATE).getSimpleVariable().getStringValue();
		String ssDateFormatValues = mySession.getVariable(IProjectVariables.INPUT__SS__DATE_VALUES).getSimpleVariable().getStringValue();
		String ssTimeFormat = mySession.getVariable(IProjectVariables.INPUT__SS__TIME).getSimpleVariable().getStringValue();
		String ssTimeFormatValues = mySession.getVariable(IProjectVariables.INPUT__SS__TIME_VALUES).getSimpleVariable().getStringValue();
		String ssCurrencyFormat = mySession.getVariable(IProjectVariables.INPUT__SS__CURRENCY).getSimpleVariable().getStringValue();
		String ssCurrencyFormatValues = mySession.getVariable(IProjectVariables.INPUT__SS__CURRENCY_VALUES).getSimpleVariable().getStringValue();

		String ttsNumberFormat = mySession.getVariable(IProjectVariables.INPUT__TTS__NUMBER).getSimpleVariable().getStringValue();
		String ttsNumberFormatValues = mySession.getVariable(IProjectVariables.INPUT__TTS__NUMBER_VALUES).getSimpleVariable().getStringValue();
		String ttsDigitsFormat = mySession.getVariable(IProjectVariables.INPUT__TTS__DIGITS).getSimpleVariable().getStringValue();
		String ttsDigitsFormatValues = mySession.getVariable(IProjectVariables.INPUT__TTS__DIGITS_VALUES).getSimpleVariable().getStringValue();
		String ttsDateFormat = mySession.getVariable(IProjectVariables.INPUT__TTS__DATE).getSimpleVariable().getStringValue();
		String ttsDateFormatValues = mySession.getVariable(IProjectVariables.INPUT__TTS__DATE_VALUES).getSimpleVariable().getStringValue();
		String ttsTimeFormat = mySession.getVariable(IProjectVariables.INPUT__TTS__TIME).getSimpleVariable().getStringValue();
		String ttsTimeFormatValues = mySession.getVariable(IProjectVariables.INPUT__TTS__TIME_VALUES).getSimpleVariable().getStringValue();
		String ttsCurrencyFormat = mySession.getVariable(IProjectVariables.INPUT__TTS__CURRENCY).getSimpleVariable().getStringValue();
		String ttsCurrencyFormatValues = mySession.getVariable(IProjectVariables.INPUT__TTS__CURRENCY_VALUES).getSimpleVariable().getStringValue();
		String ttsNameFormat = mySession.getVariable(IProjectVariables.INPUT__TTS__NAME).getSimpleVariable().getStringValue();
		String ttsNameFormatValues = mySession.getVariable(IProjectVariables.INPUT__TTS__NAME_VALUES).getSimpleVariable().getStringValue();
		String ttsAddressFormat = mySession.getVariable(IProjectVariables.INPUT__TTS__ADDRESS).getSimpleVariable().getStringValue();
		String ttsAddressFormatValues = mySession.getVariable(IProjectVariables.INPUT__TTS__ADDRESS_VALUES).getSimpleVariable().getStringValue();
		String ttsTelephoneFormat = mySession.getVariable(IProjectVariables.INPUT__TTS__TELEPHONE).getSimpleVariable().getStringValue();
		String ttsTelephoneFormatValues = mySession.getVariable(IProjectVariables.INPUT__TTS__TELEPHONE_VALUES).getSimpleVariable().getStringValue();

		//These parameters are specific to More Option of the menu
		String menuOptions=mySession.getVariable(IProjectVariables.INPUT__MENU_OPTIONS).getSimpleVariable().getStringValue();
		String moreOptionFlag = mySession.getVariable(IProjectVariables.INPUT__MORE_OPTION_FLAG).getSimpleVariable().getStringValue();
		String moreOptionCount = mySession.getVariable(IProjectVariables.INPUT__MORE_OPTION_COUNT).getSimpleVariable().getStringValue();
		String moreOptionPreviousMenuFlag = mySession.getVariable(IProjectVariables.INPUT__MORE_OPTION_PREVIOUS_MENU_FLAG).getSimpleVariable().getStringValue();
		String moreOptionDTMFGrammar = mySession.getVariable(IProjectVariables.INPUT__MORE_OPTION_DTMFGRAMMAR).getSimpleVariable().getStringValue();
		String moreOptionVoiceGrammar = mySession.getVariable(IProjectVariables.INPUT__MORE_OPTION_VOICE_GRAMMAR).getSimpleVariable().getStringValue();
		String moreOptionDynamicValues = mySession.getVariable(IProjectVariables.INPUT__MORE_OPTION_DYNAMIC_VALUES).getSimpleVariable().getStringValue();
		String isAnnouncement = mySession.getVariable(IProjectVariables.INPUT__IS_ANNOUNCEMENT).getSimpleVariable().getStringValue();
		String specificSlots = mySession.getVariable(IProjectVariables.INPUT__SPECIFIC_SLOTS).getSimpleVariable().getStringValue();


		// Report Parameters
		String reportXMLEnabled = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_REPORT_XMLENABLE).getStringValue();
		String reportClassName = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_REPORT__CLASS_NAME).getStringValue();
		String reportMethodName = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_REPORT__METHOD_NAME).getStringValue();

		if(dynamicConstraintListFlag.equalsIgnoreCase(Constants.TRUE)){
			//----------Dynamic Constraint List Prompts----------
			if(dynamicConstraintListPrompts != null)
			{
				if(!Constants.DEFAULT.equalsIgnoreCase(dynamicConstraintListPrompts)){
					IVariable dynConstraintListPromptVar = mySession.getVariable(IProjectVariables.INPUT__DYNAMIC_CONSTRAINT_LIST_PROMPTS); 
					if(dynConstraintListPromptVar.isCollection()){
						dynamicConstraintListPrompts = dynConstraintListPromptVar.getSimpleVariable().getStringValue();
						while(dynConstraintListPromptVar.getCollection().hasMore()){
							dynamicConstraintListPrompts = dynamicConstraintListPrompts + "|";
							dynConstraintListPromptVar.getCollection().next();
							dynamicConstraintListPrompts = dynamicConstraintListPrompts + dynConstraintListPromptVar.getSimpleVariable().getStringValue();
						}
					}
					inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONSTRAINT_LIST_PROMPTS).setValue(dynamicConstraintListPrompts);
				}
				else
				{
					inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONSTRAINT_LIST_PROMPTS).setValue(Constants.NONE);
				}
			}
		}

		DMPropertyReader globalPropertyReader = null;
		DMPropertyReader particularPropertyreader = null;
		//Load the Global Property file
		if(!Constants.DEFAULT.equalsIgnoreCase(propertiesLocation)){
			String path = null;
			if(!Constants.DEFAULT.equalsIgnoreCase(globalPropertiesFileName)){
				globalPropertyReader = new DMPropertyReaderImpl();
				try{
					path = (new StringBuilder(String.valueOf(propertiesLocation))).append(globalPropertiesFileName).toString();
					if(mySession.isAppTraceEnabled()){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Global Property File Path :"+path);
					}
					globalPropertyReader.loadPropertiesFile(path);
					if(mySession.isAppTraceEnabled()){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " Global Property File Successfully Loaded "+path);
					}
				}
				catch (Exception e) {
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Exception accessing GlobalProperties : "+e.getMessage());
					if(mySession.isAppTraceEnabled()){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " Global Property File Not Found!!!! "+path);
					}
					globalPropertyReader = null;
				}
			}


			//to Load the particular Property file of a prompt and collect
			if(!Constants.DEFAULT.equalsIgnoreCase(particularPropertiesFileName)){
				particularPropertyreader = new DMPropertyReaderImpl();
				try{
					path = (new StringBuilder(String.valueOf(propertiesLocation))).append(particularPropertiesFileName).toString();
					if(mySession.isAppTraceEnabled()){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Particular Property File Path :"+path);
					}
					particularPropertyreader.loadPropertiesFile(path);
					if(mySession.isAppTraceEnabled()){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " Particular Property File Successfully Loaded "+path);
					}
				}
				catch (Exception e) {
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Exception accessing ParticularProperties : "+e.getMessage());
					if(mySession.isAppTraceEnabled()){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " Particular Property File Not Found!!!! "+path);
					}
					particularPropertyreader = null;
				}
			}
		}

		/*//----------propertiesLocation----------
		if (propertiesLocation.equalsIgnoreCase(Constants.DEFAULT)){
			propertiesLocation = getProperties(propertiesLocation, "propertiesLocation", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_PROPERTIES_LOCATION).setValue(propertiesLocation);*/


		//----------isAnnouncement----------
		if (isAnnouncement.equalsIgnoreCase(Constants.DEFAULT)){
			isAnnouncement = getProperties(isAnnouncement, "isAnnouncement", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_IS_ANNOUNCEMENT).setValue(isAnnouncement);

		//----------nbest----------
		if (nBest.equalsIgnoreCase(Constants.DEFAULT)){
			nBest = getProperties(nBest, "nBest", globalPropertyReader,particularPropertyreader, mySession);
			if("NONE".equalsIgnoreCase(nBest) || Constants.DEFAULT.equalsIgnoreCase(nBest)) { nBest="1"; }
		}
		mySession.getVariableField(IProjectVariables.N_BEST_VALUES_COLLECTION).setValue("");
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_N_BEST).setValue(nBest);

		//----------constraintList----------
		if (constraintList.equalsIgnoreCase(Constants.DEFAULT)){
			constraintList = getProperties(constraintList, "constraintList", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONSTRAINT_LIST).setValue(constraintList);

		//----------disallowList----------
		if (disallowList.equalsIgnoreCase(Constants.DEFAULT)){
			disallowList = getProperties(disallowList, "disallowList", globalPropertyReader,particularPropertyreader, mySession);
			//If [disallowList]="NONE" means that we should not check for disallow values 
			if(Constants.DEFAULT.equalsIgnoreCase(disallowList)) { disallowList=""; }
		}
		mySession.getVariableField(IProjectVariables.DISALLOW_COLLECTION).setValue(disallowList);
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DISALLOW_LIST).setValue(disallowList);

		//----------privateData----------
		if (privateData.equalsIgnoreCase(Constants.DEFAULT)){
			privateData = getProperties(privateData, "privateData", globalPropertyReader,particularPropertyreader, mySession);
			/*if ((!("true".equalsIgnoreCase(privateData)))&&(!("false".equalsIgnoreCase(privateData)))) { 
				privateData="false"; 
			}*/
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Private Data Value : "+ privateData);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_PRIVATE_DATA).setValue(privateData);
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Private Data Value : "+ 	inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_PRIVATE_DATA).getStringValue());

		//----------reportEnabled----------
		if (reportEnabled.equalsIgnoreCase(Constants.DEFAULT)){
			reportEnabled = getProperties(reportEnabled, "reportEnabled", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_REPORT_ENABLED).setValue(reportEnabled);

		//----------menu ID----------
		if (menuID.equalsIgnoreCase(Constants.DEFAULT)){
			menuID = getProperties(menuID, "menuID", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MENU_ID).setValue(menuID);

		//----------Announce ID----------
		if (announceID.equalsIgnoreCase(Constants.DEFAULT)){
			announceID = getProperties(announceID, "announceID", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_ANNOUNCE_ID).setValue(announceID);

		//----------grammarLocation----------
		if (grammarLocation.equalsIgnoreCase(Constants.DEFAULT)){
			grammarLocation = getProperties(grammarLocation, "grammarLocation", globalPropertyReader,particularPropertyreader, mySession);
		}
		//---------- VALIDATE URL ----------
		grammarLocation = checkFormatURL(grammarLocation,mySession);
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_GRAMMAR_LOCATION).setValue(grammarLocation);

		//----------audioLocation----------
		if (audioLocation.equalsIgnoreCase(Constants.DEFAULT)){
			audioLocation = getProperties(audioLocation, "customAudioLocation", globalPropertyReader,particularPropertyreader, mySession);
		}
		//---------- VALIDATE URL ----------
		audioLocation = checkFormatURL(audioLocation,mySession);
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_AUDIO_LOCATION).setValue(audioLocation);

		//----------standardAudioLocation----------
		if (standardAudioLocation.equalsIgnoreCase(Constants.DEFAULT)){
			standardAudioLocation = getProperties(standardAudioLocation, "standardAudioLocation", globalPropertyReader,particularPropertyreader, mySession);
		}
		//---------- VALIDATE URL ----------
		standardAudioLocation = checkFormatURL(standardAudioLocation,mySession);
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_STANDARD_AUDIO_LOCATION).setValue(standardAudioLocation);

		//----------confirmationDtmfGrammar----------
		if (confirmationDtmfGrammar.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationDtmfGrammar = getProperties(confirmationDtmfGrammar, "confirmationDtmfGrammar", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_DTMF_GRAMMAR).setValue(confirmationDtmfGrammar);

		//----------dtmfGlobalGrammar----------
		if (dtmfGlobalGrammar.equalsIgnoreCase(Constants.DEFAULT)){
			dtmfGlobalGrammar = getProperties(dtmfGlobalGrammar, "dtmfGlobalGrammar", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DTMF_GLOBAL_GRAMMAR).setValue(dtmfGlobalGrammar);

		//----------Built In Grammar----------
		if (builtInGrammar.equalsIgnoreCase(Constants.DEFAULT)){
			builtInGrammar = getProperties(builtInGrammar, "builtInGrammar", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_BUILT_IN_GRAMMAR).setValue(builtInGrammar);

		//----------Built In Grammar Flag----------
		if (builtInGrammarFlag.equalsIgnoreCase(Constants.DEFAULT)){
			builtInGrammarFlag = getProperties(builtInGrammarFlag, "builtInGrammarFlag", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_BUILT_IN_GRAMMAR_FLAG).setValue(builtInGrammarFlag);

		//----------confirmationSpeechGramamr----------
		if (confirmationSpeechGramamr.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationSpeechGramamr = getProperties(confirmationSpeechGramamr, "confirmationVoiceGrammar", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_VOICE_GRAMMAR).setValue(confirmationSpeechGramamr);

		//----------speechGlobalGrammar----------
		if (speechGlobalGrammar.equalsIgnoreCase(Constants.DEFAULT)){
			speechGlobalGrammar = getProperties(speechGlobalGrammar, "voiceGlobalGrammar", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_VOICE_GLOBAL_GRAMMAR).setValue(speechGlobalGrammar);;


		//----------Consecutive number check flag----------
		String checkConsecutive = Constants.DEFAULT;
		checkConsecutive=getProperties(checkConsecutive, "checkConsecutive", globalPropertyReader,particularPropertyreader, mySession);

		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CHECK_CONSECUTIVE_FLAG).setValue(checkConsecutive);


		//----------voiceGrammar----------
		if (speechGrammar.equalsIgnoreCase(Constants.DEFAULT)){
			speechGrammar = getProperties(speechGrammar, "voiceGrammar", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_VOICE_GRAMMAR).setValue(speechGrammar);
		}else{
			IVariable speechGrammarTemp = mySession.getVariable(IProjectVariables.INPUT__VOICE_GRAMMAR);
			if (speechGrammarTemp.isCollection()){
				speechGrammar = speechGrammarTemp.getSimpleVariable().getStringValue();
				while (speechGrammarTemp.getCollection().hasMore()){
					speechGrammar = speechGrammar + "|";
					speechGrammarTemp.getCollection().next();
					speechGrammar = speechGrammar + speechGrammarTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_VOICE_GRAMMAR).setValue(speechGrammar);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_VOICE_GRAMMAR).setValue(speechGrammar);
			}
		}

		//----------dtmfGrammar----------
		if (dtmfGrammar.equalsIgnoreCase(Constants.DEFAULT)){
			dtmfGrammar = getProperties(dtmfGrammar, "dtmfGrammar", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DTMF_GRAMMAR).setValue(dtmfGrammar);
		}else{
			IVariable dtmfGrammarTemp = mySession.getVariable(IProjectVariables.INPUT__DTMF_GRAMMAR);
			if (dtmfGrammarTemp.isCollection()){
				dtmfGrammar = dtmfGrammarTemp.getSimpleVariable().getStringValue();
				while (dtmfGrammarTemp.getCollection().hasMore()){
					dtmfGrammar = dtmfGrammar + "|";
					dtmfGrammarTemp.getCollection().next();
					dtmfGrammar = dtmfGrammar + dtmfGrammarTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DTMF_GRAMMAR).setValue(dtmfGrammar);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DTMF_GRAMMAR).setValue(dtmfGrammar);
			}
		}        

		//----------dtmfGrammarsUseSlots----------
		if (dtmfGrammarsUseSlots.equalsIgnoreCase(Constants.DEFAULT)){
			dtmfGrammarsUseSlots = getProperties(dtmfGrammarsUseSlots, "dtmfGrammarsUseSlots", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DTMF_GRAMMARS_USE_SLOTS).setValue(dtmfGrammarsUseSlots);




		//----------confirmationDefaultPrompt----------

		if (confirmationDefaultPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationDefaultPrompt = getProperties(confirmationDefaultPrompt, "confirmationInitialPrompt", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_DEFAULT_PROMPT).setValue(confirmationDefaultPrompt);
		}else{
			IVariable confirmationDefaultPromptTemp = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_INITIAL_PROMPT);
			if (confirmationDefaultPromptTemp.isCollection()){
				confirmationDefaultPrompt = confirmationDefaultPromptTemp.getSimpleVariable().getStringValue();
				while (confirmationDefaultPromptTemp.getCollection().hasMore()){
					confirmationDefaultPrompt = confirmationDefaultPrompt + "|";
					confirmationDefaultPromptTemp.getCollection().next();
					confirmationDefaultPrompt = confirmationDefaultPrompt + confirmationDefaultPromptTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_DEFAULT_PROMPT).setValue(confirmationDefaultPrompt);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_DEFAULT_PROMPT).setValue(confirmationDefaultPrompt);
			}
		}

		//----------confirmationSpecificPrompt----------

		if (confirmationSpecificPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationSpecificPrompt = getProperties(confirmationSpecificPrompt, "confirmationSpecificPrompt", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_SPECIFIC_PROMPT).setValue(confirmationSpecificPrompt);
		}else{
			IVariable confirmationSpecificPromptTemp = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_SPECIFIC_PROMPT);
			if (confirmationSpecificPromptTemp.isCollection()){
				confirmationSpecificPrompt = confirmationSpecificPromptTemp.getSimpleVariable().getStringValue();
				while (confirmationSpecificPromptTemp.getCollection().hasMore()){
					confirmationSpecificPrompt = confirmationSpecificPrompt + "|";
					confirmationSpecificPromptTemp.getCollection().next();
					confirmationSpecificPrompt = confirmationSpecificPrompt + confirmationSpecificPromptTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_SPECIFIC_PROMPT).setValue(confirmationSpecificPrompt);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_SPECIFIC_PROMPT).setValue(confirmationSpecificPrompt);
			}
		}

		//----------confirmationNoMatchPrompt----------

		if (confirmationNoMatchPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationNoMatchPrompt = getProperties(confirmationNoMatchPrompt, "confirmationNoMatchPrompt", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_NO_MATCH_PROMPT).setValue(confirmationNoMatchPrompt);
		}else{
			IVariable confirmationNoMatchPromptTemp = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_NO_MATCH_PROMPT);
			if (confirmationNoMatchPromptTemp.isCollection()){
				confirmationNoMatchPrompt = confirmationNoMatchPromptTemp.getSimpleVariable().getStringValue();
				while (confirmationNoMatchPromptTemp.getCollection().hasMore()){
					confirmationNoMatchPrompt = confirmationNoMatchPrompt + "|";
					confirmationNoMatchPromptTemp.getCollection().next();
					confirmationNoMatchPrompt = confirmationNoMatchPrompt + confirmationNoMatchPromptTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_NO_MATCH_PROMPT).setValue(confirmationNoMatchPrompt);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_NO_MATCH_PROMPT).setValue(confirmationNoMatchPrompt);
			}
		}    


		//----------confirmationNoInputPrompt----------

		if (confirmationNoInputPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationNoInputPrompt = getProperties(confirmationNoInputPrompt, "confirmationNoInputPrompt", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_NO_INPUT_PROMPT).setValue(confirmationNoInputPrompt);
		}else{
			IVariable confirmationNoInputPromptTemp = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_NO_INPUT_PROMPT);
			if (confirmationNoInputPromptTemp.isCollection()){
				confirmationNoInputPrompt = confirmationNoInputPromptTemp.getSimpleVariable().getStringValue();
				while (confirmationNoInputPromptTemp.getCollection().hasMore()){
					confirmationNoInputPrompt = confirmationNoInputPrompt + "|";
					confirmationNoInputPromptTemp.getCollection().next();
					confirmationNoInputPrompt = confirmationNoInputPrompt + confirmationNoInputPromptTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_NO_INPUT_PROMPT).setValue(confirmationNoInputPrompt);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_NO_INPUT_PROMPT).setValue(confirmationNoInputPrompt);
			}
		}

		//----------confirmationMaxCount----------
		if (confirmationMaxCount.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationMaxCount = getProperties(confirmationMaxCount, "confirmationMaxCount", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_MAX_COUNT).setValue(confirmationMaxCount);

		//----------confirmationLimitPrompt----------
		if (confirmationLimitPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationLimitPrompt = getProperties(confirmationLimitPrompt, "confirmationMaxTryPrompt", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_LIMIT_PROMPT).setValue(confirmationLimitPrompt);

		//----------confirmationValueFlag----------
		if (confirmationValueFlag.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationValueFlag = getProperties(confirmationValueFlag, "confirmationValueFlag", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_VALUE_FLAG).setValue(confirmationValueFlag);

		//----------confirmationReprompt----------

		if (confirmationRePrompt.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationRePrompt = getProperties(confirmationRePrompt, "confirmationReprompt", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_REPROMPT).setValue(confirmationRePrompt);
		}else{
			IVariable confirmationRepromptTemp = mySession.getVariable(IProjectVariables.INPUT__CONFIRMATION_REPROMPT);
			if (confirmationRepromptTemp.isCollection()){
				confirmationRePrompt = confirmationRepromptTemp.getSimpleVariable().getStringValue();
				while (confirmationRepromptTemp.getCollection().hasMore()){
					confirmationRePrompt = confirmationRePrompt + "|";
					confirmationRepromptTemp.getCollection().next();
					confirmationRePrompt = confirmationRePrompt + confirmationRepromptTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_REPROMPT).setValue(confirmationRePrompt);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_REPROMPT).setValue(confirmationRePrompt);
			}
		}

		//----------noAnswerMaxCount----------
		if (noAnswerMaxCount.equalsIgnoreCase(Constants.DEFAULT)){
			noAnswerMaxCount = getProperties(noAnswerMaxCount, "confirmationDeniedMaxCount", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_ANSWER_MAX_COUNT).setValue(noAnswerMaxCount);

		//----------noAnswerLimitPrompt----------
		if (noAnswerLimitPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			noAnswerLimitPrompt = getProperties(noAnswerLimitPrompt, "confirmationDeniedMaxTryPrompt", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_ANSWER_LIMIT_PROMPT).setValue(noAnswerLimitPrompt);

		//----------helpPrompt----------
		if (helpPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			helpPrompt = getProperties(helpPrompt, "helpPrompt", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_HELP_PROMPT).setValue(helpPrompt);

		//----------globalPrompt----------
		if (globalPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			globalPrompt = getProperties(globalPrompt, "globalPrompt", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_GLOBAL_PROMPT).setValue(globalPrompt);
		//----------initialPrompt----------
		if (initialPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			initialPrompt = getProperties(initialPrompt, "initialPrompt", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
		}else{
			IVariable initialPromptTemp = mySession.getVariable(IProjectVariables.INPUT__INITIAL_PROMPT);
			if (initialPromptTemp.isCollection()){
				initialPrompt = initialPromptTemp.getSimpleVariable().getStringValue();
				while (initialPromptTemp.getCollection().hasMore()){
					initialPrompt = initialPrompt + "|";
					initialPromptTemp.getCollection().next();
					initialPrompt = initialPrompt + initialPromptTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			}
		}

		//----------reEntry----------
		if (reEntry.equalsIgnoreCase(Constants.DEFAULT)){
			reEntry = getProperties(reEntry, "reEntry", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_RE_ENTRY).setValue(reEntry);

		//----------recordUtterance----------
		if (recordUtterance.equalsIgnoreCase(Constants.DEFAULT)){
			recordUtterance = getProperties(recordUtterance, "recordUtterance", globalPropertyReader,particularPropertyreader, mySession);
		}
		if (!"true".equalsIgnoreCase(recordUtterance)){
			recordUtterance = "false";
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_RECORD_UTTERANCE).setValue(recordUtterance);


		//----------language----------
		if (language.equalsIgnoreCase(Constants.DEFAULT)){
			language = getProperties(language, "language", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_LANGUAGE).setValue(language);


		//----------rePromptNoInput----------

		if (rePromptNoInput.equalsIgnoreCase(Constants.DEFAULT)){
			rePromptNoInput = getProperties(rePromptNoInput, "rePromptNoInput", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_RE_PROMPT_NO_INPUT).setValue(rePromptNoInput);
		}else{
			IVariable rePromptNoInputTemp = mySession.getVariable(IProjectVariables.INPUT__RE_PROMPT_NO_INPUT);
			if (rePromptNoInputTemp.isCollection()){
				rePromptNoInput = rePromptNoInputTemp.getSimpleVariable().getStringValue();
				while (rePromptNoInputTemp.getCollection().hasMore()){
					rePromptNoInput = rePromptNoInput + "|";
					rePromptNoInputTemp.getCollection().next();
					rePromptNoInput = rePromptNoInput + rePromptNoInputTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_RE_PROMPT_NO_INPUT).setValue(rePromptNoInput);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_RE_PROMPT_NO_INPUT).setValue(rePromptNoInput);
			}
		}

		//----------rePromptNoMatch----------

		if (rePromptNoMatch.equalsIgnoreCase(Constants.DEFAULT)){
			rePromptNoMatch = getProperties(rePromptNoMatch, "rePromptNoMatch", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_RE_PROMPT_NO_MATCH).setValue(rePromptNoMatch);
		}else{
			IVariable rePromptNoMatchTemp = mySession.getVariable(IProjectVariables.INPUT__RE_PROMPT_NO_MATCH);
			if (rePromptNoMatchTemp.isCollection()){
				rePromptNoMatch = rePromptNoMatchTemp.getSimpleVariable().getStringValue();
				while (rePromptNoMatchTemp.getCollection().hasMore()){
					rePromptNoMatch = rePromptNoMatch + "|";
					rePromptNoMatchTemp.getCollection().next();
					rePromptNoMatch = rePromptNoMatch + rePromptNoMatchTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_RE_PROMPT_NO_MATCH).setValue(rePromptNoMatch);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_RE_PROMPT_NO_MATCH).setValue(rePromptNoMatch);
			}
		}

		//----------noInputPrompt----------

		if (noInputPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			noInputPrompt = getProperties(noInputPrompt, "noInputPrompt", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_INPUT_PROMPT).setValue(noInputPrompt);
		}else{
			IVariable noInputPromptTemp = mySession.getVariable(IProjectVariables.INPUT__NO_INPUT_PROMPT);
			if (noInputPromptTemp.isCollection()){
				noInputPrompt = noInputPromptTemp.getSimpleVariable().getStringValue();
				while (noInputPromptTemp.getCollection().hasMore()){
					noInputPrompt = noInputPrompt + "|";
					noInputPromptTemp.getCollection().next();
					noInputPrompt = noInputPrompt + noInputPromptTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_INPUT_PROMPT).setValue(noInputPrompt);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_INPUT_PROMPT).setValue(noInputPrompt);
			}
		}


		//----------noInputLimitPrompt----------
		if (noInputLimitPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			noInputLimitPrompt = getProperties(noInputLimitPrompt, "noInputMaxTryPrompt", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_INPUT_LIMIT_PROMPT).setValue(noInputLimitPrompt);

		//----------noMatchPrompt----------
		if (noMatchPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			noMatchPrompt = getProperties(noMatchPrompt, "noMatchPrompt", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_MATCH_PROMPT).setValue(noMatchPrompt);
		}else{
			IVariable noMatchPromptTemp = mySession.getVariable(IProjectVariables.INPUT__NO_MATCH_PROMPT);
			if (noMatchPromptTemp.isCollection()){
				noMatchPrompt = noMatchPromptTemp.getSimpleVariable().getStringValue();
				while (noMatchPromptTemp.getCollection().hasMore()){
					noMatchPrompt = noMatchPrompt + "|";
					noMatchPromptTemp.getCollection().next();
					noMatchPrompt = noMatchPrompt + noMatchPromptTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_MATCH_PROMPT).setValue(noMatchPrompt);
			}else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_MATCH_PROMPT).setValue(noMatchPrompt);
			}
		}


		//----------noMatchLimitPrompt----------
		if (noMatchLimitPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			noMatchLimitPrompt = getProperties(noMatchLimitPrompt, "noMatchMaxTryPrompt", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_MATCH_LIMIT_PROMPT).setValue(noMatchLimitPrompt);

		//----------successPrompt----------
		if (successPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			successPrompt = getProperties(successPrompt, "successPrompt", globalPropertyReader,particularPropertyreader, mySession);
			inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_SUCCESS_PROMPT).setValue(successPrompt);
		}else{
			IVariable successPromptTemp = mySession.getVariable(IProjectVariables.INPUT__SUCCESS_PROMPT);
			if (successPromptTemp.isCollection()){
				successPrompt = successPromptTemp.getSimpleVariable().getStringValue();
				while (successPromptTemp.getCollection().hasMore()){
					successPrompt = successPrompt + "|";
					successPromptTemp.getCollection().next();
					successPrompt = successPrompt + successPromptTemp.getSimpleVariable().getStringValue();
				}
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_SUCCESS_PROMPT).setValue(successPrompt);
			}
			else{
				inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_SUCCESS_PROMPT).setValue(successPrompt);
			}
		}

		//----------successPromptOnlyForConfirmation----------
		if (successPromptOnlyForConfirmation.equalsIgnoreCase(Constants.DEFAULT)){
			successPromptOnlyForConfirmation = getProperties(successPromptOnlyForConfirmation, "successPromptOnlyForConfirmation", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_SUCCESS_PROMPT_ONLY_FOR_CONFIRMATION).setValue(successPromptOnlyForConfirmation);


		//----------noAnswerApologies----------
		if (noAnswerApologies.equalsIgnoreCase(Constants.DEFAULT)){
			noAnswerApologies = getProperties(noAnswerApologies, "confirmationDeniedApology", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_ANSWER_APOLOGIES).setValue(noAnswerApologies);

		//---------loggingEnabled---------
		if (loggingEnabled.equalsIgnoreCase(Constants.DEFAULT)){
			loggingEnabled = getProperties(loggingEnabled, "loggingEnabled", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_LOGGING_ENABLED).setValue(loggingEnabled);

		//----------loggerName----------
		if (loggerName.equalsIgnoreCase(Constants.DEFAULT)){
			loggerName = getProperties(loggerName, "loggerName", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_LOGGER_NAME).setValue(loggerName);

		//----------confirmationMode----------
		if (confirmationMode.equalsIgnoreCase(Constants.DEFAULT)){
			confirmationMode = getProperties(confirmationMode, "confirmationMode", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CONFIRMATION_MODE).setValue(confirmationMode);

		//----------globalProperties----------
		if (globalPropertiesFileName.equalsIgnoreCase(Constants.DEFAULT)){
			globalPropertiesFileName = getProperties(globalPropertiesFileName, "globalProperties", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_GLOBAL_PROPERTIES).setValue(globalPropertiesFileName);

		//----------highConfidenceLevel----------
		if (highConfidenceLevel.equalsIgnoreCase(Constants.DEFAULT)){
			highConfidenceLevel = getProperties(highConfidenceLevel, "highConfidenceLevel", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_HIGH_CONFIDENCE_LEVEL).setValue(highConfidenceLevel);

		//----------interdigitTimeout----------
		if (interdigitTimeout.equalsIgnoreCase(Constants.DEFAULT)){
			interdigitTimeout = getProperties(interdigitTimeout, "interdigitTimeout", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_INTERDIGIT_TIMEOUT).setValue(interdigitTimeout);

		//----------terminatingTimeout----------
		if (terminatingTimeout.equalsIgnoreCase(Constants.DEFAULT)){
			terminatingTimeout = getProperties(terminatingTimeout, "terminatingTimeout", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TERMINATING_TIMEOUT).setValue(terminatingTimeout);

		//----------completeTimeout----------
		if (completeTimeout.equalsIgnoreCase(Constants.DEFAULT)){
			completeTimeout = getProperties(completeTimeout, "completeTimeout", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_COMPLETE_TIMEOUT).setValue(completeTimeout);

		//----------incompleteTimeout----------
		if (incompleteTimeout.equalsIgnoreCase(Constants.DEFAULT)){
			incompleteTimeout = getProperties(incompleteTimeout, "incompleteTimeout", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_INCOMPLETE_TIMEOUT).setValue(incompleteTimeout);


		//----------lowConfidenceLevel----------
		if (lowConfidenceLevel.equalsIgnoreCase(Constants.DEFAULT)){
			lowConfidenceLevel = getProperties(lowConfidenceLevel, "lowConfidenceLevel", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_LOW_CONFIDENCE_LEVEL).setValue(lowConfidenceLevel);

		//----------maxNoInputCount----------
		if (maxNoInput.equalsIgnoreCase(Constants.DEFAULT)){
			maxNoInput = getProperties(maxNoInput, "maxNoInputCount", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MAX_NO_INPUT_COUNT).setValue(maxNoInput);

		//----------maxNoMatchCount----------
		if (maxNoMatch.equalsIgnoreCase(Constants.DEFAULT)){
			maxNoMatch = getProperties(maxNoMatch, "maxNoMatchCount", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MAX_NO_MATCH_COUNT).setValue(maxNoMatch);

		//----------mediaTypeVoice----------
		if (mediaTypeVoice.equalsIgnoreCase(Constants.DEFAULT)){
			mediaTypeVoice = getProperties(mediaTypeVoice, "mediaTypeVoice", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MEDIA_TYPE_VOICE).setValue(mediaTypeVoice);

		//----------mediaTypeDTMF----------
		if (mediaTypeDTMF.equalsIgnoreCase(Constants.DEFAULT)){
			mediaTypeDTMF = getProperties(mediaTypeDTMF, "mediaTypeDTMF", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MEDIA_TYPE_DTMF).setValue(mediaTypeDTMF);

		//----------propertiesFile----------
		if (particularPropertiesFileName.equalsIgnoreCase(Constants.DEFAULT)){
			particularPropertiesFileName = getProperties(particularPropertiesFileName, "propertiesFile", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_PROPERTIES_FILE).setValue(particularPropertiesFileName);

		//----------timeout----------
		if (timeout.equalsIgnoreCase(Constants.DEFAULT)){
			timeout = getProperties(timeout, "initialTimeout", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TIMEOUT).setValue(timeout);

		//----------bargeIn----------
		if (bargeIn.equalsIgnoreCase(Constants.DEFAULT)){
			bargeIn = getProperties(bargeIn, "bargeIn", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_BARGE_IN).setValue(bargeIn);


		//----------bargeIn----------
		if (bargeInType.equalsIgnoreCase(Constants.DEFAULT)){
			bargeInType = getProperties(bargeIn, "bargeInType", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_BARGE_IN_TYPE).setValue(bargeInType);

		//----------uniqueCounter----------
		if (NINMCounter.equalsIgnoreCase(Constants.DEFAULT)){
			NINMCounter = getProperties(NINMCounter, "NINMCounter", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NINMCOUNTER).setValue(NINMCounter);

		//----------uniqueCounter for More and Previous NINM----------
		if (NINMCommonCounterFlag.equalsIgnoreCase(Constants.DEFAULT)){
			NINMCommonCounterFlag = getProperties(NINMCommonCounterFlag, "NINMCommonCounterFlag", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NINMCOMMON_COUNTER_FLAG).setValue(NINMCommonCounterFlag);

		//----------noMatchRandom----------
		if (noMatchRandom.equalsIgnoreCase(Constants.DEFAULT)){
			noMatchRandom = getProperties(noMatchRandom, "noMatchRandom", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_MATCH_RANDOM).setValue(noMatchRandom);

		//----------noInputRandom----------
		if (noInputRandom.equalsIgnoreCase(Constants.DEFAULT)){
			noInputRandom = getProperties(noInputRandom, "noInputRandom", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_INPUT_RANDOM).setValue(noInputRandom);

		//----------noAnswerApologiesRandom----------
		if (noAnswerApologiesRandom.equalsIgnoreCase(Constants.DEFAULT)){
			noAnswerApologiesRandom = getProperties(noAnswerApologiesRandom, "confirmationDeniedApologyRandom", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NO_ANSWER_APOLOGIES_RANDOM).setValue(noAnswerApologiesRandom);

		//----------manageRepeat----------
		if (manageRepeat.equalsIgnoreCase(Constants.DEFAULT)){
			manageRepeat = getProperties(manageRepeat, "manageRepeat", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MANAGE_REPEAT).setValue(manageRepeat);

		//----------repeatCount----------
		if (repeatCount.equalsIgnoreCase(Constants.DEFAULT)){
			repeatCount = getProperties(repeatCount, "repeatCount", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_REPEAT_COUNT).setValue(repeatCount);

		//----------repeat Initial Prompt----------
		if (repeatPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			repeatPrompt = getProperties(repeatPrompt, "repeatPrompt", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_REPEAT_PROMPT).setValue(repeatPrompt);

		//----------repeat Maximum Try Prompt----------
		if (repeatMaxTryPrompt.equalsIgnoreCase(Constants.DEFAULT)){
			repeatMaxTryPrompt = getProperties(repeatMaxTryPrompt, "repeatMaxTryPrompt", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_REPEAT_MAX_TRY_PROMPT).setValue(repeatMaxTryPrompt);

		//----------reportXMLEnable----------
		if (reportXMLEnabled.equalsIgnoreCase(Constants.DEFAULT)){
			reportXMLEnabled = getProperties(reportXMLEnabled, "reportXMLEnable", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_REPORT_XMLENABLE).setValue(reportXMLEnabled);

		//----------reportClassName----------
		if (reportClassName.equalsIgnoreCase(Constants.DEFAULT)){
			reportClassName = getProperties(reportClassName, "reportClassName", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_REPORT__CLASS_NAME).setValue(reportClassName);

		//----------reportMethodName----------
		if (reportMethodName.equalsIgnoreCase(Constants.DEFAULT)){
			reportMethodName = getProperties(reportMethodName, "reportMethodName", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_REPORT__METHOD_NAME).setValue(reportMethodName);



		//----------terminatingChar----------
		if (terminatingChar.equalsIgnoreCase(Constants.DEFAULT)){
			terminatingChar = getProperties(terminatingChar, "terminatingChar", globalPropertyReader,particularPropertyreader, mySession);
			if (("NONE".equalsIgnoreCase(terminatingChar))||(Constants.DEFAULT.equalsIgnoreCase(terminatingChar))){
				terminatingChar = "#";
			}
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TERMINATING_CHAR).setValue(terminatingChar);

		//----------dialogName----------
		if (dialogName.equalsIgnoreCase(Constants.DEFAULT)){
			dialogName = getProperties(dialogName, "dialogName", globalPropertyReader,particularPropertyreader, mySession);
			if (("NONE".equalsIgnoreCase(dialogName))||(Constants.DEFAULT.equalsIgnoreCase(dialogName))){
				dialogName = "ERROR";
				if(mySession.isAppTraceEnabled()){
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "------------------------INPUT PARAMETERS RESULT------------------------");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "-           ERROR: property  *dialogName*  cannot be empty!           -");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "-----------------------------------------------------------------------");
				}
			}
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DIALOG_NAME).setValue(dialogName);

		//numberType Format 
		if (ssNumberFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ssNumberFormat = getProperties(ssNumberFormat, "ss_Number", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NUMBER_FORMAT).setValue(ssNumberFormat);

		//numberType Format Values
		if (ssNumberFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ssNumberFormatValues = getProperties(ssNumberFormatValues, "ss_NumberValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_NUMBER_FORMAT_VALUES).setValue(ssNumberFormatValues);


		//Digits Format 
		if (ssDigitsFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ssDigitsFormat = getProperties(ssDigitsFormat, "ss_Digits", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DIGITS_FORMAT).setValue(ssDigitsFormat);

		//Digits Format Values
		if (ssDigitsFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ssDigitsFormatValues = getProperties(ssDigitsFormatValues, "ss_DigitsValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DIGITS_FORMAT_VALUES).setValue(ssDigitsFormatValues);


		//Date Format 
		if (ssDateFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ssDateFormat = getProperties(ssDateFormat, "ss_Date", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DATE_FORMAT).setValue(ssDateFormat);

		//Digits Format Values
		if (ssDateFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ssDateFormatValues = getProperties(ssDateFormatValues, "ss_DateValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DATE_FORMAT_VALUES).setValue(ssDateFormatValues);


		//Time Format 
		if (ssTimeFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ssTimeFormat = getProperties(ssTimeFormat, "ss_Time", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TIME_FORMAT).setValue(ssTimeFormat);

		//Time Format Values
		if (ssTimeFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ssTimeFormatValues = getProperties(ssTimeFormatValues, "ss_TimeValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TIME_FORMAT_VALUES).setValue(ssTimeFormatValues);


		//Currency Format 
		if (ssCurrencyFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ssCurrencyFormat = getProperties(ssCurrencyFormat, "ss_Currency", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CURRENCY_FORMAT).setValue(ssCurrencyFormat);

		//Currency Format Values
		if (ssCurrencyFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ssCurrencyFormatValues = getProperties(ssCurrencyFormatValues, "ss_CurrencyValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_CURRENCY_FORMAT_VALUES).setValue(ssCurrencyFormatValues);

		//TTS Number  Format 
		if (ttsNumberFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ttsNumberFormat = getProperties(ttsNumberFormat, "tts_Number", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_NUMBER_FORMAT).setValue(ttsNumberFormat);

		//TTS NUMBER Format Values
		if (ttsNumberFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ttsNumberFormatValues = getProperties(ttsNumberFormatValues, "tts_NumberValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_NUMBER_FORMAT_VALUES).setValue(ttsNumberFormatValues);


		//TTS Digits  Format 
		if (ttsDigitsFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ttsDigitsFormat = getProperties(ttsDigitsFormat, "tts_Digits", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_DIGITS_FORMAT).setValue(ttsDigitsFormat);

		//TTS Digits Format Values
		if (ttsDigitsFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ttsDigitsFormatValues = getProperties(ttsDigitsFormatValues, "tts_DigitsValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_DIGITS_FORMAT_VALUES).setValue(ttsDigitsFormatValues);


		//TTS Date  Format 
		if (ttsDateFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ttsDateFormat = getProperties(ttsDateFormat, "tts_Date", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_DATE_FORMAT).setValue(ttsDateFormat);

		//TTS Date Format Values
		if (ttsDateFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ttsDateFormatValues = getProperties(ttsDateFormatValues, "tts_DateValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_DATE_FORMAT_VALUES).setValue(ttsDateFormatValues);


		//TTS Time  Format 
		if (ttsTimeFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ttsTimeFormat = getProperties(ttsTimeFormat, "tts_Time", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_TIME_FORMAT).setValue(ttsTimeFormat);

		//TTS Time Format Values
		if (ttsTimeFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ttsTimeFormatValues = getProperties(ttsTimeFormatValues, "tts_TimeValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_TIME_FORMAT_VALUES).setValue(ttsTimeFormatValues);


		//TTS Currency  Format 
		if (ttsCurrencyFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ttsCurrencyFormat = getProperties(ttsCurrencyFormat, "tts_Currency", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_CURRENCY_FORMAT).setValue(ttsCurrencyFormat);

		//TTS Currency Format Values
		if (ttsCurrencyFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ttsCurrencyFormatValues = getProperties(ttsCurrencyFormatValues, "tts_CurrencyValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_CURRENCY_FORMAT_VALUES).setValue(ttsCurrencyFormatValues);


		//TTS Name  Format 
		if (ttsNameFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ttsNameFormat = getProperties(ttsNameFormat, "tts_Name", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_NAME_FORMAT).setValue(ttsNameFormat);

		//TTS Name Format Values
		if (ttsNameFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ttsNameFormatValues = getProperties(ttsNameFormatValues, "tts_NameValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_NAME_FORMAT_VALUES).setValue(ttsNameFormatValues);


		//TTS Address  Format 
		if (ttsAddressFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ttsAddressFormat = getProperties(ttsAddressFormat, "tts_Address", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_ADDRESS_FORMAT).setValue(ttsAddressFormat);

		//TTS Address Format Values
		if (ttsAddressFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ttsAddressFormatValues = getProperties(ttsAddressFormatValues, "tts_AddressValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_ADDRESS_FORMAT_VALUES).setValue(ttsAddressFormatValues);


		//TTS Telephone  Format 
		if (ttsTelephoneFormat.equalsIgnoreCase(Constants.DEFAULT)){
			ttsTelephoneFormat = getProperties(ttsTelephoneFormat, "tts_Telephone", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_TELEPHONE_FORMAT).setValue(ttsTelephoneFormat);

		//TTS Telephone Format Values
		if (ttsTelephoneFormatValues.equalsIgnoreCase(Constants.DEFAULT)){
			ttsTelephoneFormatValues = getProperties(ttsTelephoneFormatValues, "tts_TelephoneValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_TTS_TELEPHONE_FORMAT_VALUES).setValue(ttsTelephoneFormatValues);


		//More Option Parameters
		if (menuOptions.equalsIgnoreCase(Constants.DEFAULT)){
			menuOptions = getProperties(menuOptions, "menuOptions", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MENU_OPTIONS).setValue(menuOptions);

		if (moreOptionFlag.equalsIgnoreCase(Constants.DEFAULT)){
			moreOptionFlag = getProperties(moreOptionFlag, "moreOptionFlag", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_FLAG).setValue(moreOptionFlag);


		if (moreOptionCount.equalsIgnoreCase(Constants.DEFAULT)){
			moreOptionCount = getProperties(moreOptionCount, "moreOptionCount", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_COUNT).setValue(moreOptionCount);


		if (moreOptionPreviousMenuFlag.equalsIgnoreCase(Constants.DEFAULT)){
			moreOptionPreviousMenuFlag = getProperties(moreOptionPreviousMenuFlag, "moreOptionPreviousMenuFlag", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_PREVIOUS_MENU_FLAG).setValue(moreOptionPreviousMenuFlag);


		if (moreOptionDTMFGrammar.equalsIgnoreCase(Constants.DEFAULT)){
			moreOptionDTMFGrammar = getProperties(moreOptionDTMFGrammar, "moreOptionDTMFGrammar", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_DTMFGRAMMAR).setValue(moreOptionDTMFGrammar);


		if (moreOptionVoiceGrammar.equalsIgnoreCase(Constants.DEFAULT)){
			moreOptionVoiceGrammar = getProperties(moreOptionVoiceGrammar, "moreOptionVoiceGrammar", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_VOICE_GRAMMAR).setValue(moreOptionVoiceGrammar);


		if (moreOptionDynamicValues.equalsIgnoreCase(Constants.DEFAULT)){
			moreOptionDynamicValues = getProperties(moreOptionDynamicValues, "moreOptionDynamicValues", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_DYNAMIC_VALUES).setValue(moreOptionDynamicValues);


		// One Time Flag
		if (oneTimeFlag.equalsIgnoreCase(Constants.DEFAULT)){
			oneTimeFlag = getProperties(oneTimeFlag, "oneTimeFlag", globalPropertyReader,particularPropertyreader, mySession);
		}
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "One time flag : "+oneTimeFlag);
		mySession.getVariable(IProjectVariables.INPUT__ONE_TIME_FLAG).getSimpleVariable().setValue(oneTimeFlag);



		// isDTMF
		if (isDTMF.equalsIgnoreCase(Constants.DEFAULT)){
			isDTMF = getProperties(isDTMF, "isDTMF", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_IS_DTMF).setValue(isDTMF);


		// specificSlots
		if (specificSlots.equalsIgnoreCase(Constants.DEFAULT)){
			specificSlots = getProperties(specificSlots, "specificSlots", globalPropertyReader,particularPropertyreader, mySession);
		}
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_SPECIFIC_SLOTS).setValue(specificSlots);

		//Transaction audio
		String isTransactionAction = getProperties(Constants.DEFAULT, "isTransactionActionAudio", globalPropertyReader,particularPropertyreader, mySession);
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "Is Transaction Audio :"+isTransactionAction);
		inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_IS_TRANSACTION_AUDIO).setValue(isTransactionAction);

		StringBuilder stringbuilder = new StringBuilder();
		stringbuilder.append("\npropertiesLocation :");
		stringbuilder.append(propertiesLocation);
		stringbuilder.append("\ncustomAudioLocation :");
		stringbuilder.append(audioLocation);
		stringbuilder.append("\ngrammarLocation :");
		stringbuilder.append(grammarLocation);
		stringbuilder.append("\nstandardAudioLocation :");
		stringbuilder.append(standardAudioLocation);
		stringbuilder.append("\nisDTMF :");
		stringbuilder.append(isDTMF);
		stringbuilder.append("\nglobalPropertyFileName :");
		stringbuilder.append(globalPropertiesFileName);
		stringbuilder.append("\npropertyFileName :");
		stringbuilder.append(particularPropertiesFileName);
		stringbuilder.append("\ndtmfGrammar :");
		stringbuilder.append(dtmfGrammar);
		stringbuilder.append("\nvoiceGrammar :");
		stringbuilder.append(speechGrammar);
		stringbuilder.append("\ndtmfGlobalGrammar :");
		stringbuilder.append(dtmfGlobalGrammar);
		stringbuilder.append("\nbuiltInGrammar :");
		stringbuilder.append(builtInGrammar);
		stringbuilder.append("\nbuiltInGrammarFlag :");
		stringbuilder.append(builtInGrammarFlag);
		stringbuilder.append("\ndtmfGlobalGrammar :");
		stringbuilder.append(dtmfGlobalGrammar);
		stringbuilder.append("\nvoiceGlobalGrammar :");
		stringbuilder.append(speechGlobalGrammar);
		stringbuilder.append("\ndtmfGrammarsUseSlots :");
		stringbuilder.append(dtmfGrammarsUseSlots);
		stringbuilder.append("\nconfirmationDtmfGrammar :");
		stringbuilder.append(confirmationDtmfGrammar);
		stringbuilder.append("\nconfirmationVoiceGrammar :");
		stringbuilder.append(confirmationSpeechGramamr);
		stringbuilder.append("\ninitialPrompt :");
		stringbuilder.append(initialPrompt);
		stringbuilder.append("\nnoMatchPrompt :");
		stringbuilder.append(noMatchPrompt);
		stringbuilder.append("\nnoInputPrompt :");
		stringbuilder.append(noInputPrompt);
		stringbuilder.append("\nmaxNoInputCount :");
		stringbuilder.append(maxNoInput);
		stringbuilder.append("\nmaxNoMatchCount :");
		stringbuilder.append(maxNoMatch);
		stringbuilder.append("\nrePromptNoMatch :");
		stringbuilder.append(rePromptNoMatch);
		stringbuilder.append("\nrePromptNoInput :");
		stringbuilder.append(rePromptNoInput);
		stringbuilder.append("\nnoMatchMaxTryPrompt :");
		stringbuilder.append(noMatchLimitPrompt);
		stringbuilder.append("\nnoInputMaxTryPrompt :");
		stringbuilder.append(noInputLimitPrompt);
		stringbuilder.append("\nconfirmationInitialPrompt :");
		stringbuilder.append(confirmationDefaultPrompt);
		stringbuilder.append("\nconfirmationNoMatchPrompt :");
		stringbuilder.append(confirmationNoMatchPrompt);
		stringbuilder.append("\nconfirmationNoInputPrompt :");
		stringbuilder.append(confirmationNoInputPrompt);
		stringbuilder.append("\nconfirmationSpecificPrompt :");
		stringbuilder.append(confirmationSpecificPrompt);
		stringbuilder.append("\nconfirmationReprompt :");
		stringbuilder.append(confirmationRePrompt);
		stringbuilder.append("\nhelpPrompt :");
		stringbuilder.append(helpPrompt);
		stringbuilder.append("\nglobalPrompt :");
		stringbuilder.append(globalPrompt);
		stringbuilder.append("\nsuccessPrompt:");
		stringbuilder.append(successPrompt);
		stringbuilder.append("\nsuccessPromptOnlyForConfirmation :");
		stringbuilder.append(successPromptOnlyForConfirmation);
		stringbuilder.append("\nnBest :");
		stringbuilder.append(nBest);
		stringbuilder.append("\nDisallowList :");
		stringbuilder.append(disallowList);
		stringbuilder.append("\nLanguage :");
		stringbuilder.append(language);
		stringbuilder.append("\nprivateData :");
		stringbuilder.append(privateData);
		stringbuilder.append("\ndialogName :");
		stringbuilder.append(dialogName);
		stringbuilder.append("\nmenuId :");
		stringbuilder.append(menuID);
		stringbuilder.append("\nconfirmationMode :");
		stringbuilder.append(confirmationMode);
		stringbuilder.append("\nhighConfidenceLevel :");
		stringbuilder.append(highConfidenceLevel);
		stringbuilder.append("\nlowConfidenceLevel :");
		stringbuilder.append(lowConfidenceLevel);
		stringbuilder.append("\ninitialTimeout :");
		stringbuilder.append(timeout);
		stringbuilder.append("\ninterdigitTimeout :");
		stringbuilder.append(interdigitTimeout);
		stringbuilder.append("\nterminatingTimeout :");
		stringbuilder.append(terminatingTimeout);
		stringbuilder.append("\ncompleteTimeout :");
		stringbuilder.append(completeTimeout);
		stringbuilder.append("\nincompleteTimeout :");
		stringbuilder.append(incompleteTimeout);
		stringbuilder.append("\nmediaTypeVoice :");
		stringbuilder.append(mediaTypeVoice);
		stringbuilder.append("\nmediaTypeDTMF :");
		stringbuilder.append(mediaTypeDTMF);
		stringbuilder.append("\nbargeIn :");
		stringbuilder.append(bargeIn);
		stringbuilder.append("\nNINMCounter :");
		stringbuilder.append(NINMCounter);
		stringbuilder.append("\nNINMCommonCounterFlag :");
		stringbuilder.append(NINMCommonCounterFlag);
		stringbuilder.append("\nnoMatchRandom :");
		stringbuilder.append(noMatchRandom);
		stringbuilder.append("\nnoInputRandom :");
		stringbuilder.append(noInputRandom);
		stringbuilder.append("\nreEntry :");
		stringbuilder.append(reEntry);
		stringbuilder.append("\nconfirmationInitialPrompt :");
		stringbuilder.append(confirmationDefaultPrompt);
		stringbuilder.append("\nconfirmationSpecificPrompt :");
		stringbuilder.append(confirmationSpecificPrompt);
		stringbuilder.append("\nconfirmationMaxTryPrompt :");
		stringbuilder.append(confirmationLimitPrompt);
		stringbuilder.append("\nconfirmationMaxCount :");
		stringbuilder.append(confirmationMaxCount);
		stringbuilder.append("\nconfirmationMode:");
		stringbuilder.append(confirmationMode);
		stringbuilder.append("\nconfirmationNoInputPrompt :");
		stringbuilder.append(confirmationNoInputPrompt);
		stringbuilder.append("\nconfirmationNoMatchPrompt :");
		stringbuilder.append(confirmationNoMatchPrompt);
		stringbuilder.append("\nconfirmationReprompt :");
		stringbuilder.append(confirmationRePrompt);
		stringbuilder.append("\nconfirmationDeniedApology :");
		stringbuilder.append(noAnswerApologies);
		stringbuilder.append("\nconfirmationDeniedApologyRandom :");
		stringbuilder.append(noAnswerApologiesRandom);
		stringbuilder.append("\nconfirmationDeniedMaxtryPrompt :");
		stringbuilder.append(noAnswerLimitPrompt);
		stringbuilder.append("\nconfirmationDeniedMaxCount :");
		stringbuilder.append(noAnswerMaxCount);
		stringbuilder.append("\nmanageRepeat :");
		stringbuilder.append(manageRepeat);
		stringbuilder.append("\nrepeatCount :");
		stringbuilder.append(repeatCount);
		stringbuilder.append("\nrepeatPrompt :");
		stringbuilder.append(repeatPrompt);
		stringbuilder.append("\nrepeatMaxTryPrompt :");
		stringbuilder.append(repeatMaxTryPrompt);
		stringbuilder.append("\nreportEnabled :");
		stringbuilder.append(reportEnabled);
		stringbuilder.append("\nreportXMLEnabled :");
		stringbuilder.append(reportXMLEnabled);
		stringbuilder.append("\nreportClassName :");
		stringbuilder.append(reportClassName);
		stringbuilder.append("\nreportMethodName :");
		stringbuilder.append(reportMethodName);
		stringbuilder.append("\nterminatingChar :");
		stringbuilder.append(terminatingChar);
		stringbuilder.append("\nRecord Utterance :");
		stringbuilder.append(recordUtterance);
		stringbuilder.append("\nconstraintList :");
		stringbuilder.append(constraintList);
		stringbuilder.append("\ndynamicConstraintListFlag :");
		stringbuilder.append(dynamicConstraintListFlag);
		if(dynamicConstraintListFlag.equalsIgnoreCase(Constants.TRUE)){
			stringbuilder.append("\ndynamicConstraintListCounterFlag :");
			stringbuilder.append(dynamicConstraintListCounterFlag);
			stringbuilder.append("\ndynamicConstraintListCounter :");
			stringbuilder.append(dynamicConstraintListCounter);
			stringbuilder.append("\ndynamicConstraintListPrompts :");
			stringbuilder.append(dynamicConstraintListPrompts);
			stringbuilder.append("\ndynamicConstraintListValues :");
			stringbuilder.append(dynamicConstraintListValues);
		}
		stringbuilder.append("\noneTimeFlag :");
		stringbuilder.append(oneTimeFlag);
		stringbuilder.append("\nssNumberFormat :");
		stringbuilder.append(ssNumberFormat);
		stringbuilder.append("\nssNumberFormatValues:");
		stringbuilder.append(ssNumberFormatValues);
		stringbuilder.append("\nssDigitsFormat :");
		stringbuilder.append(ssDigitsFormat);
		stringbuilder.append("\nssDigitsFormatValues :");
		stringbuilder.append(ssDigitsFormatValues);
		stringbuilder.append("\nssDateFormat :");
		stringbuilder.append(ssDateFormat);
		stringbuilder.append("\nssDateFormatValues :");
		stringbuilder.append(ssDateFormatValues);
		stringbuilder.append("\nssTimeFormat :");
		stringbuilder.append(ssTimeFormat);
		stringbuilder.append("\nssTimeFormatValues :");
		stringbuilder.append(ssTimeFormatValues);
		stringbuilder.append("\nssCurrencyFormat :");
		stringbuilder.append(ssCurrencyFormat);
		stringbuilder.append("\nssCurrencyFormatValues :");
		stringbuilder.append(ssCurrencyFormatValues);
		stringbuilder.append("\nttsNumberFormat :");
		stringbuilder.append(ttsNumberFormat);
		stringbuilder.append("\nttsNumberFormatValues:");
		stringbuilder.append(ttsNumberFormatValues);
		stringbuilder.append("\nttsDigitsFormat :");
		stringbuilder.append(ttsDigitsFormat);
		stringbuilder.append("\nttsDigitsFormatValues :");
		stringbuilder.append(ttsDigitsFormatValues);
		stringbuilder.append("\nttsDateFormat :");
		stringbuilder.append(ttsDateFormat);
		stringbuilder.append("\nttsDateFormatValues :");
		stringbuilder.append(ttsDateFormatValues);
		stringbuilder.append("\nttsTimeFormat :");
		stringbuilder.append(ttsTimeFormat);
		stringbuilder.append("\nttsTimeFormatValues :");
		stringbuilder.append(ttsTimeFormatValues);
		stringbuilder.append("\nttsCurrencyFormat :");
		stringbuilder.append(ttsCurrencyFormat);
		stringbuilder.append("\nttsCurrencyFormatValues :");
		stringbuilder.append(ttsCurrencyFormatValues);
		stringbuilder.append("\nttsNameFormat :");
		stringbuilder.append(ttsNameFormat);
		stringbuilder.append("\nttsNameFormatValues :");
		stringbuilder.append(ttsNameFormatValues);
		stringbuilder.append("\nttsAddressFormat :");
		stringbuilder.append(ttsAddressFormat);
		stringbuilder.append("\nttsAddressFormatValues :");
		stringbuilder.append(ttsAddressFormatValues);
		stringbuilder.append("\nttsTelephoneFormat :");
		stringbuilder.append(ttsTelephoneFormat);
		stringbuilder.append("\nttsTelephoneFormatValues :");
		stringbuilder.append(ttsTelephoneFormatValues);
		stringbuilder.append("\nmenuOptions :");
		stringbuilder.append(menuOptions);
		stringbuilder.append("\nmoreOptionFlag :");
		stringbuilder.append(moreOptionFlag);
		stringbuilder.append("\nmoreOptionCount :");
		stringbuilder.append(moreOptionCount);
		stringbuilder.append("\nmoreOptionPreviousMenuFlag :");
		stringbuilder.append(moreOptionPreviousMenuFlag);
		stringbuilder.append("\nmoreOptionDTMFGrammar :");
		stringbuilder.append(moreOptionDTMFGrammar);
		stringbuilder.append("\nmoreOptionVoiceGrammar :");
		stringbuilder.append(moreOptionVoiceGrammar);
		stringbuilder.append("\nmoreOptionDynamicValues :");
		stringbuilder.append(moreOptionDynamicValues);
		stringbuilder.append("\nisAnnouncement :");
		stringbuilder.append(isAnnouncement);
		stringbuilder.append("\nspecificSlots :");
		stringbuilder.append(specificSlots);
		stringbuilder.append("\ncheckConsecutive :");
		stringbuilder.append(checkConsecutive);
		stringbuilder.append("\nis Transaction Audio :");
		stringbuilder.append(isTransactionAction);

		if(mySession.isAppTraceEnabled()){ trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,stringbuilder.toString());}
	}

	public String getProperties(String property, String key, DMPropertyReader globalPropertyReader, DMPropertyReader reader, SCESession mySession){

		if(Constants.DEFAULT.equalsIgnoreCase(property) && reader != null){
			try{
				property = reader.getProperty(key);
			}catch(Exception e){
				if(mySession.isAppTraceEnabled()){
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, "DM ERROR ----------------------------------------------------------------");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, " - Possible Cause: Global Property '" + key + "' does not exists");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, "--------------------------------------------------------------------------");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, e.getMessage());
				}
			}
		}
		if((property == null || property.equalsIgnoreCase(Constants.DEFAULT)) && globalPropertyReader != null){
			try{
				property = globalPropertyReader.getProperty(key);    
			}catch(Exception e){
				if(mySession.isAppTraceEnabled()){
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, "DM ERROR ----------------------------------------------------------------");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, " - Possible Cause: Particular Property '" + key + "' does not exists");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, "--------------------------------------------------------------------------");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, e.getMessage());
				}
			}
		}
		if(property == null || property.equalsIgnoreCase(Constants.DEFAULT)){
			String parameter = mySession.getServlet().getServletContext().getInitParameter(key);
			if (parameter!=null){
				property = parameter;
			}else{
				property = "NONE";
				if(mySession.isAppTraceEnabled()){
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_WARN, " - Particular Property '" + key + "' is not set!!!");
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_WARN, " - Setting it to NONE");

				}
			}
		}
		return property;
	}

	//Validate URL
	//==========================================================================================
	//(https?)://[-a-zA-Z0-9.]+(:(\d{2,5}))?(/[^.!,?;"\\'<>()\[\]\{\}\s\x7F-\xFF]*)?
	//(https?)://[-a-zA-Z0-9.]+(:(\\d{2,5}))?(/[^.!,?;\"\\\\'<>()\\[\\]\\{\\}\\s\\x7F-\\xFF]*)?
	//==========================================================================================
	public String checkFormatURL(String sURL, com.avaya.sce.runtimecommon.SCESession mySession){

		if (mySession.isAppTraceEnabled()) 
		{mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "########## Validate URL: [" + sURL + "]");}

		String response = sURL;		
		try {
			String newURL = "";

			String myRegex = "(https?)://[-a-zA-Z0-9.]+(:(\\d{2,5}))?(/[^.!,?;\"\\\\'<>()\\[\\]\\{\\}\\s\\x7F-\\xFF]*)?";
			Boolean isValid = Pattern.matches(myRegex, sURL);
			if (!isValid)
			{
				String myIPPORT = getServerIpPort(sURL, mySession);

				String firstChar = sURL.substring(0, 1);
				String lastChar = sURL.substring(sURL.length()-1, sURL.length());
				if ("/".equalsIgnoreCase(firstChar)) {sURL = sURL.substring(1);}
				if (!"/".equalsIgnoreCase(lastChar)) {sURL = sURL+"/";}

				newURL = myIPPORT + sURL;

				if (mySession.isAppTraceEnabled()) 
				{mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "########## New URL: [" + newURL + "]");}

				//reCheck
				isValid = Pattern.matches(myRegex, newURL);
				if (isValid){response = newURL;}

			}			

			if (mySession.isAppTraceEnabled()) 
			{mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "########## Validation Result: [" + isValid.toString() + "]");}

		}
		catch (Exception e) 
		{}

		return response;
	}

	//Detect WebServer IP:PORT  
	//==========================================================================================
	public String getServerIpPort(String sURL, com.avaya.sce.runtimecommon.SCESession mySession){

		String response = "";
		try {
			String sTWebServerIPPort = mySession.getRequestCopyURL();
			String sAppName          = mySession.getAppName();
			sAppName                 = sAppName.replace("/", "");
			sAppName                 = sAppName.replace("\\", "");

			sTWebServerIPPort = sTWebServerIPPort.substring(0, sTWebServerIPPort.indexOf(sAppName));

			response = sTWebServerIPPort;
		}
		catch (Exception e) 
		{}

		return response;
	}

	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:31 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("SetParams_PromptandCollect", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
