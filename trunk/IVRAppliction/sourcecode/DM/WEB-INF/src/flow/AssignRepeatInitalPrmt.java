package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-FEB-24  12:34:26 PM
 */
public class AssignRepeatInitalPrmt extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-FEB-24  12:34:26 PM
	 */
	public AssignRepeatInitalPrmt() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		IVariable inputVar = mySession.getVariable(IProjectVariables.INPUT_VARIABLES);
		String repeatPrompt = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_REPEAT_PROMPT).getStringValue();
		String repeatFlag = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MANAGE_REPEAT).getStringValue();
		int repeatCounter = mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_REPEAT_COUNT).getIntValue();
		String moreOptionFlag = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_FLAG).getStringValue();
		int moreOptionCounter = mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_MORE_OPTION_COUNT).getIntValue();
		String[] moreOptionRepeatPrompt = null;

		if(mySession.isAppTraceEnabled())
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Flag : " + repeatFlag);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "More Option Flag : " + moreOptionFlag);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt :" + repeatPrompt);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Count :" + repeatCounter);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "More Option Count :" + moreOptionCounter);
		}

		try{
			if(moreOptionFlag.equalsIgnoreCase(Constants.TRUE)){
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "More Option Flag is true");
				if(repeatFlag.equalsIgnoreCase(Constants.TRUE)){
					if(!Constants.NONE.equalsIgnoreCase(repeatPrompt)){
						if(repeatPrompt.contains(Constants.HYPHEN)){
							moreOptionRepeatPrompt = repeatPrompt.split("-");
							repeatPrompt = moreOptionRepeatPrompt[moreOptionCounter-1];
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "More Option repeat prompt" + repeatPrompt);
							if(repeatPrompt.contains(Constants.PIPESEPERATOR)){
								String[] prmt=repeatPrompt.split("\\|");	
								if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt" + prmt[repeatCounter-1]);}
								mySession.getVariable(IProjectVariables.COLLECTIONREPEATPROMPT).getSimpleVariable().setValue(prmt[repeatCounter-1]);
							}else{
								if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt" + repeatPrompt);}
								mySession.getVariable(IProjectVariables.COLLECTIONREPEATPROMPT).getSimpleVariable().setValue(repeatPrompt);
							}			
						}else{
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "More Option repeat prompt" + repeatPrompt);
							if(repeatPrompt.contains(Constants.PIPESEPERATOR)){
								String[] prmt=repeatPrompt.split("\\|");	
								if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt" + prmt[repeatCounter-1]);}
								mySession.getVariable(IProjectVariables.COLLECTIONREPEATPROMPT).getSimpleVariable().setValue(prmt[repeatCounter-1]);
							}else{
								if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt" + repeatPrompt);}
								mySession.getVariable(IProjectVariables.COLLECTIONREPEATPROMPT).getSimpleVariable().setValue(repeatPrompt);
							}			
						}
					}else{
						// Nthg to be done
					}
					
				}
			}else{
				if(repeatFlag.equalsIgnoreCase(Constants.TRUE)){
					if(!Constants.NONE.equalsIgnoreCase(repeatPrompt)){
						if(repeatPrompt.contains(Constants.PIPESEPERATOR)){
							String[] prmt=repeatPrompt.split("\\|");	
							if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt" + prmt[repeatCounter-1]);}
							mySession.getVariable(IProjectVariables.COLLECTIONREPEATPROMPT).getSimpleVariable().setValue(prmt[repeatCounter-1]);
							if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt set to variable" + mySession.getVariable(IProjectVariables.COLLECTIONINITIALPROMPT).getSimpleVariable().getStringValue());}
						}else{
							if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt" + repeatPrompt);}
							mySession.getVariable(IProjectVariables.COLLECTIONREPEATPROMPT).getSimpleVariable().setValue(repeatPrompt);
							if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt set to variable" + mySession.getVariable(IProjectVariables.COLLECTIONINITIALPROMPT).getSimpleVariable().getStringValue());}
						}
					}else{
						// Nthg to be done
					}
				}	
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:34 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("IsConstraintListAvailable", "Default");
		next.setDebugId(2032);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:34 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:34 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Collection Repeat Prompt", "COLLECTIONREPEATPROMPT").setDebugId(2292));
		actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONREPEATPROMPT", "COLLECTIONREPEATPROMPT", "*", false).setDebugId(2293));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "COLLECTIONREPEATPROMPT", com.avaya.sce.runtime.Expression.HAS_MORE).setDebugId(2294)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			for(com.avaya.sce.runtime.VarCollIterator varCollIterator0=(com.avaya.sce.runtime.VarCollIterator)new com.avaya.sce.runtime.VarCollIterator().setDebugId(2298);varCollIterator0.hasNext(mySession, "COLLECTIONREPEATPROMPT");varCollIterator0.next()){
				actions = new java.util.ArrayList(3);
				actions.add(new com.avaya.sce.runtime.varoperations.AppendToCollection("COLLECTIONINITIALPROMPT", "COLLECTIONREPEATPROMPT").setDebugId(2290));
				actions.add(new com.avaya.sce.runtime.varoperations.AppendToCollection("COLLECTIONINITIALREPROMPT", "COLLECTIONREPEATPROMPT").setDebugId(2291));
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Prompt Collection", "COLLECTIONREPEATPROMPT").setDebugId(2301));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.AppendToCollection("COLLECTIONINITIALPROMPT", "COLLECTIONREPEATPROMPT").setDebugId(2296));
			actions.add(new com.avaya.sce.runtime.varoperations.AppendToCollection("COLLECTIONINITIALREPROMPT", "COLLECTIONREPEATPROMPT").setDebugId(2297));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
