package flow;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import com.avaya.sce.runtime.tracking.ReportInfo;
import com.avaya.sce.runtimecommon.IReportInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-FEB-06  08:04:46 AM
 */
public class SetParams_PromptandCollect extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-FEB-06  08:04:46 AM
	 */
	public SetParams_PromptandCollect() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		
		try{
			String logEnabled=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_LOGGING_ENABLED).getStringValue();
			boolean loggingEnabled=Boolean.valueOf(logEnabled);
			
			if(!Constants.NONE.equalsIgnoreCase(logEnabled)){
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"DM Trace Enabled :"+logEnabled);}
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"DM Trace Enabled :"+loggingEnabled);}
			}
			
			if(!loggingEnabled){
				String loggerName=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_LOGGER_NAME).getStringValue();
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Logger Name :"+loggerName);}
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Switching OFF Trace :");}
				Logger logger=Logger.getLogger(Constants.LOGGER_INIT_NAME + loggerName);
				Level level=logger.getLevel();
				mySession.setProperty(Constants.LOGGER_LEVEL, level);
				logger.setLevel(Level.OFF);
			}
			
		}catch (Exception e) {
			// do nothing
		}
		
		IVariable inputVar = mySession.getVariable(IProjectVariables.INPUT_VARIABLES);
		IVariable flagVar = mySession.getVariable(IProjectVariables.FLAGS);

		String stateName = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DIALOG_NAME).getStringValue();
		String reportEnabled = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_REPORT_ENABLED).getStringValue();

		Collection actions = null;
		actions = new ArrayList();
		boolean reportGenerated = false;
		if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"State Name :"+stateName);}

		flagVar.getComplexVariable().getField(IProjectVariables.FLAGS_FIELD_DIALOG_NAME__ERROR).setValue(Constants.FALSE);

		if(Constants.ERROR.equalsIgnoreCase(stateName)){
			//Set the Flag to true,Which mens DialogName = "Error"
			flagVar.getComplexVariable().getField(IProjectVariables.FLAGS_FIELD_DIALOG_NAME__ERROR).setValue(Constants.TRUE);
		}else {
			//Check ReportEnbled (true/False)
			if(Constants.TRUE.equalsIgnoreCase(reportEnabled)){

				try{
					//Report Generation
					reportGenerated = actions.add(new ReportInfo(IReportInfo.REPORT_TYPE_START_TRANS,IReportInfo.ALARM_LEVEL_INFO,stateName,"State of DialogName",""));
					if(reportGenerated){
						if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"IDM Report Generated Successfully");}
					}else{
						if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG," IDM Report Not Generated ");}
					}

				}catch (Exception e) {
					if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"IDM Report Generation Error");}
				}

			}
			
			//To set Announce End time 
			String menuEndTime = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(Calendar.getInstance().getTime());
			mySession.getVariableField(IProjectVariables.OUTPUT__PARAMETERS,IProjectVariables.OUTPUT__PARAMETERS_FIELD_MENU_END_TIME).setValue(menuEndTime);

			//set ReEntry Prompt
			String reEntry = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES, IProjectVariables.INPUT_VARIABLES_FIELD_RE_ENTRY).getStringValue();
			boolean isReEntry = false;
			Object o = null;

			if (!Constants.NONE.equalsIgnoreCase(reEntry)){

				o = mySession.getProperty(Constants.RDM + stateName + Constants.REENTRY);
				if (o != null){
					isReEntry = (Boolean)o;
				}

				if (!isReEntry){
					mySession.setProperty(Constants.RDM + stateName + Constants.REENTRY, true);
				} else {
					mySession.getVariableField(IProjectVariables.INPUT_VARIABLES, IProjectVariables.INPUT_VARIABLES_FIELD_INITIAL_PROMPT).setValue(reEntry);
				}

			}
			
			// Retrieve the More option Dynamic Values
			String dynamicValues=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_DYNAMIC_VALUES).getStringValue();
			String[] dynmVal=null;
			if(!dynamicValues.equalsIgnoreCase(Constants.NONE     )){
				dynmVal=dynamicValues.split(Constants.COMMA);
				mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNAMIC_VALUE_LENGTH).setValue(dynmVal.length);
			}	
			
			// Global Prompt to be appended to the initial prompt
			String globalCount = mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_GLOBAL_COUNT).getStringValue();
			String globalPrmt = mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_GLOBAL_PROMPT).getStringValue();
			String[] globalPrmtToAppend = null;
			if (mySession.isAppTraceEnabled() == true){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Global Count: " + globalCount);}
			if (mySession.isAppTraceEnabled() == true){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Global Prompt: " + globalPrmt);}


			if(globalPrmt.contains(Constants.PIPESEPERATOR)){
				globalPrmtToAppend = globalPrmt.split("\\|");
				if (mySession.isAppTraceEnabled() == true){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "If: " + globalPrmtToAppend[Integer.parseInt(globalCount)]);}
				mySession.getVariable(IProjectVariables.GLOBAL_PRMT_COLLECTION).getSimpleVariable().setValue(globalPrmtToAppend[Integer.parseInt(globalCount)]);
			}else{
				if (mySession.isAppTraceEnabled() == true){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Inside Else: " + globalPrmt);}
				mySession.getVariable(IProjectVariables.GLOBAL_PRMT_COLLECTION).getSimpleVariable().setValue(globalPrmt);
			}

		}
	}


	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Dialog Name is Error  (true/false) ?", "FLAGS:DialogName_Error").setDebugId(81));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "FLAGS:DialogName_Error", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(82)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("LogEnable", "Exit").setDebugId(83));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "inputVariables:isAnnouncement", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1091)).evaluate(mySession)) {
				actions = new java.util.ArrayList(7);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "isAnnouncement : ", "inputVariables:isAnnouncement").setDebugId(1679));
				actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONINITIALPROMPT", "inputVariables:initialPrompt", "*", false).setDebugId(1678));
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Initial Prompt : ", "COLLECTIONINITIALPROMPT").setDebugId(1672));
				actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("COLLECTIONINITIALPROMPT").setDebugId(1673));
				actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONINITIALPROMPT").setDebugId(1674));
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, " Initial wav file for Announcement :", "COLLECTIONINITIALPROMPT").setDebugId(1093));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:announceID", "inputVariables:announceID", false).setDebugId(1848));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "inputVariables:announceID", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:NONE", true).setDebugId(1849)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:announceID", "", true).setDebugId(1850));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				}


				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "inputVariables:isTransactionAudio", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1911)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("TransactionAudio", "TransactionAudio").setDebugId(1912));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				}

				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Announce", "Announcement").setDebugId(1092));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}


			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "IDM_Variables:dynamicValueLength", com.avaya.sce.runtime.Expression.STRING_EQUAL, "CONSTANTS:ONE", true).setDebugId(1644)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "input_oneTimeFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1643)).evaluate(mySession)) {
					actions = new java.util.ArrayList(13);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:value", "inputVariables:moreOptionDynamicValues", false).setDebugId(1646));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:returncode", "CONSTANTS:SUCCESS", false).setDebugId(1791));
					actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONINITIALPROMPTTEMP", "inputVariables:initialPrompt", "|", false).setDebugId(1650));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Initial Prompt : ", "COLLECTIONINITIALPROMPTTEMP").setDebugId(1651));
					actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("COLLECTIONINITIALPROMPTTEMP").setDebugId(1652));
					actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONINITIALPROMPTTEMP").setDebugId(1653));
					actions.add(new com.avaya.sce.runtime.varoperations.Size("CollectionSize", "COLLECTIONINITIALPROMPTTEMP").setDebugId(1654));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Size of Collection : ", "CollectionSize").setDebugId(1655));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Initial Prompt : ", "COLLECTIONINITIALPROMPTTEMP").setDebugId(1656));
					actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONINITIALPROMPT", "COLLECTIONINITIALPROMPTTEMP", "*", false).setDebugId(1657));
					actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONINITIALREPROMPT", "COLLECTIONINITIALPROMPTTEMP", "*", false).setDebugId(1851));
					actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONMOREINITIALPRMTTEMP", "COLLECTIONINITIALPROMPTTEMP", "*", false).setDebugId(2260));
					actions.add(new com.avaya.sce.runtime.Next("ReportEnd", "One Time Grammar flag is True").setDebugId(1645));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				}

				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("SetInitialPrmt", "OneTimeFlagFalse").setDebugId(1795));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("SetInitialPrmt", "MoreThanOneValue").setDebugId(1841));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
