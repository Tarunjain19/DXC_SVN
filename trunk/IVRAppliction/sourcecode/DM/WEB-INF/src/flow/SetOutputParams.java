package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-OCT-11  03:31:10 PM
 */
public class SetOutputParams extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-11  03:31:10 PM
	 */
	public SetOutputParams() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		boolean privateData=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_PRIVATE_DATA).getBooleanValue();
		IVariable variable=mySession.getVariable(IProjectVariables.OUTPUT__PARAMETERS);
		if(mySession.isAppTraceEnabled()){
        	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR,  "Before An Exception was thrown while trying to report the outputs --" + variable.getComplexVariable().getField(IProjectVariables.OUTPUT__PARAMETERS_FIELD_VALUE).getAttribute(com.avaya.sce.runtimecommon.IVariableField.VARATTR_PRIVATE));
        	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR,  "Before An Exception was thrown while trying to report the outputs --" + variable.getComplexVariable().getField(IProjectVariables.OUTPUT__PARAMETERS_FIELD_UTTERANCE).getAttribute(com.avaya.sce.runtimecommon.IVariableField.VARATTR_PRIVATE));
		}
		variable.getComplexVariable().getField(IProjectVariables.OUTPUT__PARAMETERS_FIELD_VALUE).setAttribute(com.avaya.sce.runtimecommon.IVariableField.VARATTR_PRIVATE, privateData);
		variable.getComplexVariable().getField(IProjectVariables.OUTPUT__PARAMETERS_FIELD_UTTERANCE).setAttribute(com.avaya.sce.runtimecommon.IVariableField.VARATTR_PRIVATE, privateData);
		
		if(mySession.isAppTraceEnabled()){
        	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR,  "-- An Exception was thrown while trying to report the outputs --" + variable.getComplexVariable().getField(IProjectVariables.OUTPUT__PARAMETERS_FIELD_VALUE).getAttribute(com.avaya.sce.runtimecommon.IVariableField.VARATTR_PRIVATE));
        	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR,  "-- An Exception was thrown while trying to report the outputs --" + variable.getComplexVariable().getField(IProjectVariables.OUTPUT__PARAMETERS_FIELD_UTTERANCE).getAttribute(com.avaya.sce.runtimecommon.IVariableField.VARATTR_PRIVATE));
		}
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("ReportEnd", "Default");
		next.setDebugId(628);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		com.avaya.sce.runtime.BooleanOperation bo1 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.AND);
		com.avaya.sce.runtime.Expression be1 = new com.avaya.sce.runtime.Expression("expression1", "PromptAndCollect:recording", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "CONSTANTS:UNDEFINED", true);
		bo1.addExpression(be1);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:value", "PromptAndCollect:RESULT", false).setDebugId(638));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Output_Parameters:value", com.avaya.sce.runtime.Expression.IS_EMPTY).setDebugId(2005)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:value", "PromptAndCollect:value", false).setDebugId(2006));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:confidence", "PromptAndCollect:confidence", false).setDebugId(639));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:inputType", "PromptAndCollect:inputmode", false).setDebugId(640));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "FLAGS:TRIESEXCEEDED", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1920)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:returncode", "CONSTANTS:SUCCESS", false).setDebugId(641));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:utterance", "PromptAndCollect:utterance", false).setDebugId(1781));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:announceID", "inputVariables:announceID", false).setDebugId(1777));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "inputVariables:announceID", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:NONE", true).setDebugId(1786)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:announceID", "", true).setDebugId(1787));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(4);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:menuID", "inputVariables:menuID", false).setDebugId(1767));
		actions.add(new com.avaya.sce.runtime.varoperations.Subtract("Output_Parameters:noInputRemaining", "inputVariables:maxNoInputCount", false, "IDM_Variables:noinputcount", false).setDebugId(643));
		actions.add(new com.avaya.sce.runtime.varoperations.Subtract("Output_Parameters:noMatchsRemaining", "inputVariables:maxNoMatchCount", false, "IDM_Variables:nomatchcount", false).setDebugId(644));
		actions.add(new com.avaya.sce.runtime.varoperations.Subtract("Output_Parameters:confirmationsRemaining", "inputVariables:confirmationMaxCount", false, "IDM_Variables:countConfirmation", false).setDebugId(645));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "inputVariables:recordUtterance", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(646)).evaluate(mySession, bo1)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:recordedUtterance", "PromptAndCollect:recording", false).setDebugId(649));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "disallowCollection", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:NONE", true).setDebugId(650)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("disallowCollection", "", true).setDebugId(651));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
