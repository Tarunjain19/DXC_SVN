package flow;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-OCT-15  04:06:49 PM
 */
public class ConfirmationNoInput extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-15  04:06:49 PM
	 */
	public ConfirmationNoInput() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:29 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("ReportEnd", "WithoutMaxRetry");
		next.setDebugId(876);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:29 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:29 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "IDM_Variables:countretryconfirmation", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "inputVariables:confirmationMaxCount", true).setDebugId(834)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Increment("IDM_Variables:countretryconfirmation").setDebugId(835));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "inputVariables:confirmationNoMatchPrompt", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "NONE", false).setDebugId(836)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "IDM_Variables:retryconfirmation", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(837)).evaluate(mySession)) {
					actions = new java.util.ArrayList(4);
					actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONCONFIRMATIONNOMATCH", "inputVariables:confirmationNoMatchPrompt", "|", false).setDebugId(838));
					actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("COLLECTIONCONFIRMATIONNOMATCH").setDebugId(839));
					actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONCONFIRMATIONNOMATCH").setDebugId(840));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "No Match Confirmation Collection :", "COLLECTIONCONFIRMATIONNOMATCH").setDebugId(841));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "COLLECTIONCONFIRMATIONNOMATCH", com.avaya.sce.runtime.Expression.HAS_MORE).setDebugId(843)).evaluate(mySession)) {
						actions = new java.util.ArrayList(2);
						actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONCONFIRMATIONNOMATCH").setDebugId(844));
						actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "NoMatch Collection Confirmation : ", "COLLECTIONCONFIRMATIONNOMATCH").setDebugId(845));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					}
				}


			}

			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Conf No input prompts", "inputVariables:confirmationNoInputPrompt").setDebugId(1371));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "inputVariables:confirmationNoInputPrompt", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "NONE", false).setDebugId(846)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "IDM_Variables:retryconfirmation", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(847)).evaluate(mySession)) {
					actions = new java.util.ArrayList(8);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:retryconfirmation", "false", true).setDebugId(848));
					actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONCONFIRMATIONNOINPUT", "inputVariables:confirmationNoInputPrompt", "|", false).setDebugId(849));
					actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("COLLECTIONCONFIRMATIONNOINPUT").setDebugId(850));
					actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONCONFIRMATIONNOINPUT").setDebugId(851));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "NoInput Confirmation Collection : ", "COLLECTIONCONFIRMATIONNOINPUT").setDebugId(852));
					actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONCONFIRMATION", "COLLECTIONCONFIRMATIONNOINPUT", "*", false).setDebugId(853));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Collection : ", "COLLECTIONCONFIRMATION").setDebugId(854));
					actions.add(new com.avaya.sce.runtime.Next("PlayConfirmationRetryPrompt", "FirstConfirmation").setDebugId(855));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition7", "COLLECTIONCONFIRMATIONNOINPUT", com.avaya.sce.runtime.Expression.HAS_MORE).setDebugId(857)).evaluate(mySession)) {
						actions = new java.util.ArrayList(5);
						actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONCONFIRMATIONNOINPUT").setDebugId(858));
						actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "TRACE", "").setDebugId(859));
						actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONCONFIRMATION", "COLLECTIONCONFIRMATIONNOINPUT", "*", false).setDebugId(860));
						actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "NoInput Confirmation Collection :", "").setDebugId(861));
						actions.add(new com.avaya.sce.runtime.Next("PlayConfirmationRetryPrompt", "HasMore").setDebugId(862));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					}

					actions = new java.util.ArrayList(3);
					actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONCONFIRMATION", "COLLECTIONCONFIRMATIONNOINPUT", "*", false).setDebugId(863));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "NoInput Confirmation Collection  : ", "COLLECTIONCONFIRMATION").setDebugId(864));
					actions.add(new com.avaya.sce.runtime.Next("PlayConfirmationRetryPrompt", "HasNoMore").setDebugId(865));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("COLLECTIONCONFIRMATION", "NONE", true).setDebugId(867));
				actions.add(new com.avaya.sce.runtime.Next("ConfirmationRepromptCheck", "NoAudioForNoInput").setDebugId(868));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		}

		actions = new java.util.ArrayList(1);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Output_Parameters:returncode", "NEGATIVECONF", true).setDebugId(869));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition8", "inputVariables:confirmationLimitPrompt", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "NONE", false).setDebugId(870)).evaluate(mySession)) {
			actions = new java.util.ArrayList(6);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "TRACE AUDIO NO INPUT", "inputVariables:confirmationLimitPrompt").setDebugId(871));
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONCONFIRMATION", "inputVariables:confirmationLimitPrompt", "*", false).setDebugId(872));
			actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("COLLECTIONCONFIRMATION").setDebugId(873));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("FLAGS:MAXTRY", "CONSTANTS:TRUE", false).setDebugId(1372));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Limit Prompt :", "COLLECTIONCONFIRMATION").setDebugId(874));
			actions.add(new com.avaya.sce.runtime.Next("PlayConfirmationRetryPrompt", "MaxRetry").setDebugId(875));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
