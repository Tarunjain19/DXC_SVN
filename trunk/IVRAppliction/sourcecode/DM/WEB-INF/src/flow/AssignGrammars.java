package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-OCT-07  04:54:00 PM
 */
public class AssignGrammars extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-07  04:54:00 PM
	 */
	public AssignGrammars() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo traceInfo=mySession.getTraceOutput();
		IVariable var=mySession.getVariable(IProjectVariables.INPUT_VARIABLES);
		String menuOptions=var.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MENU_OPTIONS).getStringValue();
		String moreOptionFlag=var.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_FLAG).getStringValue();
		String moreOptionCount=var.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_COUNT).getStringValue();
		String moreDTMFGrammar=var.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_DTMFGRAMMAR).getStringValue();
		String collection=var.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_DYNAMIC_VALUES).getStringValue();
		String isDTMF=var.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_IS_DTMF).getStringValue();
		StringBuilder stringbuilder = new StringBuilder();
		StringBuilder stringbuilder1 = new StringBuilder();
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Menu options : "+ menuOptions);}
		String moreOptionLastSetFlag=mySession.getVariableField(IProjectVariables.FLAGS,IProjectVariables.FLAGS_FIELD_MORE_OPTION_LAST_SET_FLAG).getStringValue();
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"More Option Last set flag: "+ moreOptionLastSetFlag);}
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"INPUT_VARIABLES_FIELD_MORE_OPTION_DYNAMIC_VALUES"+collection);}
		// More option Dynamic collection values are retrieved
		String[] collectionArr = collection.split(Constants.COMMA);
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"More Option Dynamic Collection Values: "+ collectionArr);}

		int length = 0;
		int intMoreOptionCount=0;

		// Counter for number of times the more option is selected
		int counter=mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_MORE_OPTION_COUNT).getIntValue();
			
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"More option Counter : "+counter);}
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"More Option count : "+intMoreOptionCount);}

		// If the counter is 1 then the collection length of dynamic more option values is assigned to Dynamic collection length 
		if(counter==1){
			if(!collection.equalsIgnoreCase("NONE"))
			{
				length=collectionArr.length;
			}
			else
			{
				length=0;
			}
			mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNAMIC_COLLECTION_LENGTH).setValue(length);
		} 
		else{
			length=mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNAMIC_COLLECTION_LENGTH).getIntValue();
		}
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic Collection Length:"+ length);}
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"More Option Count:"+ intMoreOptionCount);}
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Is DTMF :"+ isDTMF);}

		if(menuOptions.equalsIgnoreCase(Constants.NONE)){
			if(moreOptionFlag.equalsIgnoreCase(Constants.TRUE)){
				// if more option count is none then it is set to 5 by default
				if(moreOptionCount.equalsIgnoreCase(Constants.NONE)){
					moreOptionCount=Constants.FIVE;
				}
				intMoreOptionCount=Integer.parseInt(moreOptionCount);
				// If the length of the more option dynamic values is less than the more option count then dynamic grammar for the DTMF and voice is seleted based on the length as Dyna_length_dtmf.grxml  
				if(length<=intMoreOptionCount){
					for (int i = 1; i <= length; i++) {
						stringbuilder.append(Constants.DYNA+Constants.UNDERSCORE+i+Constants.UNDERSCORE+Constants.DTMFGRXML);
						if(i!=length){
							stringbuilder.append(Constants.ASTERISK);
						}
						//if IsDTMF check is true than voice grammars are not loaded
						if(isDTMF.equalsIgnoreCase(Constants.FALSE)){
							stringbuilder1.append(Constants.DYNA+Constants.UNDERSCORE+i+Constants.UNDERSCORE+Constants.VOICEGRXML);
							if(i!=length){
								stringbuilder1.append(Constants.ASTERISK);
							}
						}
					}
					mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_DTMFGRAM).setValue(stringbuilder.toString());
					mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_VOICE_GRAM).setValue(stringbuilder1.toString());
				}

				else if(moreOptionLastSetFlag.equalsIgnoreCase(Constants.FALSE)){
					if(moreDTMFGrammar.equalsIgnoreCase(Constants.NONE)){
						intMoreOptionCount=Integer.parseInt(moreOptionCount)+1;
					}
					for (int i = 1; i <= intMoreOptionCount; i++) {
						stringbuilder.append(Constants.DYNA+Constants.UNDERSCORE+i+Constants.UNDERSCORE+Constants.DTMFGRXML);
						if(i!=intMoreOptionCount){
							stringbuilder.append(Constants.ASTERISK);
						}
						if(isDTMF.equalsIgnoreCase(Constants.FALSE)){
							if(moreDTMFGrammar.equalsIgnoreCase(Constants.NONE)){
								if(i<intMoreOptionCount){
									stringbuilder1.append(Constants.DYNA+Constants.UNDERSCORE+i+Constants.UNDERSCORE+Constants.VOICEGRXML);
								}
							}else{
								if(i<=intMoreOptionCount){
									stringbuilder1.append(Constants.DYNA+Constants.UNDERSCORE+i+Constants.UNDERSCORE+Constants.VOICEGRXML);
								}
							}
							if(i!=intMoreOptionCount){
								stringbuilder1.append(Constants.ASTERISK);
							}	
						}
					}
					mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_DTMFGRAM).setValue(stringbuilder.toString());
					mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_VOICE_GRAM).setValue(stringbuilder1.toString());
				}
				else{
					for (int i = 1; i <=intMoreOptionCount; i++) {
						stringbuilder.append(Constants.DYNA+Constants.UNDERSCORE+i+Constants.UNDERSCORE+Constants.DTMFGRXML);
						if(i!=intMoreOptionCount){
							stringbuilder.append(Constants.ASTERISK);
						}
						if(isDTMF.equalsIgnoreCase(Constants.FALSE)){
							if(i<intMoreOptionCount){
								stringbuilder.append(Constants.DYNA+Constants.UNDERSCORE+i+Constants.UNDERSCORE+Constants.VOICEGRXML);
							}
							if(i!=intMoreOptionCount){
								stringbuilder1.append(Constants.ASTERISK);
							}
						}	
					}
					mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_DTMFGRAM).setValue(stringbuilder.toString());
					mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_VOICE_GRAM).setValue(stringbuilder1.toString());
				}

			}
			else if(moreOptionFlag.equalsIgnoreCase(Constants.FALSE)){
				// If the length of the more option dynamic values is less than the more option count then dynamic grammar for the DTMF and voice is seleted based on the length as Dyna_length_dtmf.grxml  
					for (int i = 1; i <= length; i++) {
						stringbuilder.append(Constants.DYNA+Constants.UNDERSCORE+i+Constants.UNDERSCORE+Constants.DTMFGRXML);
						if(i!=length){
							stringbuilder.append(Constants.ASTERISK);
						}
						//if IsDTMF check is true than voice grammars are not loaded
						if(isDTMF.equalsIgnoreCase(Constants.FALSE)){
							stringbuilder1.append(Constants.DYNA+Constants.UNDERSCORE+i+Constants.UNDERSCORE+Constants.VOICEGRXML);
							if(i!=length){
								stringbuilder1.append(Constants.ASTERISK);
							}
						}
					}
					mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_DTMFGRAM).setValue(stringbuilder.toString());
					mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_VOICE_GRAM).setValue(stringbuilder1.toString());
				
			}else{
				// Nthg to be done
			}
		}
		else{
			String[] menuOpt=menuOptions.split(",");
			if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Menu Options :"+menuOpt);}
			for (int i = 0; i < menuOpt.length; i++) {
				stringbuilder.append(Constants.DYNA+Constants.UNDERSCORE+menuOpt[i]+Constants.UNDERSCORE+Constants.DTMFGRXML);
				if(i!=menuOpt.length-1){
					stringbuilder.append(Constants.ASTERISK);
				}
				if(isDTMF.equalsIgnoreCase(Constants.FALSE)){
					stringbuilder1.append(Constants.DYNA+Constants.UNDERSCORE+menuOpt[i]+Constants.UNDERSCORE+Constants.VOICEGRXML);
					if(i!=menuOpt.length-1){
						stringbuilder1.append(Constants.ASTERISK);
					}
				}
			}
			mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_DTMFGRAM).setValue(stringbuilder.toString());
			mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_VOICE_GRAM).setValue(stringbuilder1.toString());
		}
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic DTMF Grammar:"+mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_DTMFGRAM).getStringValue());}
		if(mySession.isAppTraceEnabled()){traceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic Voice Grammar:"+mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_DYNM_VOICE_GRAM).getStringValue());}
	}



	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("AppendGlobalPrmt");
		next.setDebugId(329);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "input_dynamicConstraintListFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1075)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONDYNAMICCONSTRAINTLIST", "input_dynamicConstraintListValues", ",", false).setDebugId(1076));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(9);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Constraint List Values", "COLLECTIONDYNAMICCONSTRAINTLIST").setDebugId(1077));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Input Variables : Speech Grammar : ", "inputVariables:dtmfGrammar").setDebugId(576));
		actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONDTMFGRAMMAR", "inputVariables:dtmfGrammar", "|", false).setDebugId(92));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Collected dtmf grammar : ", "COLLECTIONVOICEGRAMMAR").setDebugId(587));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("inputVariables:dtmfGrammar", "COLLECTIONDTMFGRAMMAR", false).setDebugId(101));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Input Variables : dtmf Grammar : ", "inputVariables:dtmfGrammar").setDebugId(574));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("ConcatenatedConfirmationDTMFGrammar", "inputVariables:confirmationDtmfGrammar", false).setDebugId(803));
		actions.add(new com.avaya.sce.runtime.varoperations.Parse("ConcatenatedConfirmationDTMFGrammar", "ConcatenatedConfirmationDTMFGrammar", "*", false).setDebugId(805));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "DTMF CONFIRMATION GRAMMAR : ", "ConcatenatedConfirmationDTMFGrammar").setDebugId(806));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "inputVariables:isDTMF", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:FALSE", true).setDebugId(1750)).evaluate(mySession)) {
			actions = new java.util.ArrayList(8);
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONVOICEGRAMMAR", "inputVariables:voiceGrammar", "|", false).setDebugId(93));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Collected Speech Grammar : ", "COLLECTIONDTMFGRAMMAR").setDebugId(575));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("inputVariables:voiceGrammar", "COLLECTIONVOICEGRAMMAR", false).setDebugId(99));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Input Variables : Speech grammar : ", "inputVariables:voiceGrammar").setDebugId(588));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("ConcatenatedConfirmationVoiceGrammar", "inputVariables:confirmationVoiceGrammar", false).setDebugId(802));
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("ConcatenatedConfirmationVoiceGrammar", "ConcatenatedConfirmationVoiceGrammar", "*", false).setDebugId(804));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "SPEECH CONFIRMATION GRAMMAR :", "ConcatenatedConfirmationVoiceGrammar").setDebugId(807));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("ConcatenatedVoiceGrammar", "inputVariables:voiceGrammar", false).setDebugId(102));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "inputVariables:voiceGlobalGrammar", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "CONSTANTS:NONE", true).setDebugId(104)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedVoiceGrammar", "CONSTANTS:STAR", false).setDebugId(105));
				actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedVoiceGrammar", "inputVariables:voiceGlobalGrammar", false).setDebugId(106));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "More Option Flag", "inputVariables:moreOptionFlag").setDebugId(1553));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "More Option Last set Flag", "FLAGS:moreOptionLastSetFlag").setDebugId(1554));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "FLAGS:moreOptionLastSetFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:FALSE", true).setDebugId(1590)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedVoiceGrammar", "CONSTANTS:STAR", false).setDebugId(1486));
				actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedVoiceGrammar", "inputVariables:moreOptionVoiceGrammar", false).setDebugId(1487));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

			actions = new java.util.ArrayList(4);
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedVoiceGrammar", "CONSTANTS:STAR", false).setDebugId(1488));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedVoiceGrammar", "IDM_Variables:DynmVoiceGram", false).setDebugId(1489));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Final Speech Grammar", "ConcatenatedVoiceGrammar").setDebugId(1452));
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("ConcatenatedVoiceGrammar", "ConcatenatedVoiceGrammar", "*", false).setDebugId(1451));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "COLLECTIONVOICEGRAMMAR", com.avaya.sce.runtime.Expression.HAS_MORE).setDebugId(116)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONVOICEGRAMMAR").setDebugId(117));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

		}

		actions = new java.util.ArrayList(1);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("ConcatenatedDTMFGrammar", "inputVariables:dtmfGrammar", false).setDebugId(577));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "inputVariables:dtmfGlobalGrammar", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "CONSTANTS:NONE", true).setDebugId(109)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedDTMFGrammar", "CONSTANTS:STAR", false).setDebugId(110));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedDTMFGrammar", "inputVariables:dtmfGlobalGrammar", false).setDebugId(111));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition7", "FLAGS:moreOptionLastSetFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:FALSE", true).setDebugId(1589)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedDTMFGrammar", "CONSTANTS:STAR", false).setDebugId(1543));
			actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedDTMFGrammar", "inputVariables:moreOptionDTMFGrammar", false).setDebugId(1544));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(4);
		actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedDTMFGrammar", "CONSTANTS:STAR", false).setDebugId(1545));
		actions.add(new com.avaya.sce.runtime.varoperations.Concatenate("ConcatenatedDTMFGrammar", "IDM_Variables:DynmDTMFGram", false).setDebugId(1546));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Final DTMF Grammar", "ConcatenatedDTMFGrammar").setDebugId(1457));
		actions.add(new com.avaya.sce.runtime.varoperations.Parse("ConcatenatedDTMFGrammar", "ConcatenatedDTMFGrammar", "*", false).setDebugId(1456));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition8", "COLLECTIONDTMFGRAMMAR", com.avaya.sce.runtime.Expression.HAS_MORE).setDebugId(114)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONDTMFGRAMMAR").setDebugId(115));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
