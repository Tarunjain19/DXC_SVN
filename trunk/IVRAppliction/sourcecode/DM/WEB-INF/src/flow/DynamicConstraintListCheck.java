package flow;

import com.avaya.sce.runtimecommon.ICollection;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.IVariableField;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-OCT-16  12:27:54 PM
 */
public class DynamicConstraintListCheck extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-16  12:27:54 PM
	 */
	public DynamicConstraintListCheck() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		IVariableField nextNode = mySession.getVariableField(IProjectVariables.OPERATION_RESULT);
		IVariable promptCollect = mySession.getVariable(IProjectVariables.PROMPT_AND_COLLECT);
		String dtmGrammarUseSlots=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_DTMF_GRAMMARS_USE_SLOTS).getStringValue();
		
		/*
		 * In order to use ConstraintList we need to:
		 * 
		 * 		- Dynamic Constraint List flag need to be true
		 * 
		 * 		- dynamicconstraintListValues should be != than NONE, which means we were able to retrieve
		 * 			it. 
		 */
		
		
		if(Constants.TRUE.equalsIgnoreCase(mySession.getVariable(IProjectVariables.INPUT__DYNAMIC_CONSTRAINT_LIST_FLAG).getSimpleVariable().getStringValue())){
			String value=null;
			if(dtmGrammarUseSlots.equalsIgnoreCase(Constants.TRUE)){
				value=promptCollect.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_RESULT).getStringValue();	
			}else{
				value=promptCollect.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_VALUE).getStringValue();
			}
			
			IVariable var=mySession.getVariable(IProjectVariables.COLLECTIONDYNAMICCONSTRAINTLIST);
			if(var.isCollection()==true)
			{
				ICollection collection=var.getCollection();
				collection.reset();
				IVariableField field=var.getSimpleVariable();
				for (;collection.hasMore() == true;) 
				{
					collection.next();
					String constraintValue=field.getStringValue();
					if(value.equalsIgnoreCase(constraintValue))
					{
						if(mySession.isTraceEnabled())
						{
							mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Constraint List contains the value");
						}
						nextNode.setValue("RESPONSE");
						break;
					}
					else
					{
						if(mySession.isAppTraceEnabled())
						{
							mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Constraint list doesnot contain value");
						}
						nextNode.setValue("NOMATCH");
					}
				}
			}
		}

	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:33 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:33 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:33 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "input_dynamicConstraintListFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1083)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "OperationResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:NOMATCH", true).setDebugId(1116)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "input_dynamicConstraintListCounterFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1118)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("ConstraintListNoMatch", "CommonCounter").setDebugId(1120));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(3);
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Constraint List Count : ", "IDM_Variables:constraintcount").setDebugId(1142));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Maximum Dynamic Constraint Tries :", "input_dynamicConstraintListCounter").setDebugId(1143));
					actions.add(new com.avaya.sce.runtime.Next("ConstraintListNoMatch", "SeperateCounter").setDebugId(1121));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("OperationResult", "", true).setDebugId(1126));
				actions.add(new com.avaya.sce.runtime.Next("DisallowCheck", "Response").setDebugId(1081));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("OperationResult", "", true).setDebugId(1127));
			actions.add(new com.avaya.sce.runtime.Next("StaticConstraintCheck", "Next").setDebugId(1085));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
