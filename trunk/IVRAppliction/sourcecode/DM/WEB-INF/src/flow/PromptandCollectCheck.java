package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-NOV-06  07:41:10 PM
 */
public class PromptandCollectCheck extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-NOV-06  07:41:10 PM
	 */
	public PromptandCollectCheck() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();

		IVariable promptVar = mySession.getVariable(IProjectVariables.PROMPT_AND_COLLECT);
		IVariable inputVar = mySession.getVariable(IProjectVariables.INPUT_VARIABLES);
		IVariable flagVar = mySession.getVariable(IProjectVariables.FLAGS);

		String inputMode = "",value = "",result = "",confirmationMode = "",inputVarConfirmationMode = "",utterance = "";
		boolean dtmfuseSlots = false;
		float confidence; 
		float inputVarConfidence;

		inputMode = promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_INPUTMODE).getStringValue();
		dtmfuseSlots = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_DTMF_GRAMMARS_USE_SLOTS).getBooleanValue();

		result = promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_RESULT).getStringValue();
		utterance=promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_UTTERANCE).getStringValue();
		value=promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_VALUE).getStringValue();
		confidence = Float.parseFloat(promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_CONFIDENCE).getStringValue());
		inputVarConfidence = Float.parseFloat(inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_HIGH_CONFIDENCE_LEVEL).getStringValue());
		confirmationMode = promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_CONFIRMATION__MODE).getStringValue();
		String collection=inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_DYNAMIC_VALUES).getStringValue();
		String privateFlag=inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_PRIVATE_DATA).getStringValue();

		utterance = utterance.replaceAll("'", "");
		mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, IProjectVariables.PROMPT_AND_COLLECT_FIELD_UTTERANCE).setValue(utterance);

		if (((Constants.DTMF).equalsIgnoreCase(inputMode)) && !dtmfuseSlots){
			int i = value.indexOf("'");
			int a= value.indexOf("\"");
			if(mySession.isAppTraceEnabled()){
				{trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"I : "+i );
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"A : "+a );
				}
			}
			if ((i != -1) || (a != -1)){
				value = utterance;
				mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, IProjectVariables.PROMPT_AND_COLLECT_FIELD_VALUE).setValue(value);
				mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, IProjectVariables.PROMPT_AND_COLLECT_FIELD_RESULT).setValue(value);
			}
			mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, IProjectVariables.PROMPT_AND_COLLECT_FIELD_RESULT).setValue(value);
		}

		if(mySession.isAppTraceEnabled())
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"InputMode : "+inputMode);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"DTMF USE Slots : "+dtmfuseSlots);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Private Data : "+privateFlag);
			if(Constants.FALSE.equalsIgnoreCase(privateFlag)){
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Prompt and Collect Result : "+result);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Prompt and Collect Value : "+mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, IProjectVariables.PROMPT_AND_COLLECT_FIELD_VALUE).getStringValue());
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Prompt and Collect Utterance : "+mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, IProjectVariables.PROMPT_AND_COLLECT_FIELD_UTTERANCE).getStringValue());
			}	
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Prompt and Collect Confidence : "+confidence);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"High Confidence Level : "+inputVarConfidence);
		}

		if(Constants.VOICE.equalsIgnoreCase(inputMode)||(Constants.DTMF.equalsIgnoreCase(inputMode)&&dtmfuseSlots))
		{
			promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_VALUE).setValue(result);
		}
		if(Constants.FALSE.equalsIgnoreCase(privateFlag)){
			if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Prompt and Collect Value : "+promptVar.getComplexVariable().getField(IProjectVariables.PROMPT_AND_COLLECT_FIELD_VALUE).getStringValue());}
		}

		/**
		 * Checks for the more option flag and more option dynamic Values 
		 */
		result=mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT, IProjectVariables.PROMPT_AND_COLLECT_FIELD_RESULT).getStringValue();
		if(Constants.FALSE.equalsIgnoreCase(privateFlag)){
			if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Menu Options Result -----"+result);}
		}
		String menuOptions=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_MENU_OPTIONS).getStringValue();
		String moreOptionFlag=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_FLAG).getStringValue();
		if(result.contains(Constants.DYNA)){
			if(menuOptions.equalsIgnoreCase(Constants.NONE)){
				String dynamicValues=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_DYNAMIC_VALUES).getStringValue();
				String[] dynmVal=null;
				if(!dynamicValues.equalsIgnoreCase(Constants.NONE)){
					dynmVal=dynamicValues.split(Constants.COMMA);
					for (int i = 0; i < dynmVal.length; i++) {
						if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic Values : "+ i+ " " + dynmVal[i]);}
					}	
				}
				int counter=mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_MORE_OPTION_COUNT).getIntValue();
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Counter Value : "+ counter);
				int moreOptionCount=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_COUNT).getIntValue();
				String[] collectionArr = collection.split(Constants.COMMA);
				int length=collectionArr.length;
				int dynamicValueCount=0;
				String dynaResult="";

				/**
				 * if the dynamic Grammar is enabled
				 * Based on the option entered the corresponing value in the more option dynamic constraint is returned
				 */
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Length :  "+ length);}

				result=result.substring(result.length()-1);
				if(length>moreOptionCount ){
					if(counter==1&& Integer.parseInt(result)<=moreOptionCount){
						dynamicValueCount=Integer.parseInt(result);
						dynaResult=dynmVal[dynamicValueCount-1];
					}
					else{
						if(Integer.parseInt(result)==(moreOptionCount+1)){
							dynaResult=Constants.MORE;
						}else{
							dynamicValueCount=(counter-1)*moreOptionCount+Integer.parseInt(result);
							dynaResult=dynmVal[dynamicValueCount-1];
						}	
					}
				}
				else{
					dynamicValueCount=Integer.parseInt(result);
					dynaResult=dynmVal[dynamicValueCount-1];
				}

				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic Value Count : "+ dynamicValueCount);}
				if(Constants.FALSE.equalsIgnoreCase(privateFlag)){
					if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic Result Value : "+ dynaResult);}
				}

				mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT,IProjectVariables.PROMPT_AND_COLLECT_FIELD_RESULT).setValue(dynaResult);
				mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT,IProjectVariables.PROMPT_AND_COLLECT_FIELD_VALUE).setValue(dynaResult);
				}
			}
			else{
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"----- Menu options available and the Dyna grammar is used");}
				result=result.substring(result.length()-1);
				mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT,IProjectVariables.PROMPT_AND_COLLECT_FIELD_RESULT).setValue(result);
				mySession.getVariableField(IProjectVariables.PROMPT_AND_COLLECT,IProjectVariables.PROMPT_AND_COLLECT_FIELD_VALUE).setValue(result);

			}
		}
	}
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:35 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:35 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:35 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "PromptAndCollect:RESULT", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:REPEAT", true).setDebugId(375)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Manage Repeat : ", "inputVariables:manageRepeat").setDebugId(383));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "inputVariables:manageRepeat", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(381)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("IDM_Variables:repeatCount").setDebugId(1924));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "IDM_Variables:repeatCount", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "inputVariables:repeatCount", true).setDebugId(1925)).evaluate(mySession)) {
					actions = new java.util.ArrayList(3);
					actions.add(new com.avaya.sce.runtime.varoperations.EmptyCollection("COLLECTIONINITIALPROMPT").setDebugId(2137));
					actions.add(new com.avaya.sce.runtime.varoperations.EmptyCollection("COLLECTIONINITIALREPROMPT").setDebugId(2138));
					actions.add(new com.avaya.sce.runtime.Next("AssignRepeatInitalPrmt", "ManageRepeat = true").setDebugId(382));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(6);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("FLAGS:MAXTRY", "CONSTANTS:TRUE", false).setDebugId(2040));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "No Match Limit Prompt : ", "inputVariables:repeatMaxTryPrompt").setDebugId(2041));
					actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONINITIALPROMPT", "inputVariables:repeatMaxTryPrompt", "*", false).setDebugId(2042));
					actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("COLLECTIONINITIALPROMPT").setDebugId(2043));
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Repeat Limit Prompt Collection : ", "COLLECTIONINITIALPROMPT").setDebugId(2044));
					actions.add(new com.avaya.sce.runtime.Next("PlayNINM", "Repeat Count Exceeded").setDebugId(1927));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("SetOutputParams", "ManageRepeat = false").setDebugId(385));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "PromptAndCollect:RESULT", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:HELP", true).setDebugId(388)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "inputVariables:helpPrompt", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "CONSTANTS:NONE", true).setDebugId(389)).evaluate(mySession)) {
				actions = new java.util.ArrayList(4);
				actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONINITIALPROMPT", "inputVariables:helpPrompt", "*", false).setDebugId(390));
				actions.add(new com.avaya.sce.runtime.varoperations.ResetCollection("COLLECTIONINITIALPROMPT").setDebugId(391));
				actions.add(new com.avaya.sce.runtime.varoperations.NextInCollection("COLLECTIONINITIALPROMPT").setDebugId(392));
				actions.add(new com.avaya.sce.runtime.Next("PlayHelpPrompt", "HelpPrompt").setDebugId(393));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("SetOutputParams", "NoHelpPrompt").setDebugId(394));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "inputVariables:moreOptionFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1710)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Prompt and collect result", "PromptAndCollect").setDebugId(1751));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition7", "PromptAndCollect:RESULT", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:MORE", true).setDebugId(1469)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition8", "inputVariables:NINMCommonCounterFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1965)).evaluate(mySession)) {
					actions = new java.util.ArrayList(5);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:noinputcount", "CONSTANTS:ZERO", false).setDebugId(1966));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:nomatchcount", "CONSTANTS:ZERO", false).setDebugId(1967));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:constraintcount", "CONSTANTS:ZERO", false).setDebugId(1968));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:globalCount", "CONSTANTS:ZERO", false).setDebugId(2113));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:repeatCount", "CONSTANTS:ZERO", false).setDebugId(1961));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				}

				actions = new java.util.ArrayList(6);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Count before more", "IDM_Variables:moreOptionCount").setDebugId(1618));
				actions.add(new com.avaya.sce.runtime.varoperations.Add("IDM_Variables:moreOptionCount", "IDM_Variables:moreOptionCount", false, "CONSTANTS:ONE", false).setDebugId(1616));
				actions.add(new com.avaya.sce.runtime.varoperations.Subtract("IDM_Variables:dynamicCollectionLength", "IDM_Variables:dynamicCollectionLength", false, "inputVariables:moreOptionCount", false).setDebugId(1684));
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Count After more", "IDM_Variables:moreOptionCount").setDebugId(1619));
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Length after more option", "IDM_Variables:dynamicCollectionLength").setDebugId(1687));
				actions.add(new com.avaya.sce.runtime.Next("AssignMoreInitialPrmt", "More Option").setDebugId(1502));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}


			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition9", "PromptAndCollect:RESULT", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:PREVIOUS", true).setDebugId(1761)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition10", "inputVariables:moreOptionPreviousMenuFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1757)).evaluate(mySession)) {

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition11", "IDM_Variables:moreOptionCount", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:ONE", true).setDebugId(1970)).evaluate(mySession)) {
						actions = new java.util.ArrayList(1);
						actions.add(new com.avaya.sce.runtime.Next("NoMatch", "No Match").setDebugId(1971));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					} else {

						if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition12", "inputVariables:NINMCommonCounterFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(1974)).evaluate(mySession)) {
							actions = new java.util.ArrayList(5);
							actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:noinputcount", "CONSTANTS:ZERO", false).setDebugId(1975));
							actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:nomatchcount", "CONSTANTS:ZERO", false).setDebugId(1976));
							actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:constraintcount", "CONSTANTS:ZERO", false).setDebugId(1977));
							actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:repeatCount", "CONSTANTS:ZERO", false).setDebugId(1978));
							actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:globalCount", "CONSTANTS:ZERO", false).setDebugId(2115));
							if(evaluateActions(actions, mySession)) {
								return true;
							}
							actions = null;

						}

						actions = new java.util.ArrayList(7);
						actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Count Before Previous", "IDM_Variables:moreOptionCount").setDebugId(1620));
						actions.add(new com.avaya.sce.runtime.varoperations.Assign("IDM_Variables:repeatCount", "CONSTANTS:ZERO", false).setDebugId(1962));
						actions.add(new com.avaya.sce.runtime.varoperations.Subtract("IDM_Variables:moreOptionCount", "IDM_Variables:moreOptionCount", false, "CONSTANTS:ONE", false).setDebugId(1617));
						actions.add(new com.avaya.sce.runtime.varoperations.Add("IDM_Variables:dynamicCollectionLength", "IDM_Variables:dynamicCollectionLength", false, "inputVariables:moreOptionCount", false).setDebugId(1686));
						actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Count after Previous", "IDM_Variables:moreOptionCount").setDebugId(1621));
						actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Length after previous option", "IDM_Variables:dynamicCollectionLength").setDebugId(1688));
						actions.add(new com.avaya.sce.runtime.Next("AssignPreviousIniitalPrmt", "Previous").setDebugId(1510));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;
					}


				}

				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("NoMatch", "PreviousFlag=False").setDebugId(1762));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("CheckSuccessConfirmation", "Success ").setDebugId(1752));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("CheckSuccessConfirmation", "NoConfirmation").setDebugId(464));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
