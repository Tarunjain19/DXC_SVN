package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2013-OCT-28  02:03:26 PM
 */
public class AssignMoreInitialPrmt extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2013-OCT-28  02:03:26 PM
	 */
	public AssignMoreInitialPrmt() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		IVariable inputVar = mySession.getVariable(IProjectVariables.INPUT_VARIABLES);
		String initialPrompt = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_INITIAL_PROMPT).getStringValue();
		String moreOptionFlag = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_FLAG).getStringValue();
		String previousMenuFlag = inputVar.getComplexVariable().getField(IProjectVariables.INPUT_VARIABLES_FIELD_MORE_OPTION_PREVIOUS_MENU_FLAG).getStringValue();
		int counter = mySession.getVariableField(IProjectVariables.IDM__VARIABLES,IProjectVariables.IDM__VARIABLES_FIELD_MORE_OPTION_COUNT).getIntValue();

		if(mySession.isAppTraceEnabled())
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "More Option Flag : " + moreOptionFlag);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Previous Menu Flag :" + previousMenuFlag);
		}

		try{
			if(moreOptionFlag.equalsIgnoreCase(Constants.TRUE)){
				if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Counter Before More: " + counter);}
				String[] prmt=initialPrompt.split("\\|");						
				if(mySession.isAppTraceEnabled()){mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "More Initial Prompt" + prmt[counter-1]);}
				mySession.getVariable(IProjectVariables.COLLECTIONMOREINITIALPROMPT).getSimpleVariable().setValue(prmt[counter-1]);
			}
	}catch (Exception e) {
		e.printStackTrace();
	}
	super.requestBegin(mySession);
}

/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("CheckSuccessConfirmation", "No more option");
		next.setDebugId(1601);
		return next;
	}
/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:32 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(4);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "More Option Count : ", "IDM_Variables:moreOptionCount").setDebugId(1602));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Collection Size : ", "CollectionSize").setDebugId(1603));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "More Option Last Set Flag: ", "FLAGS:moreOptionLastSetFlag").setDebugId(1604));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "FLAGS:moreOptionLastSetFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:FALSE", true).setDebugId(1605)).evaluate(mySession)) {
			actions = new java.util.ArrayList(9);
			actions.add(new com.avaya.sce.runtime.varoperations.DeleteFromCollection("COLLECTIONINITIALREPROMPT").setDebugId(2110));
			actions.add(new com.avaya.sce.runtime.varoperations.DeleteFromCollection("COLLECTIONINITIALPROMPT").setDebugId(2111));
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONINITIALPROMPT", "COLLECTIONMOREINITIALPROMPT", "*", false).setDebugId(1609));
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONINITIALREPROMPT", "COLLECTIONMOREINITIALPROMPT", "*", false).setDebugId(1854));
			actions.add(new com.avaya.sce.runtime.varoperations.Parse("COLLECTIONMOREINITIALPRMTTEMP", "COLLECTIONMOREINITIALPROMPT", "*", false).setDebugId(2179));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Collection initial prompt after More", "COLLECTIONINITIALPROMPT").setDebugId(1612));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "More Initial Prmt Temp", "COLLECTIONMOREINITIALPRMTTEMP").setDebugId(2181));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Counter Value after More", "IDM_Variables:moreOptionCount").setDebugId(1611));
			actions.add(new com.avaya.sce.runtime.Next("IsConstraintListAvailable", "More Option").setDebugId(1606));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
