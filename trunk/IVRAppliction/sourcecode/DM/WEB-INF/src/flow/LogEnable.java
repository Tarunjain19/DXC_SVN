package flow;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.dm.util.Constants;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2014-FEB-19  07:06:53 PM
 */
public class LogEnable extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2014-FEB-19  07:06:53 PM
	 */
	public LogEnable() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		ITraceInfo trace = mySession.getTraceOutput();

		try{
			String logEnabled=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_LOGGING_ENABLED).getStringValue();
			boolean loggingEnabled=Boolean.valueOf(logEnabled);

			if(!Constants.NONE.equalsIgnoreCase(logEnabled)){
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"DM Trace Enabled :"+logEnabled);}
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"DM Trace Enabled :"+loggingEnabled);}
			}
			
			String sessionId = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_SESSIONID).getStringValue();
			String appMainsessionId = String.valueOf(mySession.getProperty(Constants.SESSION_ID));
			
			if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Session ID :"+sessionId);}
			if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"App Session ID :"+appMainsessionId);}
			if(!loggingEnabled && sessionId.equalsIgnoreCase(appMainsessionId)){
				String loggerName=mySession.getVariableField(IProjectVariables.INPUT_VARIABLES,IProjectVariables.INPUT_VARIABLES_FIELD_LOGGER_NAME).getStringValue();
				Logger logger=Logger.getLogger(Constants.LOGGER_INIT_NAME + loggerName);
				//Level level=logger.getLevel();
				Level level= (Level) mySession.getProperty(Constants.LOGGER_LEVEL);
				logger.setLevel(level);
				//mySession.setProperty(Constants.LOGGER_LEVEL, level);
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Logger Name :"+loggerName);}
				if(mySession.isAppTraceEnabled()){trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Switching ON Trace ");}
				
			}
			
		}catch (Exception e) {
			// do nothing
		}
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:30 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("SetReport", "Default");
		next.setDebugId(1868);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:30 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-04  04:23:30 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
