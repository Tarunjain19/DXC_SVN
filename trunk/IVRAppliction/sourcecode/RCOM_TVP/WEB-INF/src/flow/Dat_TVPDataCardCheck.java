package flow;



import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.hp.utilities.IVRConstants;
import com.hp.utilities.TVP_Properties;
import com.rcom.otherflows.model.ValidateDataCardNumber;

import com.rcom.otherflows.resource.IVRDBServiceInstance;


import com.servion.util.IVRDataBean;





/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-OCT-27  08:17:28 AM
 */
public class Dat_TVPDataCardCheck extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-OCT-27  08:17:28 AM
	 */
	public Dat_TVPDataCardCheck() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:34 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:34 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
	/*	
		TVP_Properties tvpProp = null;
		
		ValidateDataCardNumber validateDatacardNumber = new ValidateDataCardNumber();
		String verifyMDN = IVRConstants.EMPTY_QUOTES;
		String strValidationFlag = IVRConstants.EMPTY_QUOTES;
		String strDataType = IVRConstants.EMPTY_QUOTES;
		String strApplication = IVRConstants.EMPTY_QUOTES;
		String transfer_Message = IVRConstants.EMPTY_QUOTES;
		IVRDataBean ivrDataBean = (IVRDataBean) mySession.getProperty(IVRConstants.IVRDATABEAN);	
		ITraceInfo itraceInfo = null;
		String strDataCardFlag = "";

		//ValidateDataCardNumber validateDataCardNumber = null;
		String strValidNumberFlag = "";
						
		try {
						

		    tvpProp = TVP_Properties.getInstance((mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_CONFIG_FILE_PATH).getStringValue()),mySession);	
		    itraceInfo = mySession.getTraceOutput();   
			
			verifyMDN = mySession.getVariableField(IProjectVariables.CALL_INFO, IProjectVariables.CALL_INFO_FIELD_TVP_MDN).getStringValue();
			strDataType=tvpProp.getProperty(mySession, IVRConstants.DATA_TYPE).trim();
			strApplication=tvpProp.getProperty(mySession, IVRConstants.APPLICATION_NAME).trim();
			
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "DataCard validation MDN :"+verifyMDN);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "DataCard validation Datatype :"+strDataType);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "DataCard validation Aplication :"+strApplication);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "Product type :"+mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_PRODUCT_TYPE).getStringValue());
			if(mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_PRODUCT_TYPE).getStringValue().equalsIgnoreCase(IVRConstants.DONGLE))
			{
			/*Setting input parameter for DataCard*/
			/*itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "DataCard validation MDN :"+verifyMDN);
			validateDatacardNumber = new ValidateDataCardNumber();
			validateDatacardNumber.setDataCardNumber(verifyMDN);
			validateDatacardNumber.setDataType(strDataType);
			validateDatacardNumber.setAppName(strApplication);
			
			
			
			/*Invoking DB*/
			
			
		/*	
			
			
			validateDatacardNumber = IVRDBServiceInstance.getIVRDBInstance().checkDataCardNumberHardCoding(ivrDataBean, validateDatacardNumber);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "Datacard for validation :"+validateDatacardNumber.toString());
			
				if(validateDatacardNumber.getFlag()!=null){
					strValidationFlag = validateDatacardNumber.getFlag();
					itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,  "Datacard for validation flag:"+strValidationFlag);
						if(strValidationFlag.equalsIgnoreCase(IVRConstants.SUCCESS))
							{
							mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_DATA_CARD_VALIDATION).setValue(IVRConstants.SUCCESS);
							transfer_Message = IVRConstants.MOBILE+IVRConstants.UNDER_SCORE+IVRConstants.TRANSFER;
							itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer MessageKey :" + transfer_Message);
							mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_ANN__TRANSFER).setValue(tvpProp.getProperty(mySession, transfer_Message));
							mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_PRODUCT_TYPE).setValue(IVRConstants.DONGLE);
							}
				 }
			
				else
					mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_DATA_CARD_VALIDATION).setValue(IVRConstants.FAILURE);
			}
			
			
			//Setting success java execute signal to OD code
			mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_JAVA__ERROR).setValue(false);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# TVPDatacard.java Java_Error is set to: " + false );

			
		} catch (Exception e) {
			//Setting failure java execute signal to OD code
			mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_JAVA__ERROR).setValue(true);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "# TVPDatacard.java Java_Error is set to: " + true );
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "# ERROR: Exception - TVPDatacard.java:- " + e.getMessage());
			System.out.println(e);
	}*/

	}

	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:34 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("CallInfo:ani", "Pnc_GetSIMNumber:value", false).setDebugId(240));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "TVP_VARs:Java_Error", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(162)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Call_TransferCall", "ErrorTrans").setDebugId(163));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "TVP_VARs:dataCardValidation", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:SUCCESS", true).setDebugId(164)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Call_ValidateTVPStatus", "Success-Dongle").setDebugId(167));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Ann_NoDataFound", "NoDataFound").setDebugId(165));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
