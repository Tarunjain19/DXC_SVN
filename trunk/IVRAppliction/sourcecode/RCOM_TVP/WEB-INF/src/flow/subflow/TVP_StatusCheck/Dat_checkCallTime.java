package flow.subflow.TVP_StatusCheck;

import javax.rmi.CORBA.Tie;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.hp.utilities.IVRConstants;
import com.hp.utilities.TVP_Properties;
import com.hp.utilities.TVP_Utilities;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-OCT-27  02:53:42 PM
 */
public class Dat_checkCallTime extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:53:42 PM
	 */
	public Dat_checkCallTime() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:39 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:39 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:39 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "TVP_VARs:Java_Error", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(199)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TVP_StatusCheck-Ret_Xfer", "Error").setDebugId(200));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "TVP_VARs:NO_DATA", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(204)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("TVP_VARs:NO_DATA", "false", true).setDebugId(206));
			actions.add(new com.avaya.sce.runtime.Next("TVP_StatusCheck-Ret_Xfer", "NoData").setDebugId(205));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "TVP_VARs:tvpReqInProcess", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(60)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TVP_StatusCheck-Ann_InProcess", "InProcess").setDebugId(62));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TVP_StatusCheck-checkService", "Default").setDebugId(56));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}


	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		TVP_Properties tvpProperties = null;
		TVP_Utilities tvputi         = null;
		ITraceInfo itraceInfo        = mySession.getTraceOutput();
		long timeinMinutes;
		String timeDiff;
		String configPath;
		try
		{
		
		tvputi =  new TVP_Utilities();
	    configPath = mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_CONFIG_FILE_PATH).getStringValue();
		tvpProperties = TVP_Properties.getInstance(configPath,mySession);
		itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "#FilePath "+ configPath);
		long updateInterval = IVRConstants.TVP_UPDATE_INTERVAL;//mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_UPDATE_INTERVAL).getLongValue();
		String timeFormat = tvpProperties.getProperty(mySession, IVRConstants.TIME_FORMAT);
		itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Update interval in tvp process :"+ updateInterval);
		itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dateformat :"+ timeFormat);
		
		
		
		timeDiff=tvputi.getTimeDiff(mySession, timeFormat);
		if(timeDiff!=null)
		{
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "TimeDiff :"+ timeDiff);
			String timeParts[]=timeDiff.split("_");
			long DayDiff=Long.parseLong(timeParts[0]);
			long HourDiff=Long.parseLong(timeParts[1]);
			long secondDiff=Long.parseLong(timeParts[2]);
				if(DayDiff==0&&(HourDiff<2))
					mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_TVP_REQ_IN_PROCESS).setValue(IVRConstants.TRUE);
				else
			
				mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_TVP_REQ_IN_PROCESS).setValue(IVRConstants.FALSE);
	  
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG," Request in process Time "+ mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_TVP_REQ_IN_PROCESS).getStringValue());
		}
		else
			mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_NO__DATA).setValue(true);

				
	}
		catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_JAVA__ERROR).setValue(true);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "# Dat_checkCallTime.java Java_Error is set to: " + e );
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "# ERROR: Exception - Dat_checkCallTime.java:- " + e);
		}
}
}
