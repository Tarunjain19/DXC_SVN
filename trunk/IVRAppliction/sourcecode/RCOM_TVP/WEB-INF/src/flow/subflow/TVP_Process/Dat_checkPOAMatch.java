package flow.subflow.TVP_Process;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.hp.utilities.IVRConstants;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-OCT-27  07:33:45 PM
 */
public class Dat_checkPOAMatch extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-OCT-27  07:33:45 PM
	 */
	public Dat_checkPOAMatch() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:40 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("TVP_Process-POA_Incorrect", "Default");
		next.setDebugId(97);
		return next;
	}
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		String strPath = null;
		String collectPOA =IVRConstants.EMPTY_QUOTES,tempStr=IVRConstants.EMPTY_QUOTES;
		ITraceInfo itraceInfo =mySession.getTraceOutput();
		try
		{
					
		strPath=mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_DTMF_PATH).getStringValue();
		strPath=strPath+mySession.getVariableField(IProjectVariables.MNU__CONF_PAO,IProjectVariables.MNU__CONF_PAO_FIELD_VALUE).getStringValue()+"|";
		mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_DTMF_PATH).setValue(strPath);
		itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Is DOB entered :"+mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_IS_DOBENTRY).getStringValue());
		if(!mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_IS_DOBENTRY).getStringValue().equalsIgnoreCase(IVRConstants.trueStr))
		{
			tempStr		= mySession.getVariableField(IProjectVariables.PRMT__ENTER_4DIGIT_POA,IProjectVariables.PRMT__ENTER_4DIGIT_POA_FIELD_VALUE).getStringValue();
			collectPOA	= mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_COLLECT_POA).getStringValue();
			mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_COLLECT_POA).setValue(collectPOA+"|"+tempStr);
		
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"4 Digit POAID entered :"+tempStr);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"POAID Collect String :"+collectPOA+"|"+tempStr);
		}
		mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_JAVA__ERROR).setValue(false);
		itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"JAVA_ERROR is set to:"+false);
		
		}
		catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_JAVA__ERROR).setValue(true);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"JAVA_ERROR is set to:"+true);
		}
		
	
	}
	
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:40 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:40 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "TVP_VARs:Java_Error", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:TRUE", true).setDebugId(339)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TVP_Process-Ret_Xfer").setDebugId(340));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "TVP_VARs:isDOBEntry", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(449)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TVP_Process-Dat_DOBCheck", "DOB").setDebugId(450));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "TVP_VARs:enterDOI", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(226)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TVP_Process-Dat_POADateMach", "DOICheck").setDebugId(227));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "Prmt_enter4digitPOA:value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "TVP_VARs:POA_last4digit", true).setDebugId(98)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TVP_Process-Prmt_enterDOB", "tvpMatched").setDebugId(99));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("TVP_VARs:isPOAMatch", "false", true).setDebugId(201));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	
}
