package flow.subflow.TVP_DataConscentFlagUpdation;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.hp.utilities.IVRConstants;
import com.hp.utilities.TVP_Properties;
import com.hp.utilities.TVP_Utilities;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.rcom.hostinterface.view.ReqTvpUpdate;
import com.servion.rcom.hostinterface.view.ResTvpUpdate;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2015-OCT-28  06:23:56 AM
 */
public class Srv_FlagUpdate extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-OCT-28  06:23:56 AM
	 */
	public Srv_FlagUpdate() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Voice Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2015-OCT-28  06:23:56 AM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {
		
		ITraceInfo itraceInfo  = null;
		TVP_Properties tvpProp = null;
		String dataConscent    = IVRConstants.N;
		  try
		    {
				IVRDataBean ivrDataBean = (IVRDataBean) mySession.getProperty(IVRConstants.IVRDATABEAN);
				GetReportObject getReportObject = ivrDataBean.getGetReportObject();
				IVRREPORTDATA ivrreportdata = getReportObject.getIvrreportdata();
				CALLINFO callInfo = ivrreportdata.getCALLINFO();
				
			    ReqTvpUpdate req		= new ReqTvpUpdate();
			    IVRWebService ivrWebService = new IVRWebServiceImpl(); 
			  //  Logger logger;
			    itraceInfo = mySession.getTraceOutput();
			    tvpProp = TVP_Properties.getInstance((mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_CONFIG_FILE_PATH).getStringValue()),mySession);	
			    TVP_Utilities uti = new TVP_Utilities();
			    
			    String format = tvpProp.getProperty(mySession, IVRConstants.DATE_FORMAT);
			   
			   //Getting data conscent flag
			
			    	dataConscent = mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_DATA_CONSCENT).getStringValue();
			    
			/*Creating request */  
			   
				String requestID	= TVP_Utilities.generateUniqueID();
			    String mdn			= mySession.getVariableField(IProjectVariables.CALL_INFO, IProjectVariables.CALL_INFO_FIELD_TVP_MDN).getStringValue();
			    String languageID	= mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_CURRENT_LANGUAGE).getStringValue();
			    String requestType	= tvpProp.getProperty(mySession, IVRConstants.TVP_STATUS_UPDATE);
			    String source		= tvpProp.getProperty(mySession, IVRConstants.SOURCE);
			    String date         = TVP_Utilities.getToday(format);
			    String isPODOI		= mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_ENTER_DOI).getStringValue();
			    
			    //tvp STATUS FLAG SET TO Y
			    String tvpstatusFlag=IVRConstants.Y;	  
			
			    
			    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request for TVP flag Update Source:" + source);
			    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request for TVP flag Update MDN:" + mdn);
			    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request for TVP flag Update Request Date:" + date);
			    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request for TVP flag Update LanguageID:" + languageID);
			    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request for TVP flag Update RequestId:" + requestID);
			    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request for TVP flag Update Request Type:" + requestType);
			    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request for TVP flag Update DataConscent:" + dataConscent);
			    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request for TVP flag Update TVP_Status_Flag:" + tvpstatusFlag);
			    
			 
			    
			    req.setMDN(mdn);
			    req.setLangId(languageID);
			    req.setREQUESTDATE(date);
			    req.setRequestId(requestID);
			    req.setREQUESTTYPE(requestType);
			    req.setSOURCE(source);
			    req.setDATACONSENT(dataConscent);
			    req.setTVPSTATUSFLAG_VALUE(tvpstatusFlag);
			
			  
			    
			    /*testing Code
					    ResTvpUpdate resTvpUpdate=new ResTvpUpdate();
					  resTvpUpdate.setOUT_MSG("Success");
					    resTvpUpdate.setOUT_STATUS("Success");
					    resTvpUpdate.setOUT_STATUS_CODE("102");
					    resTvpUpdate.setResponseCode("0");*/
			    /*Callinf TIBCO flag update url*/
				
				ResTvpUpdate resTvpUpdate = ivrWebService.executeTVPUpdateRequest(ivrDataBean, req);
				
			    if(resTvpUpdate!=null)
			    {
			    	itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# TeleUpdateTVPFlag.java TIBCO__FLAG_UPDATE__RES_FIELD_OUT__STATUS " + resTvpUpdate.getOUT_STATUS() );
			    	itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# TeleUpdateTVPFlag.java TIBCO__FLAG_UPDATE__RES_FIELD_OUT__MSG " + resTvpUpdate.getOUT_MSG() );
			    	
			    	itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# TeleUpdateTVPFlag.java TIBCO__FLAG_UPDATE__RES_FIELD_RESPONSE_CODE " +resTvpUpdate.getResponseCode());
			    	itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# TeleUpdateTVPFlag.java TIBCO__FLAG_UPDATE__RES_FIELD_OUT__STATUS cODE " + resTvpUpdate.getOUT_STATUS_CODE());
			    	
					mySession.getVariableField(IProjectVariables.TIBCO__FLAG_UPDATE__RES,IProjectVariables.TIBCO__FLAG_UPDATE__RES_FIELD_OUT__MSG).setValue(resTvpUpdate.getOUT_MSG());
					mySession.getVariableField(IProjectVariables.TIBCO__FLAG_UPDATE__RES,IProjectVariables.TIBCO__FLAG_UPDATE__RES_FIELD_OUT__STATUS).setValue(resTvpUpdate.getOUT_STATUS());
					mySession.getVariableField(IProjectVariables.TIBCO__FLAG_UPDATE__RES,IProjectVariables.TIBCO__FLAG_UPDATE__RES_FIELD_OUT__STATUS__CODE).setValue(resTvpUpdate.getResponseCode());
					mySession.getVariableField(IProjectVariables.TIBCO__FLAG_UPDATE__RES,IProjectVariables.TIBCO__FLAG_UPDATE__RES_FIELD_RESPONSE_CODE).setValue(resTvpUpdate.getOUT_STATUS_CODE());
					
				
			    }
			    
			    
			   	//Setting success java execute signal to OD code
								mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_JAVA__ERROR).setValue(false);
								itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# TeleUpdateTVPFlag.java Java_Error is set to: " + false );
								
					
			    }
	    catch(Exception e)
	    {
	    	//Setting failure java execute signal to OD code
			mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_JAVA__ERROR).setValue(true);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "# Srv_FlagUpdate.java Java_Error is set to: " + true );
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "# ERROR: Exception - Srv_FlagUpdate.java:- " + e.getMessage());
		    }


	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:42 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("TVP_DataConscentFlagUpdation-Dat_checkDataConscent", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
