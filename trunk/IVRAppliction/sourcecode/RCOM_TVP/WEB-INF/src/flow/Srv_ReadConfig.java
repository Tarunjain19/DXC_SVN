package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import  com.hp.utilities.IVRConstants;
import  com.hp.utilities.TVP_Properties;
import com.hp.utilities.TVP_Utilities;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.IVRRoutingInfo;
import com.servion.prepaid.report.*;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppConstant;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;
/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2015-OCT-12  12:43:23 PM
 */
public class Srv_ReadConfig extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-OCT-12  12:43:23 PM
	 */
	public Srv_ReadConfig() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Voice Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2015-OCT-12  12:43:23 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		//: Add your code here!
		//initializing variables
		Logger logger = Logger.getLogger("Dialog.Designer.TraceWriter.RCOM_TVP");
		
		String projectFilePath				= IVRConstants.EMPTY_QUOTES;
		String configFilePath				= IVRConstants.EMPTY_QUOTES;
		String hostConfig					= IVRConstants.EMPTY_QUOTES;
		
		String MPP_IP_Address				= IVRConstants.EMPTY_QUOTES;
		String channelNo 					= IVRConstants.EMPTY_QUOTES;
		String callRefId 					= IVRConstants.EMPTY_QUOTES;
		String ani                          = IVRConstants.EMPTY_QUOTES;
		String dnis                         = IVRConstants.EMPTY_QUOTES;
		String url	                        = IVRConstants.EMPTY_QUOTES;
		String circleID                     = IVRConstants.EMPTY_QUOTES; 
		String vprdnis                      = IVRConstants.EMPTY_QUOTES; 
		String sessionID                    = IVRConstants.EMPTY_QUOTES;
		String ivrID						= IVRConstants.EMPTY_QUOTES;
		String errorCode					= IVRConstants.EMPTY_QUOTES;
		String start_time					= IVRConstants.EMPTY_QUOTES;
		String transfer_vdn					= IVRConstants.EMPTY_QUOTES;
		String transfer_Message				= IVRConstants.EMPTY_QUOTES;	
			
			
		int total_Langs						= IVRConstants.ZERO;
		String languages					= "HIN,ENG";//Setting languages for worst case if config also fails.
		String[] languageArray				= null;
		String waveFileName					= IVRConstants.EMPTY_QUOTES;
		String press_wav_filename			= IVRConstants.EMPTY_QUOTES;//This will store the starting press 0 file name with last digit missing. Eg. 45100.wave will be saved 4510. 
		//IVR will append what ever values are requred 1 or 2 so that it will play Press 1 or press 2 accordingly.
		String number_wav_filename			= IVRConstants.EMPTY_QUOTES;
		//Retries and counts
		int default_Value					= IVRConstants.TWO; // this value will be set if fails to load
		String max_no_input					= IVRConstants.EMPTY_QUOTES;
		String max_no_match					= IVRConstants.EMPTY_QUOTES;
		String max_invalid_retry			= IVRConstants.EMPTY_QUOTES;
		String time_out_second				= IVRConstants.EMPTY_QUOTES;
		//tvp status codes
		String rcom_static_phrasepath		= IVRConstants.EMPTY_QUOTES;
		String tvp_pendingStatus 			= IVRConstants.EMPTY_QUOTES;
		String tvp_d_NegativeStatus 			= IVRConstants.EMPTY_QUOTES;
		String tvp_confirmStatus 			= IVRConstants.EMPTY_QUOTES;
		String tvp_positiveStatus 			= IVRConstants.EMPTY_QUOTES;
		String tvp_abortStatus 				= IVRConstants.EMPTY_QUOTES;
		String tvp_negativeStatus 			= IVRConstants.EMPTY_QUOTES;
		String dnisKey		 				= IVRConstants.EMPTY_QUOTES;
		String isDongle		 				= IVRConstants.EMPTY_QUOTES;
		String hotFlashID					= IVRConstants.EMPTY_QUOTES;
		
		boolean flag						= false;
		
		//Work hours
		String tvp_workHours		=IVRConstants.EMPTY_QUOTES;
		int tvp_updateInterval =IVRConstants.ZERO;
		
		TVP_Properties TVP_Prop = null;
		TVP_Utilities tvp_Utlities = null;

		ITraceInfo itraceInfo = null; // Used or trace logging purpose.
		/*For Logging */
		
		projectFilePath = getServletContext().getInitParameter(AppConstant.PROPERTY_FILE_PATH);
		
		AppProperties.setInstance(hostConfig,projectFilePath);
		
		/**Declaration for Reporting **/
		String PropertyKey= IVRConstants.EMPTY_QUOTES;
		String appName = IVRConstants.EMPTY_QUOTES,PropertyLocation= IVRConstants.EMPTY_QUOTES,defaultLanguage = IVRConstants.EMPTY_QUOTES;
		
		IVRREPORTDATA ivrreportdata = null;
		InetAddress ip = null;
		CALLINFO callInfo  = null;
		SimpleDateFormat dateFormat = null;
		String callerType = IVRConstants.EMPTY_QUOTES;
		String phrasePath=null;
		
		try{
			
			// Loading the trace object
			itraceInfo = mySession.getTraceOutput();
			
			tvp_Utlities = new TVP_Utilities();
			SimpleDateFormat datFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "##### RCOM_TVP_IVR: Starting the call #####");
			start_time = tvp_Utlities.getDateTime();
			
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Call Start Time:" + start_time);
			ani = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			dnis = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();			
			
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "RCOM_TVP_IVR ANI: " + ani);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "RCOM_TVP_IVR DNIS: " + dnis);
			
			//Load the config.properties
			//projectFilePath = mySession.getAbsoluteProjectFilePath();
			
			projectFilePath = getServletContext().getInitParameter(AppConstant.PROPERTY_FILE_PATH);
			String ivrConfigFileName = getServletContext().getInitParameter(AppConstant.IVR_CONFIG);
			
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# projectFilePath: " + projectFilePath);
			
			configFilePath = projectFilePath +ivrConfigFileName ;
		/*	if (projectFilePath.indexOf("/")>-1){
				//configFilePath = projectFilePath + "/data/config/config.properties";
				//TODO needs to add replace function
				
				
				configFilePath = projectFilePath +ivrConfigFileName ;
			}
			else {
				//configFilePath = projectFilePath + "\\data\\config\\config.properties";
				
			}*/

			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# configFilePath: " + configFilePath);

			TVP_Prop = TVP_Properties.getInstance(configFilePath, mySession);	
			mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_CONFIG_FILE_PATH).setValue(configFilePath);
			// Fetching the IP Address of the VoicePortal that handled the call - this helps in identifying the VoicePortal region
			MPP_IP_Address = mySession.getRequest().getRemoteAddr();
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# MPP IP: " + MPP_IP_Address);
			
			
			//Getting service desk work hours
			
			
			mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_TIME_FORMAT).setValue(TVP_Prop.getProperty(mySession, IVRConstants.TIME_FORMAT));			
			
			
			
			//Loading HotflahID
			
			hotFlashID =mySession.getVariableField(IProjectVariables.HOT_FLASH_IDS,IProjectVariables.HOT_FLASH_IDS_FIELD_HF__PA___0_0_1).getStringValue();
			mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO,IProjectVariables.HOT_FLASH_INFO_FIELD_ANN_ID).setValue(hotFlashID);
			//Loading transfer message
			
			transfer_Message = IVRConstants.MOBILE+IVRConstants.UNDER_SCORE+IVRConstants.TRANSFER;
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer MessageKey :" + transfer_Message);
			mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_ANN__TRANSFER).setValue(TVP_Prop.getProperty(mySession, transfer_Message));
			mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_PRODUCT_TYPE).setValue(IVRConstants.MOBILE);
			mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_SERVICE_TYPE).setValue(IVRConstants.NODATA);
			mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_TRANSFER_REASON_CODE).setValue("TELV_TR_0001");
			 itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Product Type : "+mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_PRODUCT_TYPE).getStringValue());
			//Loading retries and counters
			max_no_input = TVP_Prop.getProperty(mySession,IVRConstants.MAX_NO_INPUT).trim();
		
			max_no_match = TVP_Prop.getProperty(mySession,IVRConstants.MAX_NO_NOMATCH).trim();
			max_invalid_retry = TVP_Prop.getProperty(mySession,IVRConstants.MAX_INVALID_RETRY).trim();
			time_out_second = TVP_Prop.getProperty(mySession,IVRConstants.TIME_OUT_SECOND).trim();
			rcom_static_phrasepath = TVP_Prop.getProperty(mySession,IVRConstants.STATIC_PHRASE_PATH).trim();
			waveFileName	=	TVP_Prop.getProperty(mySession,IVRConstants.LANGUAGE_WAVE_FILENAME).trim();
			press_wav_filename	=	TVP_Prop.getProperty(mySession,IVRConstants.PRESS_WAVE_FILE_NAME).trim();
			number_wav_filename	=	TVP_Prop.getProperty(mySession,IVRConstants.NUMBER_WAVE_FILE_NAME).trim();
			
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# Config Values: max_no_input- " + max_no_input+", max_no_match-"+ max_no_match +
					", max_invalid_retry-" + max_invalid_retry + ", time_out_second-" + time_out_second);
			
			//loading config values to OD session 
			if(max_no_input != null && max_no_input.length() > 0){ 
								
				mySession.getVariableField(IProjectVariables.VAR__CONFIG, IProjectVariables.VAR__CONFIG_FIELD_MAX__NOINPUT).setValue(Integer.parseInt(max_no_input.trim()));
			}
			
			if(max_no_match != null && max_no_match.length() > 0){ 
				
				mySession.getVariableField(IProjectVariables.VAR__CONFIG, IProjectVariables.VAR__CONFIG_FIELD_MAX__NOMATCH).setValue(Integer.parseInt(max_no_match.trim()));
			}
			
			if(max_invalid_retry != null && max_invalid_retry.length() > 0){ 
				
				mySession.getVariableField(IProjectVariables.VAR__CONFIG, IProjectVariables.VAR__CONFIG_FIELD_MAX__INVALIDRETRY).setValue(Integer.parseInt(max_invalid_retry.trim()));
			}
			
			if(time_out_second != null && time_out_second.length() > 0){ 
				
				mySession.getVariableField(IProjectVariables.VAR__CONFIG, IProjectVariables.VAR__CONFIG_FIELD_MAX__TIMEOUT).setValue(Integer.parseInt(time_out_second.trim()));
			}
			
			
			
			if(rcom_static_phrasepath != null && rcom_static_phrasepath.length() > 0){ 
			
				// Appending backslash  if not given in URL.
				if(!rcom_static_phrasepath.endsWith("/")) rcom_static_phrasepath += "/";
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# rcom_static_phrasepath: " + rcom_static_phrasepath);
				
				mySession.getVariableField(IProjectVariables.VAR__PHRASES, IProjectVariables.VAR__PHRASES_FIELD_STATIC__URL).setValue(rcom_static_phrasepath.trim());
			}
			// Incoming CLI correction
	
			
			if(ani != null && (ani.length() > 10)){
				
				ani = ani.trim();
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "CLI from ACD::" + ani);
				ani = tvp_Utlities.getLastTenDigits(ani);
				mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).setValue(ani);
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "CLI after Correction::" +ani);
				
				}
			
		
			if(dnis != null && (dnis.length() >= 10)){
				
				dnis = dnis.trim();
				
				if(dnis.length() > 10){
					dnis = tvp_Utlities.getLastTenDigits(dnis);
				}
				
				
				circleID = TVP_Prop.getProperty(mySession,dnis).trim();//We will get the circle id if the dnis exists in the config. If not we need to get the default langs
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# Circle for DNIS "+ dnis + " - " + circleID );
				mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_CIRCLE).setValue(circleID);
			}
			
			circleID = TVP_Prop.getProperty(mySession,dnis).trim();//We will get the circle id if the dnis exists in the config. If not we need to get the default langs
			mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_CIRCLE).setValue(circleID);
			if(circleID != null && (circleID.length() > 1)){// Circle id must be 2 digits or more.
				
				//Getting the languages for the circle
				languages = TVP_Prop.getProperty(mySession, circleID).trim();
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# DNIS based languages: " + languages +" for DNIS-"+ dnis + ", Circle : "+ circleID);
				//Checking if the languages are not given for the circle, getting the default languages.
				if(languages == null || languages.isEmpty()){					
					//Getting the default languages
					languages = TVP_Prop.getProperty(mySession, IVRConstants.DEFAULT_LANGUAGE).trim();
					itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# Languages for circle "+ circleID + " is not set,  Getting Default languages: " + languages );
				}
			}else{
				//Getting the default languages
				languages = TVP_Prop.getProperty(mySession, IVRConstants.DEFAULT_LANGUAGE).trim();
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# No DNIS, Default languageslanguages: " + languages );
			}
			
			languageArray = languages.split(",");
			total_Langs = languageArray.length;
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# Total languages: " + total_Langs );
			
			//Setting the languages on OD session variable
			
			for(int count = 0;count < total_Langs;count++){
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# Copying language to OD session variable: " + languageArray[count] );
				mySession.getVariableField(IProjectVariables.VAR__LANGUAGES, IVRConstants.LANG_ + Integer.toString(count + 1)).setValue(languageArray[count].trim());
			}
			//Setting total languages
			
			mySession.getVariableField(IProjectVariables.VAR__LANGUAGES, IProjectVariables.VAR__LANGUAGES_FIELD_TOTAL__LANGS).setValue(total_Langs);
			
			if(waveFileName != null && waveFileName.length() > 0){ 
				
				mySession.getVariableField(IProjectVariables.VAR__LANGUAGES, IProjectVariables.VAR__LANGUAGES_FIELD_WAVE__FILENAME).setValue(waveFileName);
			}
			
			if(press_wav_filename != null && press_wav_filename.length() > 0){ 
				
				mySession.getVariableField(IProjectVariables.VAR__LANGUAGES, IProjectVariables.VAR__LANGUAGES_FIELD_PRESS__WAVE__FILENAME).setValue(press_wav_filename);
			}
			if(number_wav_filename != null && number_wav_filename.length() > 0){ 
				
				mySession.getVariableField(IProjectVariables.VAR__LANGUAGES, IProjectVariables.VAR__LANGUAGES_FIELD_NUMBER__WAVE__FILENAME).setValue(number_wav_filename);
			}
			
			
			
			
			//Getting the customer type from configuration file by checkiang is the DNIS belongs to Dongle customer.
			
			
		    dnisKey = dnis + "_DONGLE";
		    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dnis Key :"+dnisKey);
		    isDongle = TVP_Prop.getProperty(mySession,dnisKey);
		   
		    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# Checking Dongle or Handset Customer: Key-"+ dnisKey + ", Value-" + isDongle );
		    
		    if(isDongle != null && (isDongle.length() > 0)){
					   
			    if(isDongle.equalsIgnoreCase(IVRConstants.YES))
			    {
			    	
		    		flag = true; 
		    		itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# It is Dongle customer: " );
		    		transfer_Message = IVRConstants.DONGLE+IVRConstants.UNDER_SCORE+IVRConstants.TRANSFER;
					itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer MessageKey :" + transfer_Message);
					mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_PRODUCT_TYPE).setValue(IVRConstants.DONGLE);
					mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_ANN__TRANSFER).setValue(TVP_Prop.getProperty(mySession, transfer_Message).trim());
					
					//Loading HotflahID
					
					hotFlashID =mySession.getVariableField(IProjectVariables.HOT_FLASH_IDS,IProjectVariables.HOT_FLASH_IDS_FIELD_HF__PA___0_0_2).getStringValue();
					mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO,IProjectVariables.HOT_FLASH_INFO_FIELD_ANN_ID).setValue(hotFlashID);
					
			    }
		  	 
			   else {
			    	itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "#Hotline Array Doesn't Matche Diverting to 59059 Leg. ");
		    		flag = false;
			    }

		    } else{
		    	itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "#Hotline Array Doesn't Matche Diverting to 59059 Leg.");
		    }
		    
		    mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_IS_DONGLE).setValue(flag);
			
			/**Assign**/
			/**For Reporting **/
			try{
				sessionID = mySession.getSessionId();
				TVP_Prop = TVP_Properties.getInstance((mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_CONFIG_FILE_PATH).getStringValue()),mySession);	
 
			
			//	defaultLanguage = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(AppConstant.DefaultLanguage);
				appName = TVP_Prop.getProperty(mySession, IVRConstants.APPLICATION_NAME).trim();
				mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_APP_NAME).setValue(appName);
				PropertyKey = mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_CONFIG_FILE_PATH).getStringValue();
				dateFormat =  new SimpleDateFormat(TVP_Prop.getProperty(mySession, IVRConstants.DATE_FORMAT).toString());
						
				//trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "default Language :"+defaultLanguage);
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Application Name :"+appName);
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Property Key :"+ PropertyKey);
				
				/**Create IVR Bean Object**/
				IVRDataBean objIVRDataBean = new IVRDataBean(); 
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Session ID :"+sessionID);
				objIVRDataBean.setLogger(logger);
				objIVRDataBean.setSessionID(sessionID);
				
				
				/**Default Property File Location**/
				
			
				/**Reporting**/
				GetReportObject objGetReportObject = new GetReportObject();
				objGetReportObject.createIVRReportObject();
				objIVRDataBean.setGetReportObject(objGetReportObject);
				mySession.setProperty(IVRConstants.IVRDATABEAN,objIVRDataBean);
				
				ivrreportdata = objGetReportObject.createIVRReportObject();
				mySession.setProperty(IVRConstants.BEANREPORTDATA, objGetReportObject);
				objGetReportObject.setIvrreportdata(ivrreportdata);
				objIVRDataBean.setGetReportObject(objGetReportObject);
				
				/**Assigning call info data for report*/
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_INFO,"/*** Call Info Reporting is started ***/");
				ip= InetAddress.getLocalHost();
				phrasePath=mySession.getVariableField(IProjectVariables.VAR__PHRASES, IProjectVariables.VAR__PHRASES_FIELD_STATIC__URL).toString();
				callInfo  = ivrreportdata.getCALLINFO();
				callInfo.setUNIQUECALLID(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue());
				callInfo.setSESSIONID(mySession.getSessionId());
				callInfo.setVXMLIP(String.valueOf(ip));
				callInfo.setSTARTDATETIME(datFormat.format(new Date()));
				callInfo.setAPPNAME(appName);
				callInfo.setCALLERTYPE(IVRConstants.NODATA);
				callInfo.setCATEGORY(IVRConstants.NODATA);
				callInfo.setCIRCLEID(circleID);
				callInfo.setCLI(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
				callInfo.setDNIS(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
				callInfo.setDNISTYPE(IVRConstants.NODATA);
				callInfo.setHUB(TVP_Prop.getProperty(mySession, IVRConstants.HUB));
				callInfo.setAGENTID(IVRConstants.NODATA);
				callInfo.setAGENTEXTN(IVRConstants.NODATA);
				callInfo.setTRANSCODE(IVRConstants.NODATA);
				callInfo.setTRANSCODE(IVRConstants.NODATA);
				callInfo.setLANGUAGEFROM(IVRConstants.NODATA);
				callInfo.setLANGUAGETO(IVRConstants.NODATA);
				callInfo.setTAGGING(IVRConstants.NODATA);
				callInfo.setTRANSFERVDN(IVRConstants.NODATA);
				callInfo.setUUIDATA(IVRConstants.NODATA);
				callInfo.setABANDONEDFLAG(IVRConstants.NODATA);
				callInfo.setTRANSTOIVR(IVRConstants.NODATA);
				callInfo.setSKILLNAME(IVRConstants.NODATA);
				callInfo.setLANGCODE(IVRConstants.NODATA);
				callInfo.setENDDATETIME(IVRConstants.NODATA);
				callInfo.setDTMFPATH(phrasePath);
				callInfo.setMENUPATH(IVRConstants.NODATA);
				callInfo.setCALLERPATH(IVRConstants.NODATA);
				callInfo.setLASTMENUACCESSED(IVRConstants.NODATA);
				callInfo.setDISPOSITION(IVRConstants.NODATA);
				callInfo.setCALLENDREASON(AppConstant.IVR_DISCONNECT);
				callInfo.setHOWCALLENDED(AppConstant.DISCONNECT);
				callInfo.setERRREASON(AppConstant.NA);
				ivrreportdata.setCALLINFO(callInfo);
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Circle in Reporting CallInfo :"+callInfo.getCIRCLEID());
				objIVRDataBean.setGetReportObject(objGetReportObject);
				/**Setting Bean in Session **/
				mySession.setProperty(IVRConstants.IVRDATABEAN,objIVRDataBean);
			}catch(Exception e){
				itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"ERROR in Call Start :"+e);
				e.printStackTrace();
			}
			
			
			//Setting success java execute signal to OD code
			mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_JAVA__ERROR).setValue(false);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "# Srv_ReadConfig.java Java_Error is set to false");
			
		}catch(Exception e){
			
			//Setting failure java execute signal to OD code
			mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_JAVA__ERROR).setValue(true);
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "# Srv_ReadConfig.java Java_Error is set to: " + true );
			itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "# ERROR: Exception - Srv_ReadConfig.java:- " + e.getMessage());
			e.printStackTrace();
		}
	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:34 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("Dat_CheckStatus", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
