package cantonese.phrasesets;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Logger;

import javax.servlet.ServletContext;

import com.avaya.sce.runtime.ExternalPhrase;
import com.avaya.sce.runtime.Phrase;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariableField;
import com.avaya.sce.runtimecommon.LoggerUtil;

import flow.IProjectVariables;

/**
 * This phraseset class will be automatically populated with data from the 
 * phraseset project file.  Manual edits should only be outside of the tag 
 * areas or overridden methods. 
 * Class created on: 
 * Last generated by Orchestration Designer at: 2017-OCT-10  10:42:12 AM
 * 
 *  Update naming of phraseFile file  on 2017-10-27
 *  The reason is the MPP server will be crashed the message file, then we add timestamp value to  
 *  file name for handling crash issue.
 *  
 */
public class DynamicPhraseset extends com.avaya.sce.runtime.Phraseset { 

	//{{START:CLASS:FIELDS
	private static final com.avaya.sce.runtime.Phraseset.PhraseMap PHRASE_MAP;
	//}}END:CLASS:FIELDS

	/**
	 * Static initializer
	 */
	static {
		//{{START:PHRASESET:STATIC

		// Create the phrase map, then populate with phrases
		PHRASE_MAP = new com.avaya.sce.runtime.Phraseset.PhraseMap(2);
		com.avaya.sce.runtime.Phrase phrase;

		// phrase: fakePhrase
		com.avaya.sce.runtime.Phraseset.addLocalPhrase(PHRASE_MAP, "fakePhrase", "fakePhrase.wav", ""); 

		//}}END:PHRASESET:STATIC
	}
	/**
	 * Returns the Phrase with the given name.  To override the
	 * behavior and dynamically return a different Phrase object,
	 * override the method "hookGetPhrase(...)".
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2020-MAR-05  05:05:19 PM
	 * @see com.avaya.sce.runtime.Phraseset#getPhrase(String) 
	 */ 
	public com.avaya.sce.runtime.Phrase getPhrase(String phraseName) {
		return(getPhrase(DynamicPhraseset.PHRASE_MAP, phraseName));
	}
	
	// @Override
	// 2017-10-10 11:17
	public Phrase hookGetPhrase(String phraseName, Phrase phrase) {
		
		// Retrieve the value of the phase number input by the user  
		IVariableField field = getMySession().getVariableField
									(IProjectVariables.ASK_INPUT_FILE_NUMBER,
									IProjectVariables.ASK_INPUT_FILE_NUMBER_FIELD_INTERPRETATION
									);
		/*
		try	{
			String phraseNumber = field.getStringValue().trim();
			
			// Retrieve the requested URL
			URL url = new URL(getMySession().
							getRequest().getRequestURL().toString());
							
			// Retrieve the base path to the phrase from the web.xml file
			ServletContext context = getMySession().getServlet().getServletContext();
			String basePath = context.getInitParameter("myphrases.basepath");
			
			// Create a link to the phrase file
			String urlString = new URL(url.getProtocol(), url.getHost(),
								url.getPort(),"/" + basePath + "/" + phraseNumber +
								".wav").toString();
			
			//  Create the phrase with the URL string by invoking the ExternalPhrase class 
			phrase = new ExternalPhrase(urlString);
		}
		catch (MalformedURLException e)	{
			throw new SCERuntimeException("Error generating URL to phrase file.", e);
		}
		*/
		Logger logger = Logger.getLogger("Dialog.Designer.TraceWriter.RecordMessageFile");
		
		String phraseNumber = field.getStringValue().trim();
		
		try {		
			// Retrieve the requested URL
			URL url = new URL(getMySession().
					getRequest().getRequestURL().toString());

			// Retrieve the phraseFile path and url to the phrase from the web.xml file
			ServletContext servletContext = getMySession().getServlet().getServletContext();
			String projectPhraseFileUrl = servletContext.getInitParameter("data.phraseFile.url");
			String projectPhraseFilePath = servletContext.getInitParameter("data.phraseFile.path");
		
			// get timestamp string for stored recording file
			String timeStampString = new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date());
			
			// Create a link to the phrase file
			//String phraseFileUrl = new URL(url.getProtocol(), url.getHost(),
			//		url.getPort(),"/" + projectPhraseFileUrl + "/" + phraseNumber + 
			//		".wav").toString();
			String phraseFileUrl = new URL(url.getProtocol(), url.getHost(),
					url.getPort(),"/" + projectPhraseFileUrl + "/" + phraseNumber + "_" + timeStampString +
					".wav").toString();
			//logger.info("PHRASE FILE URL:"+phraseFileUrl);
		
			// get source recording file  
			String recordingFilePath = getMySession().getVariableField(IProjectVariables.RECORDING_FILE_PATH).getStringValue().trim();		
			String recordingFileName = recordingFilePath+phraseNumber+".wav";
			//logger.info("PHRASE FILE IN:"+recordingFileName);
		
			// create destination file link
			//File tempDir = (File) servletContext.getAttribute("javax.servlet.context.tempdir");
			String currentPath = servletContext.getRealPath("/");
			
			// create file path for temp store
			//String phraseFile = currentPath + projectPhraseFilePath + File.separator + phraseNumber +  ".wav";
			String phraseFile = currentPath + projectPhraseFilePath + File.separator + phraseNumber + "_" + timeStampString + ".wav";
			//logger.info("PHRASE FILE OUT:"+phraseFile);
	
			// copy file to project phraseFile folder
			OutputStream outputStream = new FileOutputStream(phraseFile);			
			Path inputPath = Paths.get(recordingFileName);			
			
			Files.copy(inputPath, outputStream);
			
			// set phrase to a new phrase
			phrase = new ExternalPhrase(phraseFileUrl);
		}
		catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		catch (IOException ioe) {
			ioe.printStackTrace();
		}
		
		
		return(phrase);
	}
}
