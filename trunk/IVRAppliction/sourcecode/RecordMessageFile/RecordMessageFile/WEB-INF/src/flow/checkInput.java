package flow;

import java.io.File;
import java.util.Arrays;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2017-OCT-06  04:31:57 PM
 */
public class checkInput extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2017-OCT-06  04:31:57 PM
	 */
	public checkInput() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Voice Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2017-OCT-06  04:31:57 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!
		String fileDestination = mySession.getVariableField(IProjectVariables.RECORDING_FILE_PATH).getStringValue();
		String userInput = mySession.getVariableField(IProjectVariables.ASK_INPUT_FILE_NUMBER, IProjectVariables.ASK_INPUT_FILE_NUMBER_FIELD_VALUE).getStringValue();
		
		String fileName = fileDestination+userInput+".wav";	
		
		File fileForCheck = new File(fileName);
		
		// hard code input file name in to a list of file name variable for prompt out file name.
		String[] userInputArray = userInput.split("");
		
		if (userInputArray.length != 5 ) {
			mySession.getVariableField(IProjectVariables.INVALID_TYPE)
						.setValue(mySession.getVariableField(IProjectVariables.NO_MATCH__DESC).getStringValue());
		}
		else {
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME, IProjectVariables.RECORDING_FILE_NAME_FIELD_FIRST_CHAR).setValue(userInputArray[0]);
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME, IProjectVariables.RECORDING_FILE_NAME_FIELD_SECOND_CHAR).setValue(userInputArray[1]);
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME, IProjectVariables.RECORDING_FILE_NAME_FIELD_THIRD_CHAR).setValue(userInputArray[2]);
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME, IProjectVariables.RECORDING_FILE_NAME_FIELD_FOURTH_CHAR).setValue(userInputArray[3]);
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME, IProjectVariables.RECORDING_FILE_NAME_FIELD_FIFTH_CHAR).setValue(userInputArray[4]);
		}
			
		/*
		// check file exists
		if (fileForCheck.exists()) {
			// hard code input file name in to a list of file name variable for prompt out file name.
			String[] userInputArray = org.apache.commons.lang.StringUtils.split(userInput);
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME_FIELD_FIRST_CHAR).setValue(userInputArray[0]);
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME_FIELD_SECOND_CHAR).setValue(userInputArray[1]);
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME_FIELD_THIRD_CHAR).setValue(userInputArray[2]);
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME_FIELD_FOURTH_CHAR).setValue(userInputArray[3]);
			mySession.getVariableField(IProjectVariables.RECORDING_FILE_NAME_FIELD_FIFTH_CHAR).setValue(userInputArray[4]);

			File tempFile = new File(mySession.getVariableField(IProjectVariables.TEMP_RECORDED_FILE_PATH).getStringValue()+mySession.getVariableField(IProjectVariables.TEMP_RECORDED_FILE_NAME).getStringValue());
			
			// move target file to temp folder
			try {
				java.io.FileInputStream inputStream = new java.io.FileInputStream(fileForCheck);
				java.io.FileOutputStream outputStream = new java.io.FileOutputStream(tempFile);
				
				byte[] fileBuffer = new byte[1024];
				
				int fileLength;
				
				while ((fileLength = inputStream.read(fileBuffer)) > 0) {
					outputStream.write(fileBuffer, 0, fileLength);
				}
				
				inputStream.close();
				outputStream.close();
			}
			catch (java.io.IOException e){
				// temp exception catch solution
				mySession.getVariableField(IProjectVariables.INVALID_TYPE).setValue(mySession.getVariableField(IProjectVariables.FILE_NOT_FIND__DESC).getStringValue());
			}
		}
		else {
			// if file not exists, set the in valid type for file not find
			mySession.getVariableField(IProjectVariables.INVALID_TYPE).setValue(mySession.getVariableField(IProjectVariables.FILE_NOT_FIND__DESC).getStringValue());
		}
		*/
		

	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2018-AUG-21  03:39:44 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("untitledData1", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
