package flow;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;

import javax.servlet.ServletContext;

import org.apache.commons.lang.StringUtils;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.LoggerUtil;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2017-OCT-10  05:03:53 PM
 */
public class saveRecordingMessage extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2017-OCT-10  05:03:53 PM
	 */
	public saveRecordingMessage() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Voice Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2017-OCT-10  05:03:53 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!
		//Logger logger = Logger.getLogger("Dialog.Designer.TraceWriter.RecordMessageFile");
		
		
		try {
			String newRecordedMessageFile = mySession.getVariableField(IProjectVariables.RECORD_CONTENT, IProjectVariables.RECORD_CONTENT_FIELD_VALUE).getStringValue();
			String newRecordedMessagePath = mySession.getVariableField(IProjectVariables.NEW_RECORDED_FILE_PATH).getStringValue();
			String recordedMessageFileName = mySession.getVariableField(IProjectVariables.ASK_INPUT_FILE_NUMBER, IProjectVariables.ASK_INPUT_FILE_NUMBER_FIELD_VALUE).getStringValue();
			String recordedMessageFilePath = mySession.getVariableField(IProjectVariables.RECORDING_FILE_PATH).getStringValue();
			String recordedMessageFilePathName = recordedMessageFilePath+recordedMessageFileName+".wav";

			/*
			 * Add url encode on 2017.12.05 by Tony Ma
			 * As Wilson find that there an error when no call log id, the file name will include other name
			 * and spaces may also included. It affect to copy file for saving.
			 * 
			 * 2017.12.06 Tony Ma
			 * Endcode to url is not work
			 * Change to get the temp recording file name and using the loacl path for saving.
			 * 
			 */
			//logger.info("TEMP RECORD FILE:"+newRecordedMessageFile);
			//newRecordedMessageFile = URLEncoder.encode(newRecordedMessageFile, "UTF-8");
			LoggerUtil.writeTrace(mySession, ITraceInfo.TRACE_LEVEL_INFO, "New recorded message file url: " + newRecordedMessageFile);
			String newRecordedMessageFileName = StringUtils.substringAfterLast(newRecordedMessageFile, "/");
			LoggerUtil.writeTrace(mySession, ITraceInfo.TRACE_LEVEL_INFO, "New recorded message file name: " + newRecordedMessageFileName);
			
			// Retrieve the current real path
			ServletContext servletContext = mySession.getServlet().getServletContext();
			String currentPath = servletContext.getRealPath("/");
			
			// create url string for new recorded message file
			String newRevcordedMessageFileUrl = "file:///" + currentPath + "/" + newRecordedMessagePath + "/" + newRecordedMessageFileName;
			LoggerUtil.writeTrace(mySession, ITraceInfo.TRACE_LEVEL_INFO, newRevcordedMessageFileUrl);
			URL newRecordedMessageFileUrl = new URL(newRevcordedMessageFileUrl); 
			
			// convert recordedMessageFilePathName to File type
			File destinationFile = new File(recordedMessageFilePathName);
			
			LoggerUtil.writeTrace(mySession, ITraceInfo.TRACE_LEVEL_INFO,"TEMP RECORD FILE: "+newRecordedMessageFile);
			LoggerUtil.writeTrace(mySession, ITraceInfo.TRACE_LEVEL_INFO,"DESTINATION FILE: "+recordedMessageFilePathName);
			
			// copy recorded message file to store location
			copyFile(newRecordedMessageFileUrl, destinationFile, mySession);
		}
		catch (MalformedURLException e) {
			System.out.println("MalformedURLException: "+e.getMessage());
		}
		catch (IOException ioe) {
			System.out.println("IOException: "+ioe.getMessage());
		}

	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2018-AUG-21  03:39:44 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("returnRecordComplete", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
	/**
	 * This method is for copying file to other location and the code copy from development guide.
	 * 
	 * 2017.12.05 Tony Ma
	 * Add logger for logging copy file.
	 * 
	 * 2017.12.06 Tony Ma
	 * Remove logger
	 * Add SCESession for using LoggerUtil
	 * 
	 * @param source
	 * @param dest
	 * @throws IOException
	 */
	public static void copyFile(URL source, File dest, com.avaya.sce.runtimecommon.SCESession mySession) throws IOException {
		byte[] data = new byte[1024 * 10];
		int count = 0;
		InputStream sourceStream = source.openStream();
		FileOutputStream destStream = new FileOutputStream(dest);
		try {
			LoggerUtil.writeTrace(mySession, ITraceInfo.TRACE_LEVEL_INFO,"Start copying file...");
			do {
				count = sourceStream.read(data);
				if (count != -1) {
					destStream.write(data, 0, count);
				}
			} while (count != -1);
			LoggerUtil.writeTrace(mySession, ITraceInfo.TRACE_LEVEL_INFO,"Finished copying file");
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// close streams, ignore any exceptions closing streams
			if (sourceStream != null) {
				try {
					sourceStream.close();
				} catch (IOException e) {
				}
			}
			if (destStream != null) {
				try {
					destStream.close();
				} catch (IOException e) {
				}
			}
		}
	}
}
