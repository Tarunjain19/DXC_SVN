package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.bb.model.IVRRoutingInfo;
import com.rcom.bb.resource.IVRDBServiceInstance;
import com.rcom.broadband.Constants;
import com.rcom.broadband.StackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-22  12:11:21 PM
 */
public class DB_IVR_DNIS_Routing extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-22  12:11:21 PM
	 */
	public DB_IVR_DNIS_Routing() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		String defaultLanguage = Constants.EMPTY;
		String DNIS = Constants.EMPTY;
		String circle = Constants.EMPTY;
		String DM_Properties_Location = Constants.EMPTY;
		String circleLanguages = Constants.EMPTY;
		AppProperties ivrProperties = null;
		
		
		try{
			
			ivrProperties = AppProperties.GetInstance(Constants.IVR_CONFIG);
			
			ITraceInfo trace = mySession.getTraceOutput();
			DNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
			
			/*
			 * DB Hit to get Circle
			 */
			
			IVRRoutingInfo reqIvrRoutingInfo = new IVRRoutingInfo();
			reqIvrRoutingInfo.setDnis(DNIS);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Calling DB service IVRRoutingInfo to get circle.");
			IVRRoutingInfo resIvrRoutingInfo = IVRDBServiceInstance.getInstance().getIVRRoutingInfo((IVRDataBean)mySession.getProperty(Constants.IVR_DATA_BEAN), reqIvrRoutingInfo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "IVR Routing Info" +resIvrRoutingInfo.toString());
			
			/** Assign circle **/
			circle = resIvrRoutingInfo.getCircle();
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circle : " +circle);
			if(circle !=null && !circle.equalsIgnoreCase(Constants.EMPTY))
			{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).setValue(circle);
			}
			else
			{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).setValue("NA");
			}
			
			if(circle.equalsIgnoreCase(ivrProperties.getIVRProp(Constants.CIRCLE_TAMILNADU)))
			{
				defaultLanguage = ivrProperties.getIVRProp(Constants.LANGUAGE_TAMIL);
			}
			else if(circle.equalsIgnoreCase(ivrProperties.getIVRProp(Constants.CIRCLE_ANDHRAPRADESH)))
			{
				defaultLanguage = ivrProperties.getIVRProp(Constants.LANGUAGE_TELUGU);
			}
			else if(circle.equalsIgnoreCase(ivrProperties.getIVRProp(Constants.CIRCLE_KARNATAKA)))
			{
				defaultLanguage = ivrProperties.getIVRProp(Constants.LANGUAGE_KANNADA);
			}
			else if(circle.equalsIgnoreCase(ivrProperties.getIVRProp(Constants.CIRCLE_KERALA)))
			{
				defaultLanguage = ivrProperties.getIVRProp(Constants.LANGUAGE_MALAYALAM);
			}
			else
			{
				defaultLanguage = ivrProperties.getIVRProp(Constants.LANGUAGE_HINDI);
			}
			/** Assign Language List Code **/
			circleLanguages = resIvrRoutingInfo.getLanguage();
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE_LIST).setValue(circleLanguages);
			
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Default Language :"+defaultLanguage);
			
			if(defaultLanguage!=null && !Constants.EMPTY.equals(defaultLanguage))
			{
				mySession.setCurrentLanguage(defaultLanguage);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Default Language code for CV : " +defaultLanguage);
			}
			
			//Setting English DM properties location in project variable
			DM_Properties_Location = ivrProperties.getIVRProp(Constants.DM_PROPERTIES_LOCATION_ + defaultLanguage);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DM_Properties_Location  : " +DM_Properties_Location);
			
			if(DM_Properties_Location != null && !Constants.EMPTY.equalsIgnoreCase(DM_Properties_Location) && !Constants.N.equalsIgnoreCase(DM_Properties_Location))
			{
				mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__PROPERTIES_LOCATION).setValue(DM_Properties_Location);
			}
			else
			{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
				DM_Properties_Location = ivrProperties.getIVRProp(Constants.DEFAULT_PROPERTY_LOCATION);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"default properties Location :"+DM_Properties_Location);
				mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__PROPERTIES_LOCATION).setValue(DM_Properties_Location);
			}
			
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB__RESULT).setValue(Constants.SUCCESS);
			
			IVRDataBean ivrDataBean = (IVRDataBean)mySession.getProperty(Constants.IVR_DATA_BEAN);
			
			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			CALLINFO callInfo = getReportObject.getIvrreportdata().getCALLINFO();
			
			callInfo.setCIRCLEID(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue());
			getReportObject.getIvrreportdata().setCALLINFO(callInfo);
			ivrDataBean.setGetReportObject(getReportObject);
			mySession.setProperty(Constants.IVR_DATA_BEAN, ivrDataBean);
			
			
		}catch(Exception e)
		{
			
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB__RESULT).setValue(Constants.FAILURE);
			StackTrace.PrintException(e);
		}
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:56 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:56 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:56 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:DB_Result", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constants:success", true).setDebugId(341)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:DB_Result", "", true).setDebugId(8355));
			actions.add(new com.avaya.sce.runtime.Next("Welcome_PP", "(Success)").setDebugId(336));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferCode", "TransferCodes:DAKC_TR_0050", false).setDebugId(8354));
			actions.add(new com.avaya.sce.runtime.Next("Linkdown_PP", "(HostTimeout)").setDebugId(343));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
