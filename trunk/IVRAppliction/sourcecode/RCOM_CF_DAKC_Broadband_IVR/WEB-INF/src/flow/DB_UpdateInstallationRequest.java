package flow;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.bb.rcombbinst.model.InstallationInfo;
import com.rcom.bb.resource.IVRDBServiceInstance;
import com.rcom.broadband.Constants;
import com.rcom.broadband.StackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-18  01:39:50 PM
 */
public class DB_UpdateInstallationRequest extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-18  01:39:50 PM
	 */
	public DB_UpdateInstallationRequest() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
	
		String DB_Result = Constants.FAILURE;
		AppProperties ivrProperties = null;
		IVRDataBean ivrDataBean = null;
		
		String dd_date = null;
		String ani = null;
		String alt_no = null;
		String channelNo = null;
		String cid_no = null;
		String location = null;
		String circle = null;
		String southCircle = null;
		String pinCode = null;
		String reqType = null;
		String startTime = null;
		Date input_dd_Date = null;
		
		try
		{
		
			ITraceInfo trace = mySession.getTraceOutput();
			ivrProperties = AppProperties.GetInstance(Constants.IVR_CONFIG);
			
			/** getting the IVRData bean from session**/
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVR_DATA_BEAN);
			
			SimpleDateFormat format = new SimpleDateFormat(ivrProperties.getIVRProp(Constants.INSTALLATION_DD_DATE_FORMAT));
			dd_date = format.format(Calendar.getInstance().getTime());
			input_dd_Date = format.parse(dd_date);
			
			ani = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			channelNo = ivrProperties.getIVRProp(Constants.INSTALLATION_CHANNEL_NO);
			alt_no = mySession.getVariableField(IProjectVariables.GET_ALT_CONTACT_NO__PC, IProjectVariables.GET_ALT_CONTACT_NO__PC_FIELD_VALUE).getStringValue();
			cid_no = mySession.getVariableField(IProjectVariables.GET_CAFNUMBER__PC, IProjectVariables.GET_CAFNUMBER__PC_FIELD_VALUE).getStringValue();
			circle = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue();
			southCircle = ivrProperties.getIVRProp(Constants.SOUTH_CIRCLES);
			if(southCircle.contains(circle))
			{
				location = Constants.LOCATION_SOUTH;
			}
			else
			{
				location = Constants.LOCATION_DAKC;
			}
			
			pinCode = mySession.getVariableField(IProjectVariables.GET_PIN_CODE__PC, IProjectVariables.GET_PIN_CODE__PC_FIELD_VALUE).getStringValue();
			reqType = ivrProperties.getIVRProp(Constants.INSTALLATION_REQUEST_TYPE);
			
			format = new SimpleDateFormat(ivrProperties.getIVRProp(Constants.INSTALLATION_START_TIME_DATE_FORMAT));
			startTime = format.format(Calendar.getInstance().getTime());
			
			
			InstallationInfo installationInfo = new InstallationInfo();
			
			installationInfo.setANI(ani);
			installationInfo.setALT_NO(alt_no);
			installationInfo.setCHANNEL_NO(channelNo);
			installationInfo.setCID_NO(cid_no);
			installationInfo.setDD_DATE(input_dd_Date);
			installationInfo.setLOCATION(location);
			installationInfo.setPINCODE(pinCode);
			installationInfo.setREQ_TYPE(reqType);
			installationInfo.setSTART_TIME(startTime);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Before inserting installation request : " +installationInfo);
			installationInfo = IVRDBServiceInstance.getRCOMBBInstDataService().insertInstallationInfo(ivrDataBean, installationInfo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "After inserting installation request : " +installationInfo);
			
			if(installationInfo != null)
			{
				
				DB_Result = Constants.SUCCESS;
				
			}
			else
			{
				DB_Result = Constants.FAILURE;
			}
			
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB__RESULT).setValue(DB_Result);
			
		}catch(Exception e)
		{
			StackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB__RESULT).setValue(Constants.FAILURE);
		}
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:DB_Result", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constants:success", true).setDebugId(10771)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("InstallationReqSuccess_PP", "(Installation Req Success)").setDebugId(10774));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferCode", "TransferCodes:DAKC_TR_0082", false).setDebugId(10773));
			actions.add(new com.avaya.sce.runtime.Next("Check_SRC", "(Host Timeout)").setDebugId(10760));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
