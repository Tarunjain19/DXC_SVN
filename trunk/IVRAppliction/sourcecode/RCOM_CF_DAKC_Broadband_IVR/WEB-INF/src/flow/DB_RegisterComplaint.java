package flow;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.bb.rcombbcompl.model.ComplaintInfo;
import com.rcom.bb.resource.IVRDBServiceInstance;
import com.rcom.broadband.Constants;
import com.rcom.broadband.DynamicMenu;
import com.rcom.broadband.StackTrace;
import com.rcom.broadband.Utilities;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-24  06:05:39 PM
 */
public class DB_RegisterComplaint extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-24  06:05:39 PM
	 */
	public DB_RegisterComplaint() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
	
		IVRDataBean ivrDataBean = null;
		String appName = null;
		String key = null;
		String initialPrompt = null;
		
		String dbResult = Constants.FAILURE;
		
		String input_dd_date = null;
		Date dd_date = null;
		String caseId = null;
		String mdn = null;
		String status = null;
		String reqMod = null;
		String reqPeriod = null;
		String faxNo = null;
		String reqFor = null;
		String callingNo = null;
		String circleCode = null;
		String planType = null;
		
		try
		{
			ITraceInfo trace = mySession.getTraceOutput();
			
			AppProperties ivrProperties = AppProperties.GetInstance(Constants.IVR_CONFIG);
			ArrayList<String> dynamicList = new ArrayList<String>();
			
			/** getting the IVRData bean from session**/
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVR_DATA_BEAN);
			
			appName = ivrProperties.getIVRProp(Constants.APP_NAME);
			
			
			/*
			 * DB Hit to register complaint
			 * 
			 */
			
			
			SimpleDateFormat format = new SimpleDateFormat(ivrProperties.getIVRProp(Constants.COMPLAINT_REGISTRATION_DATE_FORMAT));
			input_dd_date = format.format(Calendar.getInstance().getTime());
			dd_date = format.parse(input_dd_date);
			
			caseId = Utilities.getComplaintRegistrationCaseID();
			caseId = "IVR" + caseId;
			
			mdn = mySession.getVariableField(IProjectVariables.GET_PHONE_NO__PC, IProjectVariables.GET_PHONE_NO__PC_FIELD_VALUE).getStringValue();
			status = ivrProperties.getIVRProp(Constants.COMPLAINT_REGISTRATION_STATUS);
			reqMod = ivrProperties.getIVRProp(Constants.COMPLAINT_REGISTRATION_REQMOD);
			reqPeriod = ivrProperties.getIVRProp(Constants.COMPLAINT_REGISTRATION_REQPERIOD);
			faxNo = ivrProperties.getIVRProp(Constants.COMPLAINT_REGISTRATION_FAX_NO);
			
			if(mySession.getVariableField(IProjectVariables.CONNECTION_NOT_WORKING__MN, IProjectVariables.CONNECTION_NOT_WORKING__MN_FIELD_VALUE).getStringValue().equalsIgnoreCase(mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_CONNECTION_MENU__RET_VAL__DEAD_PHONE).getStringValue()))
			{
				reqFor = Constants.COMPLAINT_REASON_DEAD_PHONE;
			}
			else if(mySession.getVariableField(IProjectVariables.CONNECTION_NOT_WORKING__MN, IProjectVariables.CONNECTION_NOT_WORKING__MN_FIELD_VALUE).getStringValue().equalsIgnoreCase(mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_CONNECTION_MENU__RET_VAL__PHONE_LINE_DIST).getStringValue()))
			{
				reqFor = Constants.COMPLAINT_REASON_PHONE_LINE_DISTURBANCE;
			}
			else
			{
				reqFor = Constants.COMPLIANT_REASON_INCOMING_CALL;
			}
			
			callingNo = mySession.getVariableField(IProjectVariables.GET_ALT_CONTACT_NO__PC, IProjectVariables.GET_ALT_CONTACT_NO__PC_FIELD_VALUE).getStringValue();
			circleCode = ivrProperties.getIVRProp(Constants.COMPLAINT_REGISTRATION_CIRCLE_CODE);
			planType = ivrProperties.getIVRProp(Constants.COMPLAINT_REGISTRATION_PLAN_TYPE);
			
			ComplaintInfo complaintInfo = new ComplaintInfo();
			
			complaintInfo.setDD_DATE(dd_date);
			complaintInfo.setICASEID(caseId);
			complaintInfo.setMDNNO(mdn);
			complaintInfo.setREQMOD(reqMod);
			complaintInfo.setREQPERIOD(reqPeriod);
			complaintInfo.setFAXNO(faxNo);
			complaintInfo.setREQFOR(reqFor);
			complaintInfo.setCALLING_NO(callingNo);
			complaintInfo.setCIRCLE_CODE(circleCode);
			complaintInfo.setPLANTYPE(planType);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Before inserting Complaint request : " +complaintInfo);
			complaintInfo = IVRDBServiceInstance.getRCOMBBComplDataService().registerNewComplaint(ivrDataBean, complaintInfo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "After inserting Complaint request : " +complaintInfo);
			
			if(complaintInfo != null)
			{
				dbResult = Constants.SUCCESS;
				
				key = appName+Constants.HYPEN_SEPERATOR+Constants.DAKC_MN_0015;
				initialPrompt = ivrProperties.getIVRProp(key);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Prompt Key : "+key);
				dynamicList.add(caseId);
				
				/** Invoking the playPromt method **/
				initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, Constants.NA, Constants.DAKC_MN_0015, trace);
				
				mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Initial Prompt :: "+initialPrompt);
				
				mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__RE_PROMPT_NO_INPUT).setValue(initialPrompt);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Reprompt No Input :: "+initialPrompt);
				
				mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__RE_PROMPT_NO_MATCH).setValue(initialPrompt);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Reprompt No Match Prompt :: "+initialPrompt);
				
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_REGISTER_COMPLAINT).setValue(mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_REGISTER_COMPLAINT__SUCCESS).getStringValue());
			}
			
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB__RESULT).setValue(dbResult);
			
		}catch(Exception e)
		{
			StackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB__RESULT).setValue(Constants.FAILURE);
		}
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:DB_Result", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constants:success", true).setDebugId(8765)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "appVariables:registerComplaint", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constants:RegisterComplaint_Success", true).setDebugId(8769)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:tries", "constants:One", false).setDebugId(6992));
				actions.add(new com.avaya.sce.runtime.Next("ComplaintNo_MN", "(Success)").setDebugId(6848));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferCode", "TransferCodes:DAKC_TR_0066", false).setDebugId(8771));
				actions.add(new com.avaya.sce.runtime.Next("Check_SRC", "(Failure)").setDebugId(8772));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferCode", "TransferCodes:DAKC_TR_0064", false).setDebugId(8767));
			actions.add(new com.avaya.sce.runtime.Next("Linkdown_PP", "(Host Timeout)").setDebugId(8768));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
