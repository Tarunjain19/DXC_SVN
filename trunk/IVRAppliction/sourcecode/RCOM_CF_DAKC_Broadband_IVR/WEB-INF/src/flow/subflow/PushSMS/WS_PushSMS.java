package flow.subflow.PushSMS;

import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.bb.model.PushSMSInfo;
import com.rcom.broadband.AppDataMap;
import com.rcom.broadband.Constants;
import com.rcom.broadband.SetPushSMS;
import com.rcom.broadband.StackTrace;
import com.servion.rcom.broadband.hostinterface.view.ReqPushSMS;
import com.servion.rcom.broadband.hostinterface.view.ResPushSMS;
import com.servion.rcom.broadband.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.broadband.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUL-14  10:23:05 AM
 */
public class WS_PushSMS extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUL-14  10:23:05 AM
	 */
	public WS_PushSMS() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo trace = mySession.getTraceOutput();
		
		Hashtable<String, String> smsHashTable = null;
		SetPushSMS setPushSMS = null;
		String strKeyword = Constants.EMPTY;
		PushSMSInfo pushSMSInfo = null;
		String strApplicationName = Constants.EMPTY,strCircle = Constants.EMPTY, strMsgText = Constants.EMPTY;
		String strSMSTemplate = Constants.EMPTY;
		Hashtable<String, PushSMSInfo> pushSMSHashTable = null;
		IVRDataBean ivrDataBean = null;
		ReqPushSMS reqPushSMS = null;
		ResPushSMS resPushSMS = null;
		IVRWebService ivrWebService = null;
		String mobileNo = null;
		String workNo = null;
		Hashtable<String, Hashtable<String, String>> smsHashTableDataIndexMap = null;
		
		try{
			
			pushSMSInfo = new PushSMSInfo();
			setPushSMS = new SetPushSMS();
			smsHashTable = (Hashtable<String, String>) mySession.getProperty(Constants.SMSDataMap);
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVR_DATA_BEAN);
			
			strCircle = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue();
			strApplicationName = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_APP_NAME).getStringValue();
			mobileNo = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_MOBILE_NO).getStringValue();
			workNo = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_WORK_PHONE).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Cricle ID :" + strCircle);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Key Word :" + strKeyword);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Applicatin Name :" + strApplicationName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Mobile No :" + mobileNo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Work No :" + workNo);
			
			pushSMSHashTable = (Hashtable<String, PushSMSInfo>) AppDataMap.getInstance(strApplicationName).getAppData(Constants.PUSH_SMS+strApplicationName);
			
			if(pushSMSHashTable != null){
					
				strKeyword = smsHashTable.get(Constants.SMSKeyword);
				pushSMSInfo = pushSMSHashTable.get(strCircle+Constants.UNDERSCORE+strKeyword);
				if(pushSMSInfo!=null){
					strMsgText = pushSMSInfo.getSmsText();
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText From DB :" + strMsgText);
					if(strMsgText != null){
						
						strMsgText = setPushSMS.getSMSText(strMsgText, smsHashTable);
						
						reqPushSMS = new ReqPushSMS();
						ivrWebService = new IVRWebServiceImpl();
						
						if(mobileNo != null && !Constants.EMPTY.equalsIgnoreCase(mobileNo) && !Constants.NA.equalsIgnoreCase(mobileNo))
						{
							reqPushSMS.setMDN(mobileNo);
							reqPushSMS.setMessageText(strMsgText);
							
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Sending to Mobile No:"+mobileNo);
							resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
							
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
						}
						else if(workNo != null && !Constants.EMPTY.equalsIgnoreCase(workNo) && !Constants.NA.equalsIgnoreCase(workNo))
						{
							reqPushSMS.setMDN(workNo);
							reqPushSMS.setMessageText(strMsgText);
							
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Sending to Work No:"+workNo);
							resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
							
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
						}
						else
						{
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "No Work phone (or) Mobile phone configured for this BAN, hence SMS not sent.");
						}
					}else{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not for that Circle");
					}
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this service");
				}
				
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this application");
			}
		}catch (Exception e) {
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in sending SMS");
			
		}finally{
			ivrDataBean = null;pushSMSInfo = null;
			reqPushSMS = null;setPushSMS = null;
			resPushSMS = null;
			ivrWebService = null;
		}
	}

	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:58 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("PushSMS-Return", "Default");
		next.setDebugId(7);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:58 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:58 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
