package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.secretariat.Constants;
import com.rcom.secretariat.Utilities;
import com.servion.util.AppProperties;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-19  11:46:45 AM
 */
public class WithinBusinessHour_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-19  11:46:45 AM
	 */
	public WithinBusinessHour_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo trace = mySession.getTraceOutput();
		
		String wirelessOrBroadband_MN_RetVal = mySession.getVariableField(IProjectVariables.WIRELESS_OR_BROADBAND__MN, IProjectVariables.WIRELESS_OR_BROADBAND__MN_FIELD_VALUE).getStringValue();
		
		AppProperties ivrProperties = AppProperties.GetInstance(Constants.IVR_CONFIG);
		
		String holidayValue =  ivrProperties.getIVRProp(Constants.HOLIDAY);
		String[] holidays = holidayValue.split(Constants.PIPE_SEPERATOR);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Holidays : " +holidayValue);
		
		
		String dmPropertyFileName = null;
		if(wirelessOrBroadband_MN_RetVal.equalsIgnoreCase(Constants.RET_VAL_MOBILE))
		{
			String workingDaysValue = ivrProperties.getIVRProp(Constants.MOBILE_WORKING_DAYS);
			String[] workingDays = workingDaysValue.split(Constants.PIPE_SEPERATOR);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Mobile Net Connect Working Days : " +workingDaysValue);
			
			String startTime = ivrProperties.getIVRProp(Constants.MOBILE_START_TIME);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Mobile Net Connect Start Time : " +startTime);
			
			String endTime = ivrProperties.getIVRProp(Constants.MOBILE_END_TIME);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Mobile Net Connect End Time : " +endTime);
			
			boolean isBusinessHour = Utilities.isBusinessHour(holidays, workingDays, startTime, endTime);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Mobile Is Business Hour : " +isBusinessHour);
			
			mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_IS_CALLED_WITHIN_BUSINESS_HOUR).setValue(isBusinessHour);
			
		}
		else
		{
			String workingDaysValue = ivrProperties.getIVRProp(Constants.BROADBAND_WORKING_DAYS);
			String[] workingDays = workingDaysValue.split(Constants.PIPE_SEPERATOR);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Broadband Net Connect Working Days : " +workingDaysValue);
			
			String startTime = ivrProperties.getIVRProp(Constants.BROADBAND_START_TIME);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Broadband Net Connect Start Time : " +startTime);
			
			String endTime = ivrProperties.getIVRProp(Constants.BROADBAND_END_TIME);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Broadband Net Connect End Time : " +endTime);
			
			boolean isBusinessHour = Utilities.isBusinessHour(holidays, workingDays, startTime, endTime);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Broadband Is Business Hour : " +isBusinessHour);
			
			mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_IS_CALLED_WITHIN_BUSINESS_HOUR).setValue(isBusinessHour);
		}
		
		
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-03  11:47:32 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-03  11:47:32 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-03  11:47:32 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Constants:IsCalledWithinBusinessHour", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(606)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("AgentTransfer_PP", "Yes").setDebugId(601));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "WirelessOrBroadband_MN:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL, "Constants:WIRED_WIRELESS_MN_RET_VALUE_MOBILE", true).setDebugId(1059)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("DM_propertyFileName:NonBusinessHour_PP", "Constants:MobileNonBusinessHour_PP", false).setDebugId(1060));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("DM_propertyFileName:NonBusinessHour_PP", "Constants:BroadbandNonBusinessHour_PP", false).setDebugId(1062));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("BusinessHourAnn_PP", "No").setDebugId(608));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
