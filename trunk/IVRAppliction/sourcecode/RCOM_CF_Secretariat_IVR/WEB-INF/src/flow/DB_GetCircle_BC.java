package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.IVRRoutingInfo;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.secretariat.Constants;
import com.rcom.secretariat.StackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-25  12:54:20 PM
 */
public class DB_GetCircle_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-25  12:54:20 PM
	 */
	public DB_GetCircle_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		
		try{
			ITraceInfo trace = mySession.getTraceOutput();
			String DNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
			
			
			/*
			 * DB Hit to get Circle
			 */
			
			IVRRoutingInfo reqIvrRoutingInfo = new IVRRoutingInfo();
			reqIvrRoutingInfo.setDnis(DNIS);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Calling DB service IVRRoutingInfo to get circle.");
			IVRRoutingInfo resIvrRoutingInfo = IVRDBServiceInstance.getIVRDBInstance().getIVRRoutingInfo((IVRDataBean)mySession.getProperty(Constants.IVR_DATA_BEAN), reqIvrRoutingInfo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "IVR Routing Info" +resIvrRoutingInfo.toString());
			String circle = resIvrRoutingInfo.getCircle();
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circle : " +circle);
			if(circle !=null)
			{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).setValue(circle);
			}
			else
			{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).setValue("NA");
			}
			
			IVRDataBean ivrDataBean = (IVRDataBean)mySession.getProperty(Constants.IVR_DATA_BEAN);
			
			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			CALLINFO callInfo = getReportObject.getIvrreportdata().getCALLINFO();
			
			callInfo.setCIRCLEID(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue());
			getReportObject.getIvrreportdata().setCALLINFO(callInfo);
			ivrDataBean.setGetReportObject(getReportObject);
			mySession.setProperty(Constants.IVR_DATA_BEAN, ivrDataBean);
		
		}catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
			StackTrace.PrintException(e);
		}
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-03  11:47:32 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-03  11:47:32 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-03  11:47:32 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsException", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:Yes", true).setDebugId(913)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:transferPoint", "TransferPoints:SIVR_TR_0003", false).setDebugId(1064));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_PP", "Failure").setDebugId(910));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("WelcomeAnn_PP", "Success").setDebugId(914));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
