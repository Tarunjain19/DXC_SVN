package flow.subflow.Prepaid;

import java.text.SimpleDateFormat;
import java.util.Date;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.hsd.utils.AppConstant;
import com.servion.hsd.utils.StackTrace;
import com.servion.rcom.hostinterface.view.ReqDataBalance;
import com.servion.rcom.hostinterface.view.ResDataBalance;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.IVRDataBean;


import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-11  05:02:08 PM
 */
public class executeDataBalance extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-11  05:02:08 PM
	 */
	public executeDataBalance() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:59 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:59 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:59 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(3594)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "dataBalanceAndValidity:noDataFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:Key_False", true).setDebugId(3595)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Prepaid-Set_HSDI_PA_0008", "Available").setDebugId(3596));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "Flag:CalledFromIntelligent", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:Key_true", true).setDebugId(3600)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Prepaid-checkMainMenuCount", "MainMenu").setDebugId(3601));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("dmInputParameter:propertyFileName", "propertyFileName:GlobalPromptFeature", false).setDebugId(11276));
				actions.add(new com.avaya.sce.runtime.Next("Prepaid-DataBalFailSMS", "network_failure").setDebugId(3604));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo trace = mySession.getTraceOutput();
		String sessionId = null;
		String mdn = null,hostResponse= AppConstant.ERROR;
		IVariable dataBalance = null;
		IVRDataBean objIVRDataBean = null;
		ReqDataBalance reqDataBalance = null;
		ResDataBalance resDataBalance = null;
		IVRWebService ivrWebService = null;
		SimpleDateFormat sdfObject = new SimpleDateFormat("dd-MM-yyyy");
		SimpleDateFormat formatter = new SimpleDateFormat(AppConstant.DATE_FORMAT_YYYYMMDD);
		String NoDataDetailFlag = AppConstant.TRUE,appName;
		Date dateFomat;
		try
		{
			//Request Processing ......
			mdn =  mySession.getVariableField(IProjectVariables.GET_DATA_CARD, IProjectVariables.GET_DATA_CARD_FIELD_VALUE).getStringValue();
			reqDataBalance = new ReqDataBalance();
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			reqDataBalance.setMDN(mdn);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host request :: "+reqDataBalance.toString());
			appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
			dataBalance = mySession.getVariable(IProjectVariables.DATA_BALANCE_AND_VALIDITY);
			
			//Response Processing ......
			ivrWebService = new IVRWebServiceImpl();
			resDataBalance = ivrWebService.executeDataBalance(objIVRDataBean,reqDataBalance);
			
			
			if(resDataBalance!=null){
				dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_RESPONSE_CODE).setValue(resDataBalance.getResponseCode());
				if(AppConstant.zero.equals(resDataBalance.getResponseCode())){
					String strCoreBalance =resDataBalance.getCoreBalance();
					String strCoreBalBalanceExpiryDate = resDataBalance.getCoreBalanceExpiryDate();
					String strRConnectBalance = resDataBalance.getRconnectBalance();
					String strRConnectBalanceExpiryDate = resDataBalance.getRconnectBalanceExpiryDate();
					String strpromoBalance = resDataBalance.getPromoBalance();
					String strpromoBalanceExpiryDate = resDataBalance.getPromoBalanceExpiryDate();
					String strUnlimitedBalance = resDataBalance.getUnlimitedBalance();
					String strUnlimitedBalanceExpiryDate = resDataBalance.getUnlimitedBalanceExpiryDate();
					
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host ResponseCode :: "+resDataBalance.getResponseCode());
					
					if(strCoreBalance!=null && strCoreBalBalanceExpiryDate!=null){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response Core Balance:: "+strCoreBalance);
						dateFomat = sdfObject.parse(strCoreBalBalanceExpiryDate);
						strCoreBalBalanceExpiryDate = formatter.format(dateFomat);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response Core Balance Expiry Date:: "+strCoreBalBalanceExpiryDate);
						NoDataDetailFlag = AppConstant.FALSE;
					}
					
					dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GFAIR_USAGE_BALANCE).setValue(strCoreBalance);
					dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GFAIR_USAGE_BALANCE_EXPIRY_DATE).setValue(strCoreBalBalanceExpiryDate);
					
					if(strRConnectBalance!=null && strRConnectBalanceExpiryDate!=null){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response Rconnect Balance:: "+resDataBalance.getRconnectBalance());
						dateFomat = sdfObject.parse(strRConnectBalanceExpiryDate);
						strRConnectBalanceExpiryDate = formatter.format(dateFomat);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response Rconnect Balance Expiry Date:: "+strRConnectBalanceExpiryDate);
						NoDataDetailFlag = AppConstant.FALSE;
					}
					
					dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GNET_BALANCE).setValue(strRConnectBalance);
					dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GNET_BALANCE_EXPIRY_DATE).setValue(strRConnectBalanceExpiryDate);
					
					if(strpromoBalance!=null && strpromoBalanceExpiryDate!=null){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response Promo Balance:: "+resDataBalance.getPromoBalance());
						dateFomat = sdfObject.parse(strpromoBalanceExpiryDate);
						strpromoBalanceExpiryDate = formatter.format(dateFomat);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response Promo Balance Expiry Date:: "+strpromoBalanceExpiryDate);
						NoDataDetailFlag = AppConstant.FALSE;
					}
					
					dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_PROMO_BALANCE).setValue(strpromoBalance);
					dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_PROMO_EXP_DATE).setValue(strpromoBalanceExpiryDate);
					
					if(strUnlimitedBalance!=null && strUnlimitedBalanceExpiryDate!=null){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response Unlimited Balance:: "+resDataBalance.getUnlimitedBalance());
						dateFomat = sdfObject.parse(strUnlimitedBalanceExpiryDate);
						strUnlimitedBalanceExpiryDate = formatter.format(dateFomat);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response Unlimited Balance Expiry Date:: "+strUnlimitedBalanceExpiryDate);
						NoDataDetailFlag = AppConstant.FALSE;
					}
					
					dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_UNLIMITED_BAL).setValue(strUnlimitedBalance);
					dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_UNLIMITED_EXPIRY_DATE).setValue(strUnlimitedBalanceExpiryDate);
					
					
					//moving to complex variable .......
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "No Data Detail Flag:: "+NoDataDetailFlag);
					
					dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_NO_DATA_FLAG).setValue(NoDataDetailFlag);
					hostResponse= AppConstant.Success;
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DataBalance Responce Code is not Zero");
				}
				
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DataBalance Responce Object is null");
			}
			
		}catch(Exception e)
		{
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Error in Data Balance Host Access:"+e);
		}
		finally
		{
				mdn = null;
				reqDataBalance = null;
				resDataBalance = null;
				ivrWebService = null;
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResponse);
		}
	
}
}