package flow.subflow.Prepaid;

import java.util.ArrayList;
import java.util.HashMap;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.RechargePlanInfo;
import com.servion.hsd.utils.AppConstant;
import com.servion.hsd.utils.DynamicMenu;
import com.servion.hsd.utils.StackTrace;
import com.servion.util.AppProperties;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-16  02:48:57 PM
 */
public class Get_RechargeConfirmMenu extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-16  02:48:57 PM
	 */
	public Get_RechargeConfirmMenu() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:02 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Prepaid-RechargeConfirmMenu");
		next.setDebugId(7824);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:02 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:02 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
/*	@Override
	public void requestBegin(SCESession mySession) {


		ITraceInfo trace = mySession.getTraceOutput();
		String key = AppConstant.EMPTY_STRING,appName = AppConstant.EMPTY_STRING;
		String selectedValue =AppConstant.EMPTY_STRING;
		String talkTime =AppConstant.EMPTY_STRING;
		ArrayList<String> dynamicValue = null;
		String initialPrompt = AppConstant.EMPTY_STRING;
		HashMap <String, RechargePlanInfo> mapRechargePlanInfo = null;
		RechargePlanInfo objRechargePlanInfo = null;
		//initial prompt processing...
		try
		{
			appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
			selectedValue = mySession.getVariableField(IProjectVariables.RECHARGE_MENU,IProjectVariables.RECHARGE_MENU_FIELD_VALUE).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Application Name :: "+appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "selected Value :: "+selectedValue);
			
			key = appName +AppConstant.SEPERATOR_HYPEN+ AppConstant.HSDI_MN_0007;
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Key :: "+key);
			initialPrompt = AppProperties.GetInstance(AppConstant.DYN_MENU).getIVRProp(key);
			
			mapRechargePlanInfo = (HashMap <String, RechargePlanInfo>) mySession.getProperty(AppConstant.DENOMINATION_MAP);
			objRechargePlanInfo = mapRechargePlanInfo.get(selectedValue);
			
			dynamicValue = new ArrayList<String>();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Recharge Confirmation initial Prompt Before Dynamic Insertion:: "+initialPrompt);
			
			dynamicValue.add(objRechargePlanInfo.getDenominationPhrase());
			dynamicValue.add(objRechargePlanInfo.getAmountPhrase());
			dynamicValue.add(objRechargePlanInfo.getTalkTimePhrase());
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "dynamicValue :"+dynamicValue);
			
			DynamicMenu objDynamicMenu = new DynamicMenu();
			initialPrompt=objDynamicMenu.playPrompt(dynamicValue, initialPrompt, AppConstant.NA, trace);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Recharge Confirmation initial Prompt :: "+initialPrompt);
			
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			
			*//*** Set MRP ***//*
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Recharge Confirmation initial Prompt :: "+objRechargePlanInfo.getMrp());
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_AMOUNT).setValue(objRechargePlanInfo.getMrp());
		}
		catch(Exception e)
		{
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in Top Up Confirmation initial prompt :: "+e);
		}
		finally
		{
				initialPrompt = null;
		}
	}*/
	
	@Override
	public void requestBegin(SCESession mySession) {


		ITraceInfo trace = mySession.getTraceOutput();
		String key = AppConstant.EMPTY_STRING,appName = AppConstant.EMPTY_STRING;
		String selectedValue =AppConstant.EMPTY_STRING;
		String talkTime =AppConstant.EMPTY_STRING;
		String initialPrompt = AppConstant.EMPTY_STRING;
		HashMap <String, RechargePlanInfo> mapRechargePlanInfo = null;
		RechargePlanInfo objRechargePlanInfo = null;
		ArrayList<String> dynamicValue = null;
		
		//initial prompt processing...
		try
		{
			appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
			selectedValue = mySession.getVariableField(IProjectVariables.RECHARGE_MENU,IProjectVariables.RECHARGE_MENU_FIELD_VALUE).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Application Name :: "+appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "selected Value :: "+selectedValue);
			
			key = appName +AppConstant.SEPERATOR_HYPEN+ AppConstant.HSDI_MN_0007;
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Key :: "+key);
			initialPrompt = AppProperties.GetInstance(AppConstant.DYN_MENU).getIVRProp(key);
			
			mapRechargePlanInfo = (HashMap <String, RechargePlanInfo>) mySession.getProperty(AppConstant.DENOMINATION_MAP);
			objRechargePlanInfo = mapRechargePlanInfo.get(selectedValue);
			
			//initialPrompt=objRechargePlanInfo.getAmountPhrase();
			dynamicValue = new ArrayList<String>();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Recharge Confirmation initial Prompt Before Dynamic Insertion:: "+initialPrompt);
			
			dynamicValue.add(objRechargePlanInfo.getAmountPhrase());
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "dynamicValue :"+dynamicValue);
			
			DynamicMenu objDynamicMenu = new DynamicMenu();
			initialPrompt=objDynamicMenu.playPrompt(dynamicValue, initialPrompt, AppConstant.NA, trace);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Recharge Confirmation initial Prompt :: "+initialPrompt);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Recharge Confirmation initial Prompt :: "+initialPrompt);
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			
			/*** Set MRP ***//*
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Recharge Confirmation initial Prompt :: "+objRechargePlanInfo.getMrp());
			mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES,IProjectVariables.PREPAID__APP_VARIABLES_FIELD_AMOUNT).setValue(objRechargePlanInfo.getMrp());
			
			*//***RC Type ***//*
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "RC Type for Recharge :: "+objRechargePlanInfo.getPlanCode());
			mySession.getVariableField(IProjectVariables.PREPAID__APP_VARIABLES,IProjectVariables.PREPAID__APP_VARIABLES_FIELD_RCTYPE).setValue(objRechargePlanInfo.getPlanCode());
			*/
		}
		catch(Exception e)
		{
		    StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in Top Up Confirmation initial prompt :: "+e);
		}
		finally
		{
				initialPrompt = null;
		}

	}
	
}
