package flow.subflow.Prepaid;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.hsd.utils.AppConstant;
import com.servion.hsd.utils.LuhnAlgoImpl;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-15  03:47:04 PM
 */
public class CollectCreditCard_Evalute extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-15  03:47:04 PM
	 */
	public CollectCreditCard_Evalute() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:02 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:02 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:02 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Collect Card Return Code", "CollectCreditCard:ReturnCode").setDebugId(8912));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Count :: ", "AppVariables:CardCount").setDebugId(8913));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "CollectCreditCard:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(8914)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:CardCount", "0", true).setDebugId(8915));
			actions.add(new com.avaya.sce.runtime.Next("Prepaid-CollectMonthDetail", "CollectMonth").setDebugId(8916));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Increment("AppVariables:CardCount").setDebugId(8918));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:CardCount", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "3", false).setDebugId(8919)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "CollectCreditCard:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "NOMATCH", false).setDebugId(8920)).evaluate(mySession)) {

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "AppVariables:CardCount", com.avaya.sce.runtime.Expression.INT_EQUAL, "1", false).setDebugId(11281)).evaluate(mySession)) {
						actions = new java.util.ArrayList(1);
						actions.add(new com.avaya.sce.runtime.varoperations.Assign("dmInputParameter:propertyFileName", "propertyFileName:STD_InvalidTry1", false).setDebugId(11282));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					} else {
						actions = new java.util.ArrayList(1);
						actions.add(new com.avaya.sce.runtime.varoperations.Assign("dmInputParameter:propertyFileName", "propertyFileName:STD_InvalidTry2", false).setDebugId(11284));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;
					}


				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("dmInputParameter:propertyFileName", "propertyFileName:STD_NoInput", false).setDebugId(8926));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Property file", "dmInputParameter:propertyFileName").setDebugId(8927));
				actions.add(new com.avaya.sce.runtime.Next("Prepaid-InvalidCard_Anno", "invalid").setDebugId(8928));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(3);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("dmInputParameter:propertyFileName", "propertyFileName:STD_Exceed", false).setDebugId(8930));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:HSDI_TR_0058", false).setDebugId(8931));
				actions.add(new com.avaya.sce.runtime.Next("Prepaid-Tries_ExceededCard", "ExceededTries").setDebugId(8932));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		String returnValue = AppConstant.EMPTY_STRING,returnCode = AppConstant.EMPTY_STRING;
		long creditcardNumber;
		ITraceInfo trace = mySession.getTraceOutput();
		Boolean isValidCard;
		
		returnValue = mySession.getVariableField(IProjectVariables.COLLECT_CREDIT_CARD,IProjectVariables.COLLECT_CREDIT_CARD_FIELD_VALUE).getStringValue();
		returnCode = mySession.getVariableField(IProjectVariables.COLLECT_CREDIT_CARD,IProjectVariables.COLLECT_CREDIT_CARD_FIELD_RETURN_CODE).getStringValue();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Return Code :"+returnCode);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"/**Validating Credit Card**/");

		if(AppConstant.Success.equalsIgnoreCase(returnCode)){
			LuhnAlgoImpl objLuhnAlgoImpl = new LuhnAlgoImpl();
			creditcardNumber = Long.parseLong(returnValue);
			isValidCard=objLuhnAlgoImpl.isValid(creditcardNumber);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Credit card status :"+isValidCard);
				
			if(isValidCard){
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Valide credit Card");
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"In Valid credit Card");
				mySession.getVariableField(IProjectVariables.COLLECT_CREDIT_CARD,IProjectVariables.COLLECT_CREDIT_CARD_FIELD_RETURN_CODE).setValue("NOMATCH");
			}
		}
	}
}
