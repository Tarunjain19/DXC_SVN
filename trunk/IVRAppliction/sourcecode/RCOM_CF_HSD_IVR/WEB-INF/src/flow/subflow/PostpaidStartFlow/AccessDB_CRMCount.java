package flow.subflow.PostpaidStartFlow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.PostpaidCRMCountInfo;
import com.rcom.prepaid.resource.IVRDBServiceInstance;
import com.servion.hsd.utils.Constants;
import com.servion.hsd.utils.PrintStackTrace;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-24  05:58:28 PM
 */
public class AccessDB_CRMCount extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		
		IVRDataBean ivrDataBean = null;
		PostpaidCRMCountInfo postpaidCRMCountInfo = null;
		String strMDN = "", strUnbilledCount = "0", strFreeUnitCount = "0", strBilledCount = "0", strPaymentCount = "0", strBillDeliveryCount = "0";
		
		
		try {
			postpaidCRMCountInfo = new PostpaidCRMCountInfo();
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			
			strMDN = mySession.getVariableField(IProjectVariables.POSTPAID__CALL_DATA, IProjectVariables.POSTPAID__CALL_DATA_FIELD_MDN).getStringValue();
			postpaidCRMCountInfo.setMdn(strMDN);
			
			postpaidCRMCountInfo = IVRDBServiceInstance.getInstance().getPostpaidCRMCountInfo(ivrDataBean, postpaidCRMCountInfo);
			
			if(postpaidCRMCountInfo != null){
				if(postpaidCRMCountInfo.getFreeUnitCount() != null)
					strFreeUnitCount = postpaidCRMCountInfo.getFreeUnitCount();
				
				if(postpaidCRMCountInfo.getBilledCount() != null)
					strBilledCount = postpaidCRMCountInfo.getBilledCount();
				
				if(postpaidCRMCountInfo.getPaymentCount() != null)
					strPaymentCount = postpaidCRMCountInfo.getPaymentCount();
				
				if(postpaidCRMCountInfo.getUnbilledCount() != null)
					strUnbilledCount = postpaidCRMCountInfo.getUnbilledCount();
				
				if(postpaidCRMCountInfo.getBillDeliveryCount() != null)
					strBillDeliveryCount = postpaidCRMCountInfo.getBillDeliveryCount();
				
			}
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Free Unit count:"+strFreeUnitCount+" , Billed Count:"+strBilledCount+", Unbilled count:"+strUnbilledCount);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Payment count:"+strPaymentCount+" , Bill Delivery count:"+strBillDeliveryCount);
			mySession.getVariableField(IProjectVariables.POSTPAID__INTERACTION_COUNT, IProjectVariables.POSTPAID__INTERACTION_COUNT_FIELD_FREE_UNIT).setValue(strFreeUnitCount);
			mySession.getVariableField(IProjectVariables.POSTPAID__INTERACTION_COUNT, IProjectVariables.POSTPAID__INTERACTION_COUNT_FIELD_BILL_INFO).setValue(strBilledCount);
			mySession.getVariableField(IProjectVariables.POSTPAID__INTERACTION_COUNT, IProjectVariables.POSTPAID__INTERACTION_COUNT_FIELD_UNBILLED_INFO).setValue(strUnbilledCount);
			mySession.getVariableField(IProjectVariables.POSTPAID__INTERACTION_COUNT, IProjectVariables.POSTPAID__INTERACTION_COUNT_FIELD_PAYMENT_INFO).setValue(strPaymentCount);
			mySession.getVariableField(IProjectVariables.POSTPAID__INTERACTION_COUNT, IProjectVariables.POSTPAID__INTERACTION_COUNT_FIELD_BILL_DELIVERY).setValue(strBillDeliveryCount);
			
		} catch (Exception e) {
			PrintStackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.POSTPAID__FLAG, IProjectVariables.POSTPAID__FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);;
		}
		
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-24  05:58:28 PM
	 */
	public AccessDB_CRMCount() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:06 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:06 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:06 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Postpaid_Flag:isFromInteractionHistory", "Postpaid_Constants:yes", false).setDebugId(6611));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Postpaid_Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Postpaid_Constants:yes", true).setDebugId(6612)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("PostpaidStartFlow-Initialize_MN_0005", "LinkDown").setDebugId(6613));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Postpaid_InteractionCount:unbilledInfo", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "Postpaid_CallData:totalUnbilledCount", true).setDebugId(8534)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Postpaid_Flag:accountInformation", "UnbilledInfo", true).setDebugId(8535));
				actions.add(new com.avaya.sce.runtime.Next("PostpaidStartFlow-AccountInformation", "UnbilledInfo").setDebugId(8536));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "Postpaid_InteractionCount:billInfo", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "Postpaid_CallData:totalBillInfoCount", true).setDebugId(6621)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Postpaid_Flag:accountInformation", "CheckBill", true).setDebugId(6622));
				actions.add(new com.avaya.sce.runtime.Next("PostpaidStartFlow-AccountInformation", "CheckBill").setDebugId(6623));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "Postpaid_InteractionCount:paymentInfo", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "Postpaid_CallData:totalPaymentInfo", true).setDebugId(6624)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Postpaid_Flag:accountInformation", "CheckPayment", true).setDebugId(6625));
				actions.add(new com.avaya.sce.runtime.Next("PostpaidStartFlow-AccountInformation", "CheckPayment").setDebugId(6626));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "Postpaid_InteractionCount:billDelivery", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "Postpaid_CallData:totalBillDeliveryCount", true).setDebugId(6627)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Postpaid_Flag:accountInformation", "DeliveryStatus", true).setDebugId(6628));
				actions.add(new com.avaya.sce.runtime.Next("PostpaidStartFlow-AccountInformation", "DeliveryStatus").setDebugId(6629));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("PostpaidStartFlow-Initialize_MN_0005", "EventBasedInfo").setDebugId(6631));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
