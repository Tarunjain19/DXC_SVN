package flow;

import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.TransferVDNInfo;
import com.rcom.prepaid.resource.IVRDBServiceInstance;
import com.servion.hsd.utils.AppConstant;
import com.servion.hsd.utils.StackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.prepaid.report.IVRREPORTDATA.MENUDETAILS.MENU;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-30  10:18:56 AM
 */
public class Get_TransferVDN extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-30  10:18:56 AM
	 */
	public Get_TransferVDN() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:55 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("TransferToAgent");
		next.setDebugId(9757);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:55 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:55 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:DropFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:Key_true", true).setDebugId(9751)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("EndCallProcess", "End").setDebugId(9752));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(4);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:DropFlag", "constant:Key_true", false).setDebugId(9753));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "UUI Data :", "AppVariables:UUI_DATA").setDebugId(9754));
		actions.add(new com.avaya.sce.runtime.varoperations.PrepareAAI("Shared", "", "AppVariables:UUI_DATA", "AppVariables:UUI_DATA").setDebugId(9755));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Prepared UUI Data :", "AppVariables:UUI_DATA").setDebugId(9756));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {


		
		super.requestBegin(mySession);
		/**Declaring the variables**/
		TransferVDNInfo transferVDNInfo = null;
		IVRDataBean ivrDataBean = null;
		ITraceInfo info = null;
		String last5Menu =AppConstant.EMPTY_STRING;
		String strUUI = AppConstant.EMPTY_STRING;
		String menuID = AppConstant.EMPTY_STRING;
		String ani = AppConstant.EMPTY_STRING,currentLanguage = AppConstant.EMPTY_STRING;
		String dnis = AppConstant.EMPTY_STRING,transferCode = AppConstant.EMPTY_STRING;
		AppProperties ivrProperties = null;
		String defaultVDN=AppConstant.EMPTY_STRING,key= AppConstant.EMPTY_STRING,transferVDN = AppConstant.EMPTY_STRING,planType = AppConstant.EMPTY_STRING ;
		
		/**Assigning the trace object**/
		info = mySession.getTraceOutput();
		try{
			
			
			
			/**4GLTE Customers transfer reson code is set**/
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "IS 4GLTE Customer flag :"+mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_4G_LTE).getStringValue());
			
			if(mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_4G_LTE).getStringValue().equalsIgnoreCase(AppConstant.Yes))
			{
				planType	    = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_PLAN_TYPE).getStringValue();
				if(planType.contains(AppConstant.PRE))
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_POINT).setValue(mySession.getVariableField(IProjectVariables.TRANSFER_POINTS,IProjectVariables.TRANSFER_POINTS_FIELD_HSDI__TR___0_0_7_8).getStringValue());
				else
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_POINT).setValue(mySession.getVariableField(IProjectVariables.TRANSFER_POINTS,IProjectVariables.TRANSFER_POINTS_FIELD_HSDI__TR___0_0_7_9).getStringValue());
			}
			
			
			/** getting the IVRData bean from session**/
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);

			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			IVRREPORTDATA ivrreportdata = getReportObject.getIvrreportdata();
			CALLINFO callInfo = ivrreportdata.getCALLINFO();
		//	trace = mySession.getTraceOutput();
			ivrProperties = AppProperties.GetInstance(AppConstant.IVR_CONFIG);
			ani = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			dnis = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_DNIS).getStringValue();
			currentLanguage = mySession.getCurrentLanguage();
			transferCode = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_POINT).getStringValue();
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dnis :"+dnis);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Ani :" +ani);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "currentLanguage :" +currentLanguage);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Menu:"+ivrreportdata.getMENUDETAILS().getMENU());
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer Code :" +transferCode);
			
			List<MENU> menuList = ivrreportdata.getMENUDETAILS().getMENU();
			
			if(menuList  !=null){
				
				for (int i = menuList.size(); (i> (menuList.size()-5)) && (i!=0); i-- ){
					menuID = menuList.get((i-1)).getMENUID();
					info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "menu ID :"+menuID);
					last5Menu = last5Menu + menuID+"|";
				}
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Last 5 menu accessed :"+last5Menu);
			}else{
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "No Menu accessed");
			}
			/*@author
			 * AJ
			 * changed UUI on 1st of march 2016
			 * adding connection type and MDN verification to UUI part
			 * 
			 */
			String CircleID=mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			String connectionType=mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_PREPAID).getStringValue();//new variable  added for UUI
			String IsVarified=mySession.getVariableField(IProjectVariables.GET_DATA_CARD,IProjectVariables.GET_DATA_CARD_FIELD_RETURN_CODE).getStringValue();
			String datacardnumber=mySession.getVariableField(IProjectVariables.GET_DATA_CARD,IProjectVariables.GET_DATA_CARD_FIELD_VALUE).getStringValue();
			
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "connectionType, IsVarified,datacardnumber :" +connectionType+"::"+IsVarified+"::"+datacardnumber);
			
			if(null==datacardnumber){
				datacardnumber=AppConstant.NA;
				
			}
			
			if(null==connectionType){
				connectionType=AppConstant.NA;
			}
			
			//New variable added for UUI
			
			strUUI = ani+AppConstant.PIPE+dnis+AppConstant.PIPE+currentLanguage +AppConstant.PIPE+connectionType+AppConstant.PIPE+IsVarified+AppConstant.PIPE+datacardnumber+AppConstant.PIPE+CircleID;
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_UUI__DATA).setValue(strUUI);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "UUI data:"+strUUI);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_UUI__DATA).setValue(strUUI);
			
			transferVDNInfo = new TransferVDNInfo();
			transferVDNInfo.setAppName(mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue());
			transferVDNInfo.setCircle(mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue());
			transferVDNInfo.setCallType("4");
			transferVDNInfo.setCustomerSegment("3");
			transferVDNInfo.setLanguage(currentLanguage);
			transferVDNInfo.setTransferReasonCode(transferCode);
			
			transferVDNInfo = IVRDBServiceInstance.getInstance().getTransferVDN(ivrDataBean, transferVDNInfo);
			callInfo.setHOWCALLENDED(AppConstant.TRANSFER);
			
			transferVDN = transferVDNInfo.getTransferVDN1(); 
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Transfer VDN from DB : "+transferVDN);
			
			if(transferVDN != null && !AppConstant.EMPTY_STRING.equals(transferVDN)){
				callInfo.setAGENTEXTN(transferVDN);
				callInfo.setAGENTID(transferVDN);
				callInfo.setTRANSFERVDN(transferVDN);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(transferVDN);
			}
			
			if(transferVDNInfo.getSkillName()!=null)
				callInfo.setSKILLNAME(transferVDNInfo.getSkillName());
			
			callInfo.setUUIDATA(strUUI);
			callInfo.setTRANSCODE(transferCode);
			callInfo.setDISPOSITION(AppConstant.XA);
			callInfo.setCALLENDREASON(AppConstant.TRANSFER);
			
			ivrreportdata.setCALLINFO(callInfo);
		
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer VDN from DB"+transferVDNInfo.toString());
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer VDN  :: "+mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).getStringValue());
			
		}catch(Exception e){
			StackTrace.PrintException(e);
		}finally{
			if(transferVDN == null || AppConstant.EMPTY_STRING.equals(transferVDN)){
				key = AppConstant.DEFAULT_TRANSFER_VDN_+currentLanguage;
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Default Transfer VDN Key :"+key);
				defaultVDN = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(key);
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Default Transfer VDN :"+defaultVDN);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(defaultVDN);
			}
		}
	
	}
}
