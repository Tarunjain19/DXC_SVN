package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.Constants;
import com.servion.util.AppProperties;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-NOV-29  02:05:23 PM
 */
public class Evaluate_LangMN extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-NOV-29  02:05:23 PM
	 */
	public Evaluate_LangMN() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-DEC-07  03:15:31 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Dat_getVAS", "Default");
		next.setDebugId(3680);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-DEC-07  03:15:31 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-DEC-07  03:15:31 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Language Menu Return Code::", "").setDebugId(3682));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Language Menu Return Code::", "").setDebugId(3683));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "SelectLanguage_MN_001:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:success", true).setDebugId(3684)).evaluate(mySession)) {
			actions = new java.util.ArrayList(3);
			actions.add(new com.avaya.sce.runtime.varoperations.SetCurrentLanguage("SelectLanguage_MN_001:Value", false).setDebugId(3685));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("App_Variables:currentLanguage", "SelectLanguage_MN_001:Value", false).setDebugId(3948));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Language Set::", "session:currentlanguage").setDebugId(3947));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		/**Declaration **/
		String returnCode = Constants.BLANK,returnValue = Constants.BLANK;
		String selectedLang = Constants.BLANK,key = Constants.BLANK;
		String appName = Constants.BLANK,propetyKey = Constants.BLANK;
		String propertiesLocation = Constants.BLANK;
		ITraceInfo trace = null;
		
		/**Assign **/
		returnValue = mySession.getVariableField(IProjectVariables.SELECT_LANGUAGE__MN___0_0_1,IProjectVariables.SELECT_LANGUAGE__MN___0_0_1_FIELD_VALUE).getStringValue();
		returnCode = mySession.getVariableField(IProjectVariables.SELECT_LANGUAGE__MN___0_0_1,IProjectVariables.SELECT_LANGUAGE__MN___0_0_1_FIELD_RETURN_CODE).getStringValue();
		appName = mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_APP_NAME).getStringValue();
		trace = mySession.getTraceOutput();
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"LANGUAGE_MENU Return Code :"+returnCode);
		trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"LANGUAGE_MENU Return Value :"+returnValue);
		
		/***Getting Property File for selected Language***/
		if(Constants.Success.equalsIgnoreCase(returnCode)){
			
			/*key = AppConstants.Language_Code+returnValue;
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language_Code Key:"+key);
			selectedLang=(String) AppDataMap.getInstance(appName).getAppData(key);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Selected Language :"+selectedLang);
			*/
			
			selectedLang = returnValue;
			if(selectedLang!=null && !Constants.BLANK.equals(selectedLang)){
				mySession.setCurrentLanguage(selectedLang);
				propetyKey = Constants.PROPERTY+appName+Constants.UNDERSCORE+selectedLang;
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"propety Key :"+propetyKey);
				propertiesLocation = AppProperties.GetInstance(Constants.VAS_CONFIG).getIVRProp(propetyKey);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location :"+propertiesLocation);
				
				if(propertiesLocation!=null && !Constants.N.equalsIgnoreCase(propertiesLocation))
					mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertiesLocation);
				else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
					
					
				}
			}
			
		}
	}

}
