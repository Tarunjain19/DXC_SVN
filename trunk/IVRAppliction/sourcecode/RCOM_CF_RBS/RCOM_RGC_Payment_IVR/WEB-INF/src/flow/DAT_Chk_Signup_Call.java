package flow;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.hpe.util.AppConstant;
import com.servion.util.AppProperties;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-MAR-01  12:26:38 PM
 */
public class DAT_Chk_Signup_Call extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-MAR-01  12:26:38 PM
	 */
	public DAT_Chk_Signup_Call() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	public void requestBegin(SCESession mySession)
	{
		String strRGC_ENDPOINT_URL_REG_PHNUM = AppConstant.EMPTY_STRING;
		String strRGC_ENDPOINT_URL_REG_PHNUM_WITH_PIN = AppConstant.EMPTY_STRING;
		String strRGC_ENDPOINT_URL_PAYMENT = AppConstant.EMPTY_STRING;
		String strAUTH_KEY = AppConstant.EMPTY_STRING;
		String strEDUID = AppConstant.EMPTY_STRING;
		
		
			AppProperties ivrProperties = AppProperties.GetInstance(AppConstant.HOST_CONFIG);
			
			try
			{
				strRGC_ENDPOINT_URL_REG_PHNUM = ivrProperties.getIVRProp("RGC_ENDPOINT_URL_REG_PHNUM");
				strRGC_ENDPOINT_URL_REG_PHNUM_WITH_PIN = ivrProperties.getIVRProp("RGC_ENDPOINT_URL_REG_PHNUM_WITH_PIN");
				strRGC_ENDPOINT_URL_PAYMENT = ivrProperties.getIVRProp("RGC_ENDPOINT_URL_PAYMENT");
				strAUTH_KEY = ivrProperties.getIVRProp("AUTH_KEY");
				strEDUID = ivrProperties.getIVRProp("EDUID");
				
				mySession.getVariableField(IProjectVariables.WS__CHK__REG__PH_NUM,IProjectVariables.WS__CHK__REG__PH_NUM_FIELD_ENDPOINT_URL).setValue(strRGC_ENDPOINT_URL_REG_PHNUM);
				mySession.getVariableField(IProjectVariables.WS__VALIDATE__PIN,IProjectVariables.WS__VALIDATE__PIN_FIELD_ENDPOINT_URL).setValue(strRGC_ENDPOINT_URL_REG_PHNUM_WITH_PIN);
				mySession.getVariableField(IProjectVariables.WS__PAYMENT__REQUEST,IProjectVariables.WS__PAYMENT__REQUEST_FIELD_ENDPOINT_URL).setValue(strRGC_ENDPOINT_URL_PAYMENT);
				mySession.getVariableField(IProjectVariables.AUTH__KEY).setValue(strAUTH_KEY);
				mySession.getVariableField(IProjectVariables.EDUID).setValue(strEDUID);
				
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "RGC_ENDPOINT_URL_REG_PHNUM :"+ strRGC_ENDPOINT_URL_REG_PHNUM, mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "RGC_ENDPOINT_URL_REG_PHNUM_WITH_PIN :"+ strRGC_ENDPOINT_URL_REG_PHNUM_WITH_PIN, mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "RGC_ENDPOINT_URL_PAYMENT :"+ strRGC_ENDPOINT_URL_PAYMENT, mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "AUTH_KEY :"+ strAUTH_KEY, mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "EDUID :"+ strEDUID, mySession);
				
			}
			
			catch(Exception e)
			{
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR,"Error in DAT_Signup  - "+ e.getMessage(), mySession);
				mySession.getVariableField(IProjectVariables.FLAG__APPLICATION__ERROR).setValue(AppConstant.TRUE);	
			}		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-OCT-21  01:08:50 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-OCT-21  01:08:50 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-OCT-21  01:08:50 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "session:dnis", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "999", false).setDebugId(156)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DM_RBI_Msg_OTP", "Signup Payment").setDebugId(154));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DM_GetRegisteredPhNum_Menu", "GetReg PhNum").setDebugId(158));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
