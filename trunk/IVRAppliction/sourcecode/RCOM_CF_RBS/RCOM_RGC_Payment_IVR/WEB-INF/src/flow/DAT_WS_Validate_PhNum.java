package flow;

import java.io.PrintWriter;
import java.io.StringWriter;

import javax.xml.rpc.holders.StringHolder;

import org.tempuri.RGC_ServicesSoapProxy;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.hpe.util.AppConstant;
import com.hpe.util.XMLParser;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-FEB-09  02:03:55 PM
 */
public class DAT_WS_Validate_PhNum extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-FEB-09  02:03:55 PM
	 */
	public DAT_WS_Validate_PhNum() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	public void requestBegin(SCESession mySession)
	{
		String PhNum =AppConstant.EMPTY_STRING;
		String EndpointURL =AppConstant.EMPTY_STRING,AUTH_KEY =AppConstant.EMPTY_STRING,EDUID =AppConstant.EMPTY_STRING;
		String attribute = "Message", Result_status = AppConstant.EMPTY_STRING,testResp = AppConstant.EMPTY_STRING;
		
		try
		{
			PhNum = mySession.getVariableField(IProjectVariables.DM__GET_REGISTERED_PH_NUM__MENU,IProjectVariables.DM__GET_REGISTERED_PH_NUM__MENU_FIELD_VALUE).getStringValue();
			EndpointURL = mySession.getVariableField(IProjectVariables.WS__CHK__REG__PH_NUM,IProjectVariables.WS__CHK__REG__PH_NUM_FIELD_ENDPOINT_URL).getStringValue();
			AUTH_KEY = 	mySession.getVariableField(IProjectVariables.AUTH__KEY).getStringValue();	
			EDUID =  mySession.getVariableField(IProjectVariables.EDUID).getStringValue();
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Web service operation - Validate Registered Mobile Number", mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"REGISTERED_NUMBER - "+PhNum, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"EndpointURL - "+EndpointURL, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"INT_INTERACTION_TYPE - 0", mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"INT_SERVICE_TYPE - 0", mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"INT_VALIDATE_TYPE - 0", mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"AUTH_KEY - "+ AUTH_KEY, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"EDUID - "+ EDUID, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"PRODUCT_CODE - RGCIVR", mySession);
			
			RGC_ServicesSoapProxy servInst= new RGC_ServicesSoapProxy();
			servInst.setEndpoint(mySession.getVariableField(IProjectVariables.WS__CHK__REG__PH_NUM,IProjectVariables.WS__CHK__REG__PH_NUM_FIELD_ENDPOINT_URL).getStringValue());
			testResp = servInst.validateCustomer(mySession.getVariableField(IProjectVariables.AUTH__KEY).getStringValue(), mySession.getVariableField(IProjectVariables.EDUID).getStringValue(), 0,mySession.getVariableField(IProjectVariables.DM__GET_REGISTERED_PH_NUM__MENU,IProjectVariables.DM__GET_REGISTERED_PH_NUM__MENU_FIELD_VALUE).getStringValue(),"", 0, 0, "RGCIVR", new StringHolder(""), new StringHolder(""));
			
			XMLParser obj = new XMLParser();
			Result_status = obj.parseXML(testResp,attribute);
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Webservice operation SUCCESS", mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO," REPSONSE  XML is - "+testResp, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO," Result_status  is - "+Result_status, mySession);
			
			mySession.getVariableField(IProjectVariables.WS__CHK__REG__PH_NUM,IProjectVariables.WS__CHK__REG__PH_NUM_FIELD_OUT__STR_MESSAGE).setValue(Result_status);
			mySession.getVariableField(IProjectVariables.WS__CHK__REG__PH_NUM,IProjectVariables.WS__CHK__REG__PH_NUM_FIELD_OUT__STR_RESPONSE_XML).setValue(testResp);
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"RespMsg is - "+Result_status, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"RespXml is - "+testResp, mySession);
			
	}
	catch (Exception e) 
	{
		StringWriter sw = new StringWriter();
		PrintWriter pw = new PrintWriter(sw);
		e.printStackTrace(pw);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR,"Webservice operation failed  - "+sw.toString(), mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR,"Webservice operation failed  - "+ e.getMessage(), mySession);
		mySession.getVariableField(IProjectVariables.FLAG__APPLICATION__ERROR).setValue(AppConstant.TRUE);	
	}
	
}
	
	
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-OCT-21  01:08:50 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-OCT-21  01:08:50 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-OCT-21  01:08:50 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag_Application_Error", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:TRUE", true).setDebugId(908)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DM_TechDiff_Msg", "TechDiff").setDebugId(909));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "WS_Chk_Reg_PhNum:Out_strMessage", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(3513)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DAT_Chk_PIN_Change", "Success").setDebugId(3514));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Increment("Counters:PhNum_Counter").setDebugId(3057));
			actions.add(new com.avaya.sce.runtime.Next("DM_Invalid_PhNUm_Msg", "failure").setDebugId(911));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
