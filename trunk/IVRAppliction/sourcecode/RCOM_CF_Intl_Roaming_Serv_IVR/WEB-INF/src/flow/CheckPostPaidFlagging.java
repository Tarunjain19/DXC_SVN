package flow;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.SCESession;
//import com.rcom.intlroaming.constants.Constants;
//import com.rcom.intlroaming.loadproperty.LoadProperty;
import com.rcom.otherflows.model.ValidateMDN;
//import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.servion.util.IVRDataBean;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-18  05:47:19 PM
 */
public class CheckPostPaidFlagging extends com.avaya.sce.runtime.Data {

	private static Logger logger = Logger.getLogger(CheckPostPaidFlagging.class);
	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		//Initializing the Audio for the node
		ValidateMDN validateMDN = null;
		IVRDataBean ivrDataBean = null;
		
		try{
			
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_POSTPAID_FLAG).setValue("Y");
			
			/*//Setting input for MDN hard coding
			validateMDN = new ValidateMDN();
			validateMDN.setAppName(LoadProperty.getivrconfigProp(Constants.ApplicationName));
			validateMDN.setMdn(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
			
			//Setting logger and sesion id 
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDataBean);
			
			//Invoking DB
			validateMDN = IVRDBServiceInstance.getIVRDBInstance().checkMDNHardCoding(ivrDataBean, validateMDN);
			
			
			if((validateMDN.getFlag()).equalsIgnoreCase(Constants.Success)){
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_POSTPAID_FLAG).setValue("Y");
			}else if((validateMDN.getFlag()).equalsIgnoreCase(Constants.Failure)){
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_POSTPAID_FLAG).setValue("N");
			}else{
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_LINK_DOWN).setValue("Y");
			}*/
						
		}catch(Exception e){
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_LINK_DOWN).setValue("Y");
		}


	}
	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-18  05:47:19 PM
	 */
	public CheckPostPaidFlagging() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-13  03:14:20 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-13  03:14:20 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-13  03:14:20 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:linkDown", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "Y", false).setDebugId(710)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:postpaidFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Y", false).setDebugId(707)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("TransferCode", "Constants:INRS_TR_0001", false).setDebugId(1262));
				actions.add(new com.avaya.sce.runtime.Next("SetTransferData", "Postpaid").setDebugId(704));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("NotAuthorized_INRS_PA_0002", "NotPostpaid").setDebugId(709));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("TransferCode", "Constants:INRS_TR_0002", false).setDebugId(1261));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_INRS_PA_0010", "LinkDown").setDebugId(712));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
