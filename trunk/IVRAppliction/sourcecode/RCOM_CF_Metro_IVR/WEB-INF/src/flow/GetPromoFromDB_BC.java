package flow;

import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.metro.Constants;
import com.rcom.metro.StackTrace;
import com.rcom.metro.model.PromoOffer;
import com.rcom.metro.resource.IVRDBServiceInstance;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-02  05:19:16 PM
 */
public class GetPromoFromDB_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-02  05:19:16 PM
	 */
	public GetPromoFromDB_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	
	@Override
	public void requestBegin(SCESession mySession) {
	
		StringBuilder stringBuilder = new StringBuilder(40);
		try{
			ITraceInfo trace = mySession.getTraceOutput();
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB_RESPONSE).setValue(Constants.FAILURE);
			/*
			 * DB Hit to get promo phrase based on MDN
			 */
			
			PromoOffer reqPromoOffer = new PromoOffer();
			reqPromoOffer.setAppName(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.APP_NAME));
			
			Hashtable<String, PromoOffer> htPromoOffer = IVRDBServiceInstance.getIVRDBInstance().getPromoOfferInfo((IVRDataBean)mySession.getProperty(Constants.IVR_DATA_BEAN), reqPromoOffer);
			
			if(htPromoOffer != null)
			{
				String circle = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue();
				String language = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE).getStringValue();
				
				stringBuilder.append(circle).append(Constants.UNDERSCORE).append(language);
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Key to get promo offer : " +stringBuilder.toString());
				
				PromoOffer offerBean = htPromoOffer.get(stringBuilder.toString());
				
				if(offerBean != null)
				{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Promo details : " +offerBean.toString());
				String promoStatus = offerBean.getStatus();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Promo status : " +promoStatus);
				
				if(promoStatus != null && promoStatus.equalsIgnoreCase(Constants.ENABLED))
				{
				
					String promptID = offerBean.getPhraseLabel();
						
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Get Promo - Prompt ID : " +promptID);
					if(promptID != null && !promptID.equalsIgnoreCase(Constants.EMPTY))
					{
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB_RESPONSE).setValue(Constants.SUCCESS);
						String initialPrompt = promptID + AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.AFTER_PROMO_MESSAGE);
						
						mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);
						mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__RE_PROMPT_NO_MATCH).setValue(initialPrompt);
						mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__RE_PROMPT_NO_INPUT).setValue(initialPrompt);
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Promo Menu Initial Prompt : " +initialPrompt);
					}
				}
				}
				else
				{
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB_RESPONSE).setValue(Constants.FAILURE);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "** Promo Offer Not Configured ** ");
				}
					
			}
			else
			{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB_RESPONSE).setValue(Constants.FAILURE);
			}
		}catch(Exception e) {
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB_RESPONSE).setValue(Constants.FAILURE);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
			StackTrace.PrintException(e);
		}
	}
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-JAN-28  05:42:45 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JAN-28  05:42:45 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JAN-28  05:42:45 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:dbResponse", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:SUCCESS", true).setDebugId(1365)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Promo_MN", "Success").setDebugId(1336));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferPoint", "TransferPoints:MIVR_TR_0015", false).setDebugId(1638));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_PP", "Failure").setDebugId(1367));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
