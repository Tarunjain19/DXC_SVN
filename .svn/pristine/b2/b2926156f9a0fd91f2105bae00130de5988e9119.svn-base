package flow;

import java.util.ArrayList;
import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.SeasonalPackAct;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.DynamicMenu;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-NOV-25  03:52:23 PM
 */
public class chkSeasonFlag extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-NOV-25  03:52:23 PM
	 */
	public chkSeasonFlag() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:39 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:39 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:39 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Seasonal Flag Value ::::", "Flag:seasonalFlag").setDebugId(8872));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:seasonalFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "ON", false).setDebugId(8386)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("SeasonalMenu1", "Season ON").setDebugId(8384));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ActiveSCN_MainMN", "Season OFF").setDebugId(8388));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		SeasonalPackAct seasonalPackAct = null;
		IVRDataBean objIVRDataBean = null;
		String SeasonalDetails = AppConstants.EMPTY_STRING ;
		String Sflag = AppConstants.EMPTY_STRING; 
		AppProperties ivrProperties = null;
				
		ITraceInfo trace = mySession.getTraceOutput();
		List<String> dynamicList = new ArrayList<>();
		
		try {
			seasonalPackAct = new SeasonalPackAct();
			String circleId= mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			//String HUB= mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HUB).getStringValue();
			ivrProperties = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES);
			String Season_prompts = ivrProperties.getIVRProp("RCOM_CF_RDTV9001_IVR-RD01_MN_0060");
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Season_prompts: "+Season_prompts);
			
			String season_temp[]=Season_prompts.split("\\|\\|");
		
			seasonalPackAct.setCircleId(circleId);
			  
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstants.IVRDATABEAN);
			
			//trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"HUB : "+HUB+" "+"Going to hit DB");
			
			seasonalPackAct = IVRDBServiceInstance.getIVRDBInstance().getSeasonalPackAct(objIVRDataBean, seasonalPackAct);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"seasonalPackAct :"+seasonalPackAct);
				
			if(seasonalPackAct!=null){
				SeasonalDetails=seasonalPackAct.getSeasonalDetails();
				
				SeasonalDetails=SeasonalDetails.replace("||", "@");
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SeasonalDetails ::"+SeasonalDetails);
				
				String[] SeasonalData = SeasonalDetails.split("\\@");
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SeasonalData ::"+SeasonalData);
				
				String[] SeasonalPacks =new String[(SeasonalData.length)-1];
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SeasonalData length is ::"+SeasonalData.length);
				
				String initialprompts="";
								
				int j=0;
								
				for(int i=0;i< SeasonalData.length;i++){
						SeasonalPacks=SeasonalData[i].split("\\|");
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SeasonalPacks ::"+SeasonalPacks);
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SeasonalPacks length is ::"+SeasonalPacks.length +"Pack data" + SeasonalPacks[0]);
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SSeasonalPacks[0] ::"+SeasonalPacks[0]);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SSeasonalPacks[1] ::"+SeasonalPacks[1]);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SSeasonalPacks[2] ::"+SeasonalPacks[2]);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SSeasonalPacks[3] ::"+SeasonalPacks[3]);
						
						if(SeasonalPacks[3].equalsIgnoreCase("ON"))
						{
							if(j==0)
							{
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Seasonal flag is ON VAlue of J is::"+j);
							mySession.getVariableField(IProjectVariables.SEASONAL_PACK_FROM_DB,IProjectVariables.SEASONAL_PACK_FROM_DB_FIELD_OFFER_1).setValue(SeasonalPacks[0]);
							mySession.getVariableField(IProjectVariables.SEASONAL_PACK_FROM_DB,IProjectVariables.SEASONAL_PACK_FROM_DB_FIELD_PRICE_1).setValue(SeasonalPacks[2]);
							mySession.getVariableField(IProjectVariables.SEASONAL_PACK_FROM_DB,IProjectVariables.SEASONAL_PACK_FROM_DB_FIELD_FLAG_1).setValue(SeasonalPacks[3]);
							String temp_prompt1=SeasonalPacks[4];
							//dynamicList.add(SeasonalPacks[2]+AppConstants.currency);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"temp_prompt1 ::"+temp_prompt1);
														
							mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_SEASONAL_FLAG).setValue("ON");
							season_temp[j]=season_temp[j].replaceAll("M"+j, temp_prompt1);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"After replace season_temp[0] ::"+season_temp[j]);
							j=j+1;
							}
							else if(j==1)
							{
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Seasonal flag is ON VAlue of J is::"+j);
								mySession.getVariableField(IProjectVariables.SEASONAL_PACK_FROM_DB,IProjectVariables.SEASONAL_PACK_FROM_DB_FIELD_OFFER_2).setValue(SeasonalPacks[0]);
								mySession.getVariableField(IProjectVariables.SEASONAL_PACK_FROM_DB,IProjectVariables.SEASONAL_PACK_FROM_DB_FIELD_PRICE_2).setValue(SeasonalPacks[2]);
								mySession.getVariableField(IProjectVariables.SEASONAL_PACK_FROM_DB,IProjectVariables.SEASONAL_PACK_FROM_DB_FIELD_FLAG_2).setValue(SeasonalPacks[3]);
								String temp_prompt2=SeasonalPacks[4];
								//dynamicList.add(SeasonalPacks[2]+AppConstants.currency);
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"temp_prompt1 ::"+temp_prompt2);
								mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_SEASONAL_FLAG).setValue("ON");
								season_temp[j]=season_temp[j].replaceAll("M"+j, temp_prompt2);
						       	trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"After replace season_temp[0] ::"+season_temp[j]);
								j=j+1;
							}
							
						}						
					}
						//mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_SEASONAL_PACK_COUNT).setValue(j);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Toatl number of packs ::::"+j);
						
						String strInitialAudio="";
						String MenuOption="";
						String Menu_length=""+j;
						//String Menu_Count=mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_SEASONAL_PACK_COUNT).getStringValue();
												
						for (int i=0;i<j;i++)
						{ int k=i+1;
							strInitialAudio=strInitialAudio+season_temp[i];
							strInitialAudio=strInitialAudio+"*";
							MenuOption=MenuOption+k;
							MenuOption=MenuOption+",";
														
						}
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Before loop nitialAudio ::"+strInitialAudio);
						
						MenuOption=MenuOption.substring(0,MenuOption.length()-1);
						
						/** Invoking the playPromt method **/
						strInitialAudio = DynamicMenu.playPrompt(dynamicList, strInitialAudio,"NA", AppConstants.RD01_MN_0060, trace);
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"After loop dynamic initialAudio for Amount::"+strInitialAudio);
						
						
						
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"After all nitialAudio ::"+strInitialAudio);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"After all MenuOption ::"+MenuOption);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"After all Menu_length ::"+Menu_length);
				
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(strInitialAudio);
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_MENU_OPTION).setValue(MenuOption);
						mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_MORE_OPTION_COUNT).setValue(Menu_length);
				
			}else{
				//mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"SeasonalDetails Object is null");
			}
		}
		catch (Exception e) {
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
			//trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in DNIS ROUTING :" +e);
			StackTrace.PrintException(e);
		}
		
	}
}

