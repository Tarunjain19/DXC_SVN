package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.GetCounterBarring;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-JAN-07  12:17:42 PM
 */
public class checkBarring extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-JAN-07  12:17:42 PM
	 */
	public checkBarring() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		//  Auto-generated method stub
		super.requestBegin(mySession);		
		
		GetCounterBarring counterBarring = null;
		IVRDataBean objIVRDataBean = null;
		String Barring_Status = AppConstants.EMPTY_STRING ;
		String RepeatCallerFlag = AppConstants.EMPTY_STRING ;
		String mobile_no = AppConstants.EMPTY_STRING; 
		String SUCC_FAIL_MSG = AppConstants.EMPTY_STRING; 
		String ERR_MSG_OUT =  AppConstants.EMPTY_STRING;
		String CheckRetailer=  AppConstants.EMPTY_STRING;
		String TxfrFromRetailer=  AppConstants.EMPTY_STRING;
		
		ITraceInfo trace = mySession.getTraceOutput();
		
		mobile_no = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
		CheckRetailer =  mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_SCNINVOKED_FROM_SERVICE_PARTNER).getStringValue();
		TxfrFromRetailer= mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_RETAILER_ISPNODE).getStringValue();
		
		
		if(CheckRetailer.equalsIgnoreCase("YES") || TxfrFromRetailer.equalsIgnoreCase("T"))
			{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"mobile_no::"+mobile_no+ "::Retailers are excluded for barring");
					RepeatCallerFlag="NA";
					Barring_Status="NA";
			}
		else {
				try {
					counterBarring = new GetCounterBarring();
								
					counterBarring.setMobileNo(mobile_no);
					counterBarring.setLOB_ID("03");
					counterBarring.setCOUNTER_SEGMENT("Normal");
					
					objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstants.IVRDATABEAN);
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"mobile_no::"+mobile_no+ ":: Going to hit DB to check barring status");
					counterBarring = IVRDBServiceInstance.getIVRDBInstance().getCounterBarring(objIVRDataBean, counterBarring);
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"counterBarring :"+counterBarring);
						
					if(counterBarring!=null){
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"values returned from barring proc");
						
						Barring_Status=counterBarring.getBARRED_STATUS();		//Normal: not Barred, DBAR: Daily Barred, WBAR: Weekly Barred, MBAR: Monthly BAR
						RepeatCallerFlag= counterBarring.getREPEATED_COUNT();	//0 for first time caller & 1 for repeated caller
						SUCC_FAIL_MSG=counterBarring.getSUCC_FAIL_MSG();		//0 for success, 1 for failure
						ERR_MSG_OUT=counterBarring.getERR_MSG();
					}
					
					if(RepeatCallerFlag==null)
					{
						RepeatCallerFlag="NA";
					}
					
					mySession.getVariableField(IProjectVariables.BARRING_VARIABLES, IProjectVariables.BARRING_VARIABLES_FIELD_BARRING_STATUS).setValue(Barring_Status);
					mySession.getVariableField(IProjectVariables.BARRING_VARIABLES, IProjectVariables.BARRING_VARIABLES_FIELD_REPEAT_CALLER_STATUS).setValue(RepeatCallerFlag);
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Response from Barring Proc::Barring_Status::"+Barring_Status+"RepeatCallerFlag::"+RepeatCallerFlag
											+"SUCC_FAIL_MSG::"+SUCC_FAIL_MSG+"  ERR_MSG_OUT::"+ERR_MSG_OUT);
					
					}catch (Exception e) {
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
					
						StackTrace.PrintException(e);
					}
		 }
		
	}
		
	
	
	

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:41 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Txfr_Ann", "Default");
		next.setDebugId(9052);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:41 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:41 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "BarringVariables:BarringStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "DBAR", false).setDebugId(9055)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("dmInputParameter:initialPrompt", "BarringVariables:DBar", false).setDebugId(9202));
			actions.add(new com.avaya.sce.runtime.Next("playBarringMsg", "DBAR").setDebugId(9205));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "BarringVariables:BarringStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "WBAR", false).setDebugId(9056)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("dmInputParameter:initialPrompt", "BarringVariables:WBar", false).setDebugId(9203));
			actions.add(new com.avaya.sce.runtime.Next("playBarringMsg", "WBAR").setDebugId(9206));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "BarringVariables:BarringStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "MBAR", false).setDebugId(9058)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("dmInputParameter:initialPrompt", "BarringVariables:MBar", false).setDebugId(9204));
			actions.add(new com.avaya.sce.runtime.Next("playBarringMsg", "MBAR").setDebugId(9207));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "BarringVariables:RepeatCallerStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "1", false).setDebugId(9060)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0058", false).setDebugId(9059));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
