package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.servion.util.AppProperties;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-27  05:02:21 PM
 */
public class SetLanguage_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-27  05:02:21 PM
	 */
	public SetLanguage_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo trace = mySession.getTraceOutput();
				
		String langMenuRetCode = mySession.getVariableField(IProjectVariables.LANG_SEL__MN, IProjectVariables.LANG_SEL__MN_FIELD_RETURN_CODE).getStringValue();
		String langMenuRetValue = mySession.getVariableField(IProjectVariables.LANG_SEL__MN, IProjectVariables.LANG_SEL__MN_FIELD_VALUE).getStringValue();
		
		String dmPropertiesLocation = null;
		String language = null;

		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SELECT_LANGUAGE__MN_FIELD_RETURN_CODE : " +langMenuRetCode);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SELECT_LANGUAGE__MN_FIELD_VALUE : " +langMenuRetValue);
		
		AppProperties ivrConfigProperties = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES);
		
		/*
		 * If Language Selection Return Code success - Set selected language to proceed further in call flow
		 */
		
		if(langMenuRetCode.equalsIgnoreCase(mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_SUCCESS).getStringValue()))
		{
			if(langMenuRetValue.equalsIgnoreCase(AppConstants.RET_VAL_LANG_MARATHI))
			{
				dmPropertiesLocation = ivrConfigProperties.getIVRProp(AppConstants.DM_PROPERTIES_LOCATION_MARATHI);
				language = ivrConfigProperties.getIVRProp(AppConstants.LANGUAGE_MARATHI);
				mySession.setCurrentLanguage("MAR");
				
			}
			else if (langMenuRetValue.equalsIgnoreCase(AppConstants.RET_VAL_LANG_HINDI))
			{
				dmPropertiesLocation = ivrConfigProperties.getIVRProp(AppConstants.DM_PROPERTIES_LOCATION_HINDI);
				language = ivrConfigProperties.getIVRProp(AppConstants.LANGUAGE_HINDI);
				mySession.setCurrentLanguage("HIN");
			}
			/*else if(langMenuRetValue.equalsIgnoreCase(AppConstants.RET_VAL_LANG_HINDI))
			{
				dmPropertiesLocation = ivrConfigProperties.getIVRProp(AppConstants.DM_PROPERTIES_LOCATION_ENGLISH);
				language = ivrConfigProperties.getIVRProp(AppConstants.LANGUAGE_ENGLISH);
			}*/
			else if(langMenuRetValue.equalsIgnoreCase(AppConstants.RET_VAL_LANG_ENGLISH))
			{
				dmPropertiesLocation = ivrConfigProperties.getIVRProp(AppConstants.DM_PROPERTIES_LOCATION_ENGLISH);
				language = ivrConfigProperties.getIVRProp(AppConstants.LANGUAGE_ENGLISH);
				mySession.setCurrentLanguage("ENG");
			}
			else if(langMenuRetValue.equalsIgnoreCase(AppConstants.RET_VAL_LANG_GUJARATI))
			{
				dmPropertiesLocation = ivrConfigProperties.getIVRProp(AppConstants.DM_PROPERTIES_LOCATION_GUJARATI);
				language = ivrConfigProperties.getIVRProp(AppConstants.LANGUAGE_GUJARATI);
				mySession.setCurrentLanguage("GUJ");
			}
		}
		
		/*
		 * If Language Selection Return Code Failure - Set Hindi language to proceed further in call flow
		 */
		else
		{
			dmPropertiesLocation = ivrConfigProperties.getIVRProp(AppConstants.DM_PROPERTIES_LOCATION_HINDI);
			language = ivrConfigProperties.getIVRProp(AppConstants.LANGUAGE_HINDI);
			mySession.setCurrentLanguage("HIN");
			/*dmPropertiesLocation = ivrConfigProperties.getIVRProp(AppConstants.DM_PROPERTIES_LOCATION_ENGLISH);
			language = ivrConfigProperties.getIVRProp(AppConstants.LANGUAGE_ENGLISH);*/
		}
		
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(dmPropertiesLocation);
		mySession.getVariableField(IProjectVariables.LANGUAGE).setValue(language);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION :: " +dmPropertiesLocation);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "LANGUAGE CODE :: " +language);
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:16 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("DB_HotFlashInfo_BC", "Default");
		next.setDebugId(2234);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:16 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:16 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
