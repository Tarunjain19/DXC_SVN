package flow.subflow.ProductsAndOffers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.postpaid.model.CircleOffersInfo;
import com.rcom.postpaid.model.MDNOfferInfo;
import com.rcom.postpaid.resource.IVRDBServiceInstance;
import com.servion.postpaid.utils.AppDataMap;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.PrintStackTrace;
import com.servion.postpaid.utils.SetPushSMS;
import com.servion.rcom.hostinterface.view.OfferDetails;
import com.servion.rcom.hostinterface.view.PlanDetails;
import com.servion.rcom.hostinterface.view.ReqDataOffers;
import com.servion.rcom.hostinterface.view.ResDataOffers;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-08  01:03:52 PM
 */
public class AccessHost_MDNDataOffer extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		String mdn = "",dataInfoKey = "";
		String appName = "";
		String language = "",offerKey= "",circleID = "";
		String strVoiceOfferPhrase = "",strVoiceOfferDetailPhrase= "",strOfferCode = "";
		String IP ="",EPM_Alarm_Description = "";
		int count = 0;
		ReqDataOffers reqDataOffers = null;
		ResDataOffers resDataOffers = null;
		IVRWebService webServiceManager = null;
		IVRDataBean objIVRData = null;
		
		ArrayList<OfferDetails> resPackDetails = null;
		ArrayList<String> offerCodes = null,offerPhrase = null;
		HashMap<String,String>	offerDetailPhrase = null;
		OfferDetails objPackDetails =null; 
		Hashtable<String, List<CircleOffersInfo>> mapCircleOffersInfo = null;
		HashMap<String, String> offerPhraseMap =null;
		List<CircleOffersInfo> listCircleOffersInfo = null;
		CircleOffersInfo objCircleOffersInfo = null;
		
		AppProperties appProperties = null;
		PlanDetails planDetails = null;
		SetPushSMS setPushSMS = null;
		String strSMSFrame = "";
		ArrayList<String> arrSMSData = null;
		Hashtable<String, String> smsHashTable = null;
		
		MDNOfferInfo objMDNOfferInfo =null;
		Hashtable<String, Hashtable<String, List<MDNOfferInfo>>> mapMDNOfferInfo = null;
		try
		{
			
			setPushSMS = new SetPushSMS();
			arrSMSData = new ArrayList<String>();
			appProperties = (AppProperties) mySession.getProperty(Constants.IvrPropertyInstance);
			IP = mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_TOMCAT__SERVER_IP).getStringValue();
			objIVRData = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			
			/****Offer for You****/
			/**Request Processing......**/
			mdn = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue();
			appName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
			circleID = mySession.getVariableField(IProjectVariables.ROUTING_INFO,IProjectVariables.ROUTING_INFO_FIELD_CIRCLE).getStringValue();
			language = mySession.getCurrentLanguage();
			
			try {
				offerCodes = new ArrayList<>();
				offerPhrase = new ArrayList<>();
				offerDetailPhrase = new HashMap<String,String>();
				offerPhraseMap= new HashMap<String,String>();
				
				reqDataOffers = new ReqDataOffers();
				reqDataOffers.setMDN(mdn);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Offer Host Request :: "+reqDataOffers.toString());
				
				/**Response Processing......**/
				webServiceManager = new IVRWebServiceImpl();
				try{
				resDataOffers = webServiceManager.executeDataOffers(objIVRData,reqDataOffers);
				}
				catch(Exception e)
				{
					EPM_Alarm_Description =IP+"|"+e;
					mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_FLAG).setValue("TRUE");
					mySession.getVariableField(IProjectVariables.EPM__ALARM,IProjectVariables.EPM__ALARM_FIELD_DESCRIPTION).setValue(EPM_Alarm_Description);
				}
				
				if(resDataOffers!=null && Constants.zero.equalsIgnoreCase(resDataOffers.getResponseCode())){
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Offer MDN Host Response :: "+resDataOffers.toString());
					resPackDetails = resDataOffers.getOfferDetailsList();
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Offer MDN Package Details :: "+resPackDetails);
					
					if(resPackDetails!=null ){
						for(int i= 0;i<resPackDetails.size();i++){
							objPackDetails = resPackDetails.get(i);
							
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Offer MDN OfferCode ::"+i+":"+resPackDetails);
							String campaignName = objPackDetails.getCampaignName();
							
							if(campaignName != null){
								objMDNOfferInfo = new MDNOfferInfo();
								objMDNOfferInfo.setAppName(appName);
								objMDNOfferInfo.setCampaignname(campaignName);
								objMDNOfferInfo.setCircleId(circleID);
								objMDNOfferInfo.setLanguage(language);
								objMDNOfferInfo.setOfferType(Constants.DATA_OFFER);
							}
							
							objMDNOfferInfo = IVRDBServiceInstance.getInstance().getMDNSpecificOffers(objIVRData,objMDNOfferInfo);
							if(objMDNOfferInfo!= null){
								if(objMDNOfferInfo.getOfferCode() != null){
									strVoiceOfferPhrase = objMDNOfferInfo.getOfferCategoryPhrase();
									strVoiceOfferDetailPhrase = objMDNOfferInfo.getOfferDetailPhrase();
									String offerID = objMDNOfferInfo.getOfferCode();
									strOfferCode = strOfferCode+offerID+Constants.COMMA;
									
									offerPhrase.add(strVoiceOfferPhrase);
									offerCodes.add(offerID);
									offerDetailPhrase.put(offerID,strVoiceOfferPhrase);
									offerPhraseMap.put(offerID,strVoiceOfferDetailPhrase);
								}
								
							}
							count++;
							if(i==0){
								break;
							}
							
						}
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Offer MDN Offer Code List:: "+offerCodes);  
					}
					
				}else{
					 mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_TRANSFER_REASON_CODE).setValue("TR_0071");
				}
			} catch (Exception e) {
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "--->Exception in accessing voice offer host:"+e.getMessage());
				PrintStackTrace.PrintException(e);
			}
			
			
			
			/***DB Hit to get the Data Offer details **/
			dataInfoKey = Constants.DATAOFFER_KEY+appName;
			mapCircleOffersInfo = (Hashtable<String, List<CircleOffersInfo>>) AppDataMap.getInstance(appName).getAppData(dataInfoKey);
		//  chnage value of for loop from 2 to 3 for play 3 offer
			for(int i = 1 ; i<=3 ; i++){
				
				offerKey = circleID+Constants.UNDERSCORE+language+Constants.UNDERSCORE+Constants.Option+i;
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Activate Data Offer Key :: "+offerKey);
				listCircleOffersInfo = mapCircleOffersInfo.get(offerKey);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "listCircleOffersInfo Object :: "+listCircleOffersInfo);
				
				if(listCircleOffersInfo!= null){
					objCircleOffersInfo = listCircleOffersInfo.get(0);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circle Offers Info Object :: "+objCircleOffersInfo);
					
					if(objCircleOffersInfo!= null){
						strVoiceOfferPhrase= objCircleOffersInfo.getOfferCategoryPhrase();
						strVoiceOfferDetailPhrase = objCircleOffersInfo.getOfferDetailPhrase();
						String offerID = objCircleOffersInfo.getOfferCode();
						strOfferCode = strOfferCode+offerID+Constants.COMMA;
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Category Phrase :: "+strVoiceOfferPhrase);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Detail Phrase :: "+strVoiceOfferDetailPhrase);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Code :: "+strOfferCode);
						
						offerPhrase.add(strVoiceOfferPhrase);
						offerCodes.add(offerID);
						offerDetailPhrase.put(offerID,strVoiceOfferDetailPhrase);
						offerPhraseMap.put(offerID,strVoiceOfferPhrase);
						count++;
					}
			}
		}
		mySession.setProperty(Constants.OFFERCODES,strOfferCode);
		mySession.setProperty(Constants.OFFER_PHRASE,offerPhrase);
		mySession.setProperty(Constants.OFFER_PHRASE_MAP,offerPhraseMap);
		mySession.setProperty(Constants.OFFER_DETAILS_PHRASE,offerDetailPhrase);
		mySession.setProperty(Constants.OFFER_COUNT,count);
		
		
	}
	catch(Exception e)
	{
		strSMSFrame = appProperties.getIVRProp(Constants.DATA_OFFER_Failure);
		smsHashTable = setPushSMS.generatePushSMSDataMap(strSMSFrame, arrSMSData);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Exception in Data Offer Details Host : " + e);
		mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
		mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_TRANSFER_REASON_CODE).setValue("TR_0129");
		
	}
	finally
	{
		reqDataOffers = null;
		resDataOffers = null;
		webServiceManager = null;
		mySession.setProperty(Constants.SMSDataMap, smsHashTable);
	}
		
	
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-08  01:03:52 PM
	 */
	public AccessHost_MDNDataOffer() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:44 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:44 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:44 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "EPM_Alarm:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:True", true).setDebugId(2848)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.ReportAlarmInfo(com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_CRITICAL, "WS Down|Products and Offers flow|AccessHost_MDNDataOffer|", "EPM_Alarm:Description", true).setDebugId(2849));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("EPM_Alarm:Flag", "Constants:False", false).setDebugId(2850));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(1);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("CallData:globalMenuType", "Constants:FeatureLevel", false).setDebugId(2560));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(1552)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:isLinkDown", "Constants:no", false).setDebugId(2564));
			actions.add(new com.avaya.sce.runtime.Next("ProductsAndOffers-PushSMS_PA_0066", "LinkDown").setDebugId(1553));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ProductsAndOffers-Initialize_MN_0026", "Continue").setDebugId(1555));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
