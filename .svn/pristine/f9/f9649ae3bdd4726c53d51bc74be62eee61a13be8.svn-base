package flow.subflow.ProductsAndOffers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.SetPushSMS;
import com.servion.rcom.hostinterface.view.PlanDetails;
import com.servion.util.AppProperties;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-NOV-14  10:47:01 AM
 */
public class Check_APP extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	public void requestBegin(SCESession mySession) {

		ITraceInfo info = mySession.getTraceOutput();

		String AppName="";
		boolean app_flag=false;
			
			AppName = mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
			
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "AppName is IN JAVA: "+AppName);
			if(AppName.contains("CDMA"))
			{
				mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_APP_FLAG).setValue("True");
					 app_flag=mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_APP_FLAG).getBooleanValue();	
					info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "AppName contains CDMA"  +app_flag);
				
			}
			else {
				app_flag=mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_APP_FLAG).getBooleanValue();
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "AppName doesnot contain CDMA"  +app_flag);
			}
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-NOV-14  10:47:01 AM
	 */
	public Check_APP() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:44 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("ProductsAndOffers-GlobalPrompt_ActivateOfferSuccessful_PA0065", "Default");
		next.setDebugId(2747);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:44 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:44 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "App Name is", "AppName").setDebugId(2752));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "CallData:appFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "true", false).setDebugId(2751)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Application name ::::::::::::::::::::::::::::::", "AppName").setDebugId(2878));
			actions.add(new com.avaya.sce.runtime.Next("ProductsAndOffers-ActivateOffer_MN_0050", "CDMA").setDebugId(2753));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
