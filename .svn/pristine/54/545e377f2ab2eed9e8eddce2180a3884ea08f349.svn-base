package flow.subflow.AccountInformation;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.postpaid.utils.Constants;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-16  12:41:04 PM
 */
public class CheckNextBucket extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-16  12:41:04 PM
	 */
	public CheckNextBucket() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:52 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:52 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:52 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isMoreBucket", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(6125)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("AccountInformation-initialize_PA_0015", "PlayBalance").setDebugId(6126));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(4);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("FreeUnitInfo:iniBucket", "0", true).setDebugId(6135));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("FreeUnitInfo:endBucket", "1", true).setDebugId(6136));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Current Language after playing DM::", "session:currentlanguage").setDebugId(6141));
			actions.add(new com.avaya.sce.runtime.Next("AccountInformation-PushSMSFreeUnitInfo", "End").setDebugId(6123));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo info = mySession.getTraceOutput();
		String returnCode = "";
			try{
			
		
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"returnCode is :"+returnCode);
			
			
				String bucketSize=mySession.getVariableField(IProjectVariables.FREE_UNIT_INFO,IProjectVariables.FREE_UNIT_INFO_FIELD_BUCKET_SIZE).getStringValue();
			    String Arrav_Inital= mySession.getVariableField(IProjectVariables.FREE_UNIT_INFO,IProjectVariables.FREE_UNIT_INFO_FIELD_INI_BUCKET).getStringValue();
			    String Arrav_End= mySession.getVariableField(IProjectVariables.FREE_UNIT_INFO,IProjectVariables.FREE_UNIT_INFO_FIELD_END_BUCKET).getStringValue();
			    
			    int Total_count=Integer.parseInt(bucketSize);
			    int Array_start=Integer.parseInt(Arrav_Inital);
			    int Array_finish=Integer.parseInt(Arrav_End);
			    
			    info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Total_count:"+Total_count);
			    info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Array start after playing bucket balance :"+Array_start);
			    info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Array End after playing bucket balance :"+Array_finish);
			    
			    if(Array_finish>=Total_count)
			    {
			    	
			    	mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_MORE_BUCKET).setValue(Constants.No);
			    	
			    }
			    else
			    {
			    	 Array_start=Array_start+1;
			    	 Array_finish=Array_finish+1;
			    	 mySession.getVariableField(IProjectVariables.FREE_UNIT_INFO,IProjectVariables.FREE_UNIT_INFO_FIELD_INI_BUCKET).setValue(Array_start);
			    	 mySession.getVariableField(IProjectVariables.FREE_UNIT_INFO,IProjectVariables.FREE_UNIT_INFO_FIELD_END_BUCKET).setValue(Array_finish);
			    	 mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_MORE_BUCKET).setValue(Constants.Yes);
			    	
			    }
			
			    
	}catch(Exception e)
	{
		
	}
	
}
}
