package flow.subflow.HotFlash;

import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.postpaid.model.HotFlashInfo;
import com.servion.postpaid.utils.AppDataMap;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.PrintStackTrace;
import com.servion.util.AppProperties;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-13  07:03:07 PM
 */
public class Initialize_Hotflash extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);

		/*Declaring variables*/
		ITraceInfo info = null;
		Hashtable<String, HotFlashInfo> objMapHotFlashInfo = null;
		AppProperties audioConfigInstance = null;
		HotFlashInfo hotFlashInfo = null;
		String strCircle = "", strCurrentLanguage = "", strApplicationName = "", strActiveFlag = "";
		String strStartDate = "", strEndDate = "", strInitialAudio = "", strNodeId = "";

		try {
			/*Assigning values for the variable*/
			info = mySession.getTraceOutput();
			strNodeId = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_HOTFLASH_ID).getStringValue();
			audioConfigInstance = (AppProperties) mySession.getProperty(Constants.AudioPropertyInstance);
			strApplicationName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
			strCircle = mySession.getVariableField(IProjectVariables.ROUTING_INFO, IProjectVariables.ROUTING_INFO_FIELD_CIRCLE).getStringValue();
			strCurrentLanguage = mySession.getCurrentLanguage();
			objMapHotFlashInfo = (Hashtable<String, HotFlashInfo>) AppDataMap.getInstance(strApplicationName).getAppData(Constants.HOTFLASH_KEY+strApplicationName);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Application name:"+strApplicationName);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Hot flash Info:"+objMapHotFlashInfo);
			if(objMapHotFlashInfo!=null){
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Hot flash Key:"+strNodeId+Constants.UNDERSCORE+strCircle+Constants.UNDERSCORE+strCurrentLanguage);
				hotFlashInfo = objMapHotFlashInfo.get(strNodeId+Constants.UNDERSCORE+strCircle+Constants.UNDERSCORE+strCurrentLanguage);
				if(hotFlashInfo!=null){
					
					strActiveFlag = hotFlashInfo.getEnabledFlag();
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Hot flag enabled status:"+strActiveFlag);
					
					if((strActiveFlag.equalsIgnoreCase(Constants.Y))||(strActiveFlag.equalsIgnoreCase(Constants.Yes))){
						strInitialAudio = hotFlashInfo.getPhraseId();
						mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_INITIAL_AUDIOS).setValue(strInitialAudio);
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_HOT_FLASH_ACTIVE).setValue(Constants.Yes);
					}else{
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_HOT_FLASH_ACTIVE).setValue(Constants.No);
					}
					
				}else{
					mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_HOT_FLASH_ACTIVE).setValue(Constants.No);
				}
			}else{
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_HOT_FLASH_ACTIVE).setValue(Constants.No);
			}
		} catch (Exception e) {
			PrintStackTrace.PrintException(e);
		}

	}
	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-13  07:03:07 PM
	 */
	public Initialize_Hotflash() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:45 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:45 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:45 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isHotFlashActive", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(137)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("HotFlash-Play_HotFlash", "HotFlashActive").setDebugId(7));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("HotFlash-HotFlashReturn", "HotFlashInActive").setDebugId(139));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
