package flow.subflow.Change_Language;

import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.UpdateLanguage;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.AppDataMap;
import com.rcom.rdtv.util.DynamicMenu;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;


import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-16  09:14:37 PM
 */
public class Set_Preffered_Lang_IVR_CSP extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-16  09:14:37 PM
	 */
	public Set_Preffered_Lang_IVR_CSP() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:03 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:03 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:03 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(460)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:IsHostFailure", "CONSTANTS:NO", false).setDebugId(629));
			actions.add(new com.avaya.sce.runtime.Next("Change_Language-ChangeLang_SuccessAnnc", "linkdown").setDebugId(304));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Change_Language-ChangeLang_SuccessAnnc", "next").setDebugId(463));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
			
			/** Declaration **/
			String selectedLanguageCode = AppConstants.EMPTY_STRING,appName = AppConstants.EMPTY_STRING,hostOutput = AppConstants.ERROR;
			String selectedLanguage =AppConstants.EMPTY_STRING;
			String callerANI = AppConstants.EMPTY_STRING,flag = AppConstants.EMPTY_STRING;
			ITraceInfo trace = null;
			UpdateLanguage updateLanguage = null;
		

			/**Assign**/
			selectedLanguage = mySession.getCurrentLanguage();
			appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
			callerANI = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			trace = mySession.getTraceOutput();
			updateLanguage = new UpdateLanguage();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Selected Language :"+ selectedLanguage);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Caller Ani :"+ callerANI);
			
			try{
				/**DB**/
				
				updateLanguage.setLanguageFrom((String) AppDataMap.getInstance(AppConstants.RDTV_9001).getAppData(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_PREVIOUS_LANGUAGE).getStringValue()));
				updateLanguage.setLanguageTo((String) AppDataMap.getInstance(AppConstants.RDTV_9001).getAppData(mySession.getCurrentLanguage()));
				updateLanguage.setMdn(callerANI);
				updateLanguage.setSmartCardNumber(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_SCNUMBER).getStringValue());
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Change Language Host Request :: "+updateLanguage.toString());
				
				updateLanguage= IVRDBServiceInstance.getIVRDBInstance().getUpdateLanguage((IVRDataBean) mySession.getProperty(AppConstants.IVRDATABEAN), updateLanguage);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Change Language Host Response :: "+updateLanguage.toString());
				
				if(updateLanguage!=null&&updateLanguage.getFlag().equalsIgnoreCase(AppConstants.Success)&&updateLanguage.getErrorCode().equalsIgnoreCase(AppConstants.zero)){
					/**Response **/
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Update Preffered Language :"+ updateLanguage.getFlag());		
					
				}
				else
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
				}catch (Exception e) {
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
					trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in Update Language :" +e);
					StackTrace.PrintException(e);
				}
			finally
			{LanguageSuccessPrompt(mySession);}
			
		}
		
		public void LanguageSuccessPrompt(SCESession mySession){
			String initialPrompt = AppConstants.EMPTY_STRING,key = AppConstants.EMPTY_STRING,selectedLanguageCode= AppConstants.EMPTY_STRING;
			String dynamicWaves =  AppConstants.EMPTY_STRING,appName = AppConstants.EMPTY_STRING,selectedLanguage = AppConstants.EMPTY_STRING;
			ArrayList<String> arrLanguage = null;
			ITraceInfo trace =null;
			
			trace = mySession.getTraceOutput();
			appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
			key = appName+AppConstants.SEPERATOR_HYPEN+AppConstants.RD01_PA_0072;
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"application Name :"+appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG," Language set Success initial Prompt Key :"+key);
			
			dynamicWaves = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(key);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language set Success initial Prompt :"+dynamicWaves);
			arrLanguage = new ArrayList<String>();
			
			/** Form Dynamic Initial Prompt**/
			selectedLanguage = mySession.getCurrentLanguage();
			
			/*key = AppConstants.Language_Code+selectedLanguageCode;
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language_Code Key:"+key);
			selectedLanguage=(String) AppDataMap.getInstance(appName).getAppData(key);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Selected Language :"+selectedLanguage);*/
			
			if(selectedLanguage!=null && !AppConstants.EMPTY_STRING.equalsIgnoreCase(selectedLanguage)){
				arrLanguage.add(selectedLanguage+AppConstants.wave);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic wave File :"+arrLanguage.get(0));
			}
					
			/** Form Initial Prompt**/
			 initialPrompt=DynamicMenu.playPrompt(arrLanguage, dynamicWaves, AppConstants.NA, AppConstants.RD01_PA_0072,trace);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			
	}
}
