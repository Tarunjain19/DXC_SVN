package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.red.constants.Constants;
import com.rcom.red.loadproperty.LoadProperty;
import com.rcom.red.model.IVRRoutingInfo;
import com.rcom.red.model.ValidateRedMDN;
import com.rcom.red.resource.IVRDBServiceInstance;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-17  02:47:32 PM
 */
public class ChkMDNHardCoded extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info  = mySession.getTraceOutput();
		IVRDataBean ivrDataBean = null;
		IVRRoutingInfo ivrRoutingInfo = null;
		
		try{
			/*Setting logger and sesion id */
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDataBean);
						
			ValidateRedMDN validateRedMDN =  new ValidateRedMDN();
			validateRedMDN.setMdn(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
			validateRedMDN.setDataType(LoadProperty.getivrconfigProp(Constants.DataType));
			validateRedMDN.setAppName(LoadProperty.getivrconfigProp(Constants.ApplicationName));
			validateRedMDN = IVRDBServiceInstance.getIVRDBInstance().checkRedMDNHardCoding(ivrDataBean, validateRedMDN);
			
			if((validateRedMDN.getFlag()).equalsIgnoreCase(Constants.Success)){
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_MDNHARDCODED).setValue(Constants.Y);
			}else{
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_MDNHARDCODED).setValue(Constants.N);
			}
			
		}catch (Exception e) {
			
		}
		
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-17  02:47:32 PM
	 */
	public ChkMDNHardCoded() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:34 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:34 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:34 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "N", false).setDebugId(864)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:isMDNHardcoded", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Y", false).setDebugId(448)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Retention_RED_MN_0002", "Hardcoded").setDebugId(320));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Retention_RED_PA_0002", "NotHardcoded").setDebugId(450));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Transfercode", "Constants:RED_TR_0003", false).setDebugId(1032));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_RED_PA_0009", "LinkDown").setDebugId(866));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
