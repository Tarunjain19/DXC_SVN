package flow.subflow.RechargeAcUsingCashCard;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.dbservice.IVRDataService;
import com.rcom.otherflows.dbservice.IVRDataServiceImpl;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.Constants;
import com.rcom.rdtv.StackTrace;
import com.rcom.rdtv.dthvoms.ValidatePIN;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-01  03:49:28 PM
 */
public class ValidateCashCard extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-01  03:49:28 PM
	 */
	public ValidateCashCard() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:10 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:10 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:10 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:isException", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(728)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferPoint", "TransferPoints:RD02_TR_0018", false).setDebugId(730));
			actions.add(new com.avaya.sce.runtime.Next("RechargeAcUsingCashCard-LinkDown", "LinkDown").setDebugId(731));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "ValidateCashCard:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:Success", true).setDebugId(732)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("RechargeAcUsingCashCard-AccessHost", "Valid").setDebugId(733));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("appVariables:rechargePinCount").setDebugId(735));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "appVariables:rechargePinCount", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "Constants:three", true).setDebugId(736)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("RechargeAcUsingCashCard-PINStatus_PP", "ReEnter").setDebugId(738));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("RechargeAcUsingCashCard-ExceedTries", "CountExceeded").setDebugId(588));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}

			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		ValidatePIN validatePIN = null;
		IVRDataService ivrDataService = null;
		String strPIN = "", strSCNNumber = "", strInitialPrompt = "";
		IVRDataBean ivrDataBean = null;
		
		try
		{
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			strPIN = mySession.getVariableField(IProjectVariables.GET_CASH_CARD_NO__MN, IProjectVariables.GET_CASH_CARD_NO__MN_FIELD_VALUE).getStringValue();
			strSCNNumber = mySession.getVariableField(IProjectVariables.GET_SMART_CARD_NUMBER__MN, IProjectVariables.GET_SMART_CARD_NUMBER__MN_FIELD_VALUE).getStringValue();
			AppProperties  appProperties = AppProperties.GetInstance(Constants.IVR_CONFIG_FILE_NAME);
			
			/** Request by Cash Card Number**/
			validatePIN = new ValidatePIN();
			validatePIN.setVoucherPin(strPIN);
			validatePIN.setSubcriberId(strSCNNumber);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate cash Card  Number Request :: "+validatePIN.toString());
			
			
			/** Response **/
			ivrDataService = new IVRDataServiceImpl();
			validatePIN = IVRDBServiceInstance.getDthvomsDataService().getGETDATA(ivrDataBean, validatePIN);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate cash Card  Number Response :: "+validatePIN.toString());
			
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_PIN_STATUS).setValue(validatePIN.getStatusCode());
			
			if(validatePIN.getStatusCode()==1){
				mySession.getVariableField(IProjectVariables.VALIDATE_CASH_CARD, IProjectVariables.VALIDATE_CASH_CARD_FIELD_FLAG).setValue(Constants.SUCCESS);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DENOMINATION).setValue(validatePIN.getDenomination());
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_OFFSET).setValue(validatePIN.getOffSet());
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_VOUCHER_PIN).setValue(strPIN);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_VOUCHER_NO).setValue(String.valueOf(validatePIN.getBatchNo()).concat(String.valueOf(validatePIN.getVoucherSerilaNo())));
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_RECHARGE_SCN).setValue(strSCNNumber);
			}else if(validatePIN.getStatusCode()==0){
				strInitialPrompt = appProperties.getIVRProp("PIN_Status_0");
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_PIN_STATUS_PROMPT).setValue(strInitialPrompt);
				mySession.getVariableField(IProjectVariables.VALIDATE_CASH_CARD, IProjectVariables.VALIDATE_CASH_CARD_FIELD_FLAG).setValue(Constants.FAILURE);
			}else if(validatePIN.getStatusCode()==5){
				strInitialPrompt = appProperties.getIVRProp("PIN_Status_5");
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_PIN_STATUS_PROMPT).setValue(strInitialPrompt);
				mySession.getVariableField(IProjectVariables.VALIDATE_CASH_CARD, IProjectVariables.VALIDATE_CASH_CARD_FIELD_FLAG).setValue(Constants.FAILURE);
			}else {
				strInitialPrompt = "silence.wav";
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_PIN_STATUS_PROMPT).setValue(strInitialPrompt);
				mySession.getVariableField(IProjectVariables.VALIDATE_CASH_CARD, IProjectVariables.VALIDATE_CASH_CARD_FIELD_FLAG).setValue(Constants.FAILURE);
			}
			
			/*if(validatePIN.getVoucherSerilaNo() != null)
			{
					mySession.getVariableField(IProjectVariables.VALIDATE_CASH_CARD, IProjectVariables.VALIDATE_CASH_CARD_FIELD_FLAG).setValue(Constants.SUCCESS);
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DENOMINATION).setValue(validatePIN.getDenomination());
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_OFFSET).setValue(validatePIN.getOffSet());
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_VOUCHER_PIN).setValue(strPIN);
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_RECHARGE_SCN).setValue(strSCNNumber);
			}
			else
				mySession.getVariableField(IProjectVariables.VALIDATE_CASH_CARD, IProjectVariables.VALIDATE_CASH_CARD_FIELD_FLAG).setValue(Constants.FAILURE);
*/
	}catch(Exception e)
	{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
	StackTrace.PrintException(e);
	}
	finally
	{trace=null;validatePIN=null;ivrDataService=null;}
	}
}
