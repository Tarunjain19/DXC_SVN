package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.AppConstant;
import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.StackTrace;
import com.servion.rcom.Data.hostinterface.view.ReqPushSMS;
import com.servion.rcom.Data.hostinterface.view.ResPushSMS;
import com.servion.rcom.Data.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.Data.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-NOV-21  01:15:33 PM
 */
public class PushSms extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-NOV-21  01:15:33 PM
	 */
	public PushSms() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Thankyou_1925_PA_0002", "Default");
		next.setDebugId(2750);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "CallData:isDataCard", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "START", false).setDebugId(2762)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DataCardAct_1925_PA_005", "Activate").setDebugId(2765));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "CallData:isDataCard", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "STOP", false).setDebugId(2764)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DataCardDeact_1925_PA_006", "Deactivate").setDebugId(2766));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@SuppressWarnings("null")
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo trace = mySession.getTraceOutput();
	
		
	
		
		
		
		
		String completeSMSText = Constants.EMPTY_STRING;
		ReqPushSMS reqPushSMS = null;
		ResPushSMS resPushSMS = null;
		IVRWebService ivrWebService = null;
		String DataActDeact="";
		String strMsgText="Test sms";
		IVRDataBean objIVRDataBean = null;
		try{
			
			objIVRDataBean = (IVRDataBean)mySession.getProperty(Constants.IVRDataBean);
			
			reqPushSMS=new ReqPushSMS();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "IN SMS");
			
			ivrWebService = new IVRWebServiceImpl();
			
			
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "IN ANI");
			
			
			reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_ANI).getStringValue());
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "After set  SMS");
			
			 DataActDeact= mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_IS_DATA_CARD).getStringValue();
			 
			 trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DataActDeact Status : "+DataActDeact);
			
			if(DataActDeact.equalsIgnoreCase("START"))
			{
				strMsgText = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp("ACTIVE_SMS");
			reqPushSMS.setMessageText(strMsgText);
			}
			else if(DataActDeact.equalsIgnoreCase("STOP"))
			{
				strMsgText = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp("DEACTIVE_SMS");
				reqPushSMS.setMessageText(strMsgText);
			}
			else
			{
				reqPushSMS.setMessageText(strMsgText);
			}
			
			resPushSMS = ivrWebService.executePushSMS(objIVRDataBean, reqPushSMS);
			
		}catch (Exception e) {
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in sending SMS"+e);
			
		}finally{
			
			reqPushSMS = null;
			resPushSMS = null;
			ivrWebService = null;
		}
		
		
		
	}
}
