package flow;

import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.televerification.loadproperty.LoadProperty;
import com.rcom.televerification.utils.Constants;
import com.rcom.televerification.utils.DynamicMenu;
import com.rcom.televerification.utils.StackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-02  12:37:08 PM
 */
public class InitializeLanguage extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-02  12:37:08 PM
	 */
	public InitializeLanguage() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		
		/*Declaring variables*/
		String strReginalLanguage = null;
		String strReginalLanguageAudio = null;
		String strInitialAudio = null;
		String[] arrLanguages = null;
		DynamicMenu dynamicMenu = null;
		ArrayList<String> dynamicValueList = null;
		
		try {
			
			dynamicMenu = new DynamicMenu();
			dynamicValueList = new ArrayList<String>();
			
			strReginalLanguage = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_REGINAL_LANGUAGE).getStringValue();
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO,"TELV_MN_0006 Property file Value :"+strReginalLanguage);
			arrLanguages = strReginalLanguage.split(",");
			strInitialAudio = LoadProperty.getivrconfigProp(Constants.TELV_MN_0006);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO,"TELV_MN_0006 Property file Value :"+strInitialAudio);
			info.writeln(ITraceInfo.TRACE_LEVEL_INFO,"str Reginal Language :"+strReginalLanguage);
			
			for (int i = 0; i < arrLanguages.length; i++) {
				strInitialAudio = strInitialAudio.replaceAll("L"+i,  arrLanguages[i]);
				dynamicValueList.add(LoadProperty.getivrconfigProp(arrLanguages[i]));
				
			}
			
			strInitialAudio = dynamicMenu.playPrompt(dynamicValueList, strInitialAudio, ""+dynamicValueList.size(), info);
			
			/*Framing Language selection menu*/
			/*for (int i = 0; i < arrLanguages.length; i++) {
				System.out.println("Test:Language"+LoadProperty.getivrconfigProp(arrLanguages[i]));
				strcircleLanguages = strcircleLanguages+strInitialAudio.replaceAll(Constants.Language, LoadProperty.getivrconfigProp(arrLanguages[i]));
				System.out.println("Test:"+strcircleLanguages);
				strcircleLanguages = strcircleLanguages+LoadProperty.getivrconfigProp(Constants.Press+(i+1));
				strcircleLanguages = strcircleLanguages + Constants.Star;
				
			}*/
						
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_INITIAL_PROMPT).setValue(strInitialAudio);
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_MENU_OPTION).setValue(strReginalLanguage);
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_MENU_OPTION_COUNT).setValue(arrLanguages.length);
			
		} catch (Exception e) {
			StackTrace.PrintException(e);
		}
		
	}
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-DEC-28  01:09:53 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Language_TELV_MN_0006", "Default");
		next.setDebugId(145);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-DEC-28  01:09:53 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-DEC-28  01:09:53 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
