package flow;

import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.red.constants.Constants;
import com.rcom.red.loadproperty.LoadProperty;
import com.rcom.red.model.TransferVDNInfo;
import com.rcom.red.resource.IVRDBServiceInstance;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.prepaid.report.IVRREPORTDATA.MENUDETAILS.MENU;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-17  02:53:44 PM
 */
public class SetTransferData extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		ITraceInfo info = mySession.getTraceOutput();
		TransferVDNInfo transferVDNInfo = null;
		IVRDataBean ivrDataBean = null;
		String strReasoncode = null;
		String last5Menu = "";
		String strUUI = "";
		String menuID = "";
		String strAni = "";
		String strDnis = "";
		try{
			
			strReasoncode = mySession.getVariableField(IProjectVariables.TRANSFERCODE).getStringValue(); 
					
			/*Retriving IVR data bean from session*/ 
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDataBean);
			
			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			IVRREPORTDATA ivrreportdata = getReportObject.getIvrreportdata();
			CALLINFO callInfo = ivrreportdata.getCALLINFO();
			info = mySession.getTraceOutput();

			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Menu:"+ivrreportdata.getMENUDETAILS().getMENU());
			List<MENU> menuList = ivrreportdata.getMENUDETAILS().getMENU();
			
			if(menuList  !=null){
				
				for (int i = menuList.size(); (i> (menuList.size()-5)) && (i!=0); i-- ){
					menuID = menuList.get((i-1)).getMENUID();
					info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "menu ID :"+menuID);
					last5Menu = last5Menu + menuID+"|";
				}
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Last 5 menu accessed :"+last5Menu);
			}else{
				info.writeln(ITraceInfo.TRACE_LEVEL_INFO, "No Menu accessed");
			}
			
			strReasoncode = mySession.getVariableField(IProjectVariables.TRANSFERCODE).getStringValue();
			strAni = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			strDnis = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
			strUUI = strAni+"|"+strDnis+"|"+mySession.getCurrentLanguage()+last5Menu+"|"+strReasoncode;
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_UUI_DATA).setValue(strUUI);
			callInfo.setUUIDATA(strUUI);
			callInfo.setTRANSCODE(strReasoncode);
			callInfo.setDISPOSITION("XA");
			callInfo.setCALLENDREASON("TRANSFER");
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "UUI data:"+strUUI);
			
			/*Setting input parameters*/
			transferVDNInfo = new TransferVDNInfo();
			transferVDNInfo.setAppName(LoadProperty.getivrconfigProp(Constants.ApplicationName));
			transferVDNInfo.setLanguage(mySession.getCurrentLanguage());
			transferVDNInfo.setCallType("4");
			transferVDNInfo.setCustomerSegment("3");
			transferVDNInfo.setCircle(mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_CIRCLE).getStringValue());
			transferVDNInfo.setTransferReasonCode(strReasoncode);
			
			/*Invoking DB*/
			transferVDNInfo = IVRDBServiceInstance.getIVRDBInstance().getTransferVDN(ivrDataBean, transferVDNInfo);
			
			if((transferVDNInfo.getTransferVDN1() != null)&&(transferVDNInfo.getTransferVDN2() != null)){
				mySession.getVariableField(IProjectVariables.TRANSFER_VDN_1).setValue(transferVDNInfo.getTransferVDN1());
				mySession.getVariableField(IProjectVariables.TRANSFER_VDN_2).setValue(transferVDNInfo.getTransferVDN2());
				callInfo.setAGENTEXTN(transferVDNInfo.getTransferVDN1());
				callInfo.setTRANSFERVDN(transferVDNInfo.getTransferVDN1());
				callInfo.setSKILLNAME(transferVDNInfo.getSkillName());
			}
			else
			{
				mySession.getVariableField(IProjectVariables.TRANSFER_VDN_1).setValue(LoadProperty.getivrconfigProp(Constants.DefaultVDN));
				mySession.getVariableField(IProjectVariables.TRANSFER_VDN_2).setValue(LoadProperty.getivrconfigProp(Constants.DefaultVDN));
				callInfo.setAGENTEXTN(LoadProperty.getivrconfigProp(Constants.DefaultVDN));
				callInfo.setTRANSFERVDN(LoadProperty.getivrconfigProp(Constants.DefaultVDN));
			}
			
		}catch (Exception e) {
			mySession.getVariableField(IProjectVariables.TRANSFER_VDN_1).setValue(LoadProperty.getivrconfigProp(Constants.DefaultVDN));
			mySession.getVariableField(IProjectVariables.TRANSFER_VDN_2).setValue(LoadProperty.getivrconfigProp(Constants.DefaultVDN));
			
		}
		
	}
	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-17  02:53:44 PM
	 */
	public SetTransferData() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("BlindTransfer", "Default");
		next.setDebugId(855);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(4);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "UUI DATA :: ", "CallData:uuiData").setDebugId(1143));
		actions.add(new com.avaya.sce.runtime.varoperations.PrepareAAI("Service Provider", "", "CallData:uuiData", "CallData:uuiData").setDebugId(1142));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "UUI DATA :: ", "CallData:uuiData").setDebugId(1144));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
