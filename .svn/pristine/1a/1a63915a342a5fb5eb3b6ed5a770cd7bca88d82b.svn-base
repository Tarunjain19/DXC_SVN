package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.AppConstant;
import com.servion.util.AppProperties;
/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-APR-14  11:52:02 AM
 */
public class MAPANI extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-APR-14  11:52:02 AM
	 */
	public MAPANI() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
    public void requestBegin(SCESession mySession) {
           super.requestBegin(mySession);
           /***Remove data***/
           String ani = "";
           String Postpaid_Plan="false";
           try{
                  ani = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue(); 
                  mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,"Ani Original :"+ani);
                  
                  ani = AppProperties.GetInstance(AppConstant.IVR_SIM_CONFIG).getIVRProp(ani);
                  Postpaid_Plan = AppProperties.GetInstance(AppConstant.IVR_SIM_CONFIG).getIVRProp("POSTPAID_PLAN_FLAG");
                 mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,"Postpaid_Plan flag is : "+Postpaid_Plan);
                 mySession.getVariableField(IProjectVariables.CONSTANT,IProjectVariables.CONSTANT_FIELD_POSTPAID__FLAG).setValue(Postpaid_Plan);
                  
                  if(!ani.equals(AppConstant.N)){
                        mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,"Ani Override :"+ani);
                         mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).setValue(ani);
                         mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,"Ani After Override :"+ mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue());
                  }
                  
                  
                  // Code changes to check GSM DNIS from configuration file
                  mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_GSM__FLAG).setValue("FALSE");
                  
                  String dnis = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue(); 
                  String gsm_dnis_list = AppProperties.GetInstance(AppConstant.IVR_SIM_CONFIG).getIVRProp(AppConstant.GSM_DNIS);
                  mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,"DNIS LIST : "+gsm_dnis_list);
                  String gsm_dnis[] = null;
                  
                  if(!(gsm_dnis_list.equalsIgnoreCase(""))||gsm_dnis_list!=null){
                	  
	                  gsm_dnis = gsm_dnis_list.split(AppConstant.SEPERATOR_COMMA);
	                  mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,"inside IF "+gsm_dnis);
		          	  for (int i = 0; i < gsm_dnis.length; i++) {
		        		/* trim is used to avoid space with DNIS */
		          		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,"inside FOR "+gsm_dnis[i]);
						if (dnis.equalsIgnoreCase(gsm_dnis[i].trim())) {
							mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_GSM__FLAG).setValue("TRUE");
							break;
						}
	        		}
                 }
                
	          	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,"4G Service (GSM / CDMA) : " +mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_GSM__FLAG).getStringValue());  
           }catch(Exception e){
                  mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO,"Exception in ani :" +e);
           }
	}
	
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-APR-28  01:19:07 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("InitializeVariables", "Default");
		next.setDebugId(6438);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-APR-28  01:19:07 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-APR-28  01:19:07 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
