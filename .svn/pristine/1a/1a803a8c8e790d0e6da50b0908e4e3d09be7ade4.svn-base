package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.bb.model.HNIInfo;
import com.rcom.bb.model.ValidateMDNInCSP;
import com.rcom.bb.resource.IVRDBServiceInstance;
import com.rcom.broadband.Constants;
import com.rcom.broadband.StackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-22  06:58:12 PM
 */
public class DB_IVR_CSP_Info extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-22  06:58:12 PM
	 */
	public DB_IVR_CSP_Info() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
	
		String DB_Result = Constants.FAILURE;
		String ANI = null;
		String DNIS = null;
		String disconnectDN = null;
		IVRDataBean ivrDataBean = null;
		AppProperties ivrProperties = null;
		
		boolean isHNICaller = false;
		boolean isDisconnectDN = false;
		boolean isRelianceCustomer = false;
		
		String serviceType = null; // [GSM-POST-PAID / GSM-PRE-PAID / CDMA-POST-PAID / CDMA-POST-PAID]
		String hniPre = null; //HNIPre
		String hniPost = null; //HNIPost
		
		try
		{
		
		ITraceInfo trace = mySession.getTraceOutput();
		
		/** getting the IVRData bean from session**/
		ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVR_DATA_BEAN);
		ivrProperties = AppProperties.GetInstance(Constants.IVR_CONFIG);
		
		/*
		 * Calling DB service to get CSP Info
		 */
		
		
		/** 1. Check whether ANI is Reliance Number or Not **/
		/** 2. If ANI is Reliance Number, then call IVR DB to retrieve ServiceType[GSM-POST-PAID / GSM-PRE-PAID / CDMA-POST-PAID / CDMA-POST-PAID], isHNICaller, **/
		
		ANI = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "ANI : " +ANI);
		
		DNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNIS : " +DNIS);
		
		/**Checking if DNIS is Disconnect DN**/
		disconnectDN = ivrProperties.getIVRProp(Constants.DISCONNECT_DN);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Disconnect DN Details : " +disconnectDN);
		
		if(disconnectDN.contains(DNIS))
		{
			isDisconnectDN = true;
		}
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Disconnect DN : " +isDisconnectDN);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_DISCONNECT_DN).setValue(isDisconnectDN);
		
		
		/** Checking if ANI is Reliance Number **/
		ValidateMDNInCSP validateMDNInCSP = new ValidateMDNInCSP();
		validateMDNInCSP.setMdn(ANI);
		
		validateMDNInCSP = IVRDBServiceInstance.getInstance().validateMDNInCSP(ivrDataBean, validateMDNInCSP);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Reliance No : " +validateMDNInCSP.getFlag());
		
		if(validateMDNInCSP.getFlag().equalsIgnoreCase(Constants.SUCCESS))
		{
			isRelianceCustomer = true;
			
		}
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_RELIANCE_NO).setValue(isRelianceCustomer);
		
			DB_Result = Constants.SUCCESS;
		
		if(isRelianceCustomer)
		{
		
			/** Checking if ANI is HNI **/
			HNIInfo hniInfo = new HNIInfo();
			hniInfo.setMdn(ANI);
			
			hniInfo = IVRDBServiceInstance.getInstance().getHNIInfo(ivrDataBean, hniInfo);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Service Type : " +hniInfo.getServiceType());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "HNI Pre : " +hniInfo.getHniPreValue());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "HNI Post : " +hniInfo.getHniPostValue());
			
			if(hniInfo.getServiceType() != null)
			{
				serviceType = hniInfo.getServiceType();
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Prepaid Service type : " +ivrProperties.getIVRProp(Constants.PREPAID_SERVICE_TYPE));
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Postpaid Service type : " +ivrProperties.getIVRProp(Constants.POSTPAID_SERVICE_TYPE));
				if(serviceType.contains(ivrProperties.getIVRProp(Constants.PREPAID_SERVICE_TYPE)))
				{
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_SERVICE_TYPE).setValue(mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_SERVICE_TYPE__PREPAID).getStringValue());
					
					hniPre = hniInfo.getHniPreValue();
					if(hniPre != null && hniPre.contains(Constants.HNI))
					{
						isHNICaller = true;
					}
					
				}else if(serviceType.contains(ivrProperties.getIVRProp(Constants.POSTPAID_SERVICE_TYPE)))
				{
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_SERVICE_TYPE).setValue(mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_SERVICE_TYPE__POSTPAID).getStringValue());
					
					hniPost = hniInfo.getHniPostValue();
					
					if(hniPost != null && hniPost.contains(Constants.HNI))
					{
						isHNICaller = true;
					}
				}
				else
				{
					DB_Result = Constants.FAILURE;
				}
			}
		
		}
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is HNI Caller : " +isHNICaller);
		
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HNICALLER).setValue(isHNICaller);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB__RESULT).setValue(DB_Result);
		
		}catch(Exception e)
		{
			StackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DB__RESULT).setValue(Constants.FAILURE);
		}
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:tries", "constants:One", false).setDebugId(8351));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:DB_Result", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constants:success", true).setDebugId(8357)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:DB_Result", "", true).setDebugId(8359));
			actions.add(new com.avaya.sce.runtime.Next("DB_FetchBAN", "(CSP Success)").setDebugId(8358));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferCode", "TransferCodes:DAKC_TR_0051", false).setDebugId(8362));
			actions.add(new com.avaya.sce.runtime.Next("Linkdown_PP", "(Host Timeout)").setDebugId(8361));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
