package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.util.AppConstant;
import com.servion.util.StackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-OCT-21  01:30:22 PM
 */
public class UUIDataParse extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-OCT-21  01:30:22 PM
	 */
	public UUIDataParse() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:21 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("CallStart", "Default");
		next.setDebugId(8573);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:21 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:21 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;
		try {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "session:uui", com.avaya.sce.runtime.Expression.NOT_EMPTY).setDebugId(8582)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.HexToStringDecoder("temp", "session:uui").setDebugId(8578));
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Temp Value :", "temp").setDebugId(8581));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

		} catch (Exception e1) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.CaptureException(e1).setDebugId(-1));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_ERROR, "Exception in default UUI Data", "").setDebugId(8579));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		String rUUIData,convertedUUIData;
		String prefix,postfix;
		String ani,dnis;
		ITraceInfo trace = null;
		String[] arrrUUIData;
		String[] arrUUIDATA;
		String appName= AppConstant.EMPTY_STRING;
		
		
		try {
			trace = mySession.getTraceOutput();
			rUUIData = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_UUI).getStringValue();
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Session UUI :"+rUUIData);
			prefix = AppConstant.startPart;
			postfix = AppConstant.endPart;
			
			if(rUUIData != null && !AppConstant.EMPTY_STRING.equalsIgnoreCase(rUUIData)){
				arrrUUIData = rUUIData.split(prefix);
				if(arrrUUIData.length>1){
					rUUIData = arrrUUIData[1];
					rUUIData = rUUIData.split(postfix)[0];
				    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Session UUI after spliting:"+rUUIData);
					
					StringBuilder output = new StringBuilder();
				    for (int i = 0; i < rUUIData.length(); i+=2) {
				        String str = rUUIData.substring(i, i+2);
				        output.append((char)Integer.parseInt(str, 16));
				    }
				    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Converted data :"+output);
				    convertedUUIData = output.toString();
				    
				    arrUUIDATA = convertedUUIData.split("\\|");
				    
				    if(arrUUIDATA.length>1){
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI ani :" + arrUUIDATA[0]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI DNIS :" + arrUUIDATA[1]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI AppName :" + arrUUIDATA[2]);
				    	
				    	ani = arrUUIDATA[0];
				    	dnis = arrUUIDATA[1];
				    	appName = arrUUIDATA[2];
				    	
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).setValue(ani);
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).setValue(dnis);
				    	mySession.getVariableField(IProjectVariables.APP_NAME).setValue(appName);
				    }
				}else{
					arrrUUIData = rUUIData.split(";");
					rUUIData = arrrUUIData[0];
				    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Session UUI after spliting:"+rUUIData);
					
					StringBuilder output = new StringBuilder();
				    for (int i = 0; i < rUUIData.length(); i+=2) {
				        String str = rUUIData.substring(i, i+2);
				        output.append((char)Integer.parseInt(str, 16));
				    }
				    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Converted data :"+output);
				    convertedUUIData = output.toString();
				    
				    arrUUIDATA = convertedUUIData.split("\\|");
				    
				    if(arrUUIDATA.length>1){
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI ani :" + arrUUIDATA[0]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI DNIS :" + arrUUIDATA[1]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI AppName :" + arrUUIDATA[2]);
				    	
				    	ani = arrUUIDATA[0];
				    	dnis = arrUUIDATA[1];
				    	appName = arrUUIDATA[2];
				    	
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).setValue(ani);
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).setValue(dnis);
				    	mySession.getVariableField(IProjectVariables.APP_NAME).setValue(appName);
				    }
				}
			}
		} catch(Exception e){
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"ERROR in UUI Data :"+e);
			mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_UUIERR).setValue(AppConstant.TRUE);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ERROR_DATA).setValue("Improper UUI-DATA");
			StackTrace.PrintException(e);
		}
	}
}
