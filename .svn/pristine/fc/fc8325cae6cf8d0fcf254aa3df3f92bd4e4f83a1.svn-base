package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.StackTrace;
import com.rcom.hostinterface.view.ReqStopVAS;
import com.rcom.hostinterface.view.ResStopVAS;
import com.rcom.hostinterface.wrapper.IVRWebService;
import com.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-DEC-02  12:02:24 PM
 */
public class Dat_deactivateVAS extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-DEC-02  12:02:24 PM
	 */
	public Dat_deactivateVAS() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-DEC-07  03:15:31 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-DEC-07  03:15:31 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-DEC-07  03:15:31 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Host Response::", "App_Variables:hostresult").setDebugId(4712));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "App_Variables:hostresult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:success", true).setDebugId(4713)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Vas Deactivation Host Response Code::", "App_Variables:deactResponseCode").setDebugId(4715));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "App_Variables:deactResponseCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:zero", true).setDebugId(4714)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Ann_Success", "Succsee").setDebugId(4716));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Ann_Failue", "failure").setDebugId(4718));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("LikDown", "Down").setDebugId(4563));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		String packSelected = Constants.BLANK,hostoutput = Constants.ERROR;
		ITraceInfo trace = mySession.getTraceOutput();
		ReqStopVAS reqStopVAS = null;
		ResStopVAS resStopVAS = null;
		IVRDataBean ivrDataBean = null;
		String deactResponseCode = Constants.BLANK;
		try
		{
		 
			IVRWebService ivrWebService =  new IVRWebServiceImpl();
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDataBean);
			reqStopVAS = new ReqStopVAS();
			reqStopVAS.setMdn(mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_ANI).getStringValue());
			reqStopVAS.setSubID(mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_PACK_SELECTED).getStringValue());
			resStopVAS = ivrWebService.stopVAS(ivrDataBean, reqStopVAS);
			
			if(resStopVAS.getResponseCode()!= null && !resStopVAS.getResponseCode().equalsIgnoreCase(Constants.BLANK)
				&&!resStopVAS.getResponseCode().equalsIgnoreCase(Constants.NA))
				{
					hostoutput =Constants.Success;
					deactResponseCode = resStopVAS.getResponseCode();
						
				}
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Host Response Code ::"+ deactResponseCode);
		}
		catch(Exception e)
		{
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Exception in hitting deactivation interface:"+ e.getMessage());
			
		}
		finally
		{
			mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_DEACT_RESPONSE_CODE).setValue(deactResponseCode);
			mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_HOSTRESULT).setValue(hostoutput);
		}
	}
	
	
}
