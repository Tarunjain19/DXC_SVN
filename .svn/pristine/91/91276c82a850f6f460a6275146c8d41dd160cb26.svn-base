package flow.subflow.Collect_SmartCardNumber;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.rcomdth02.model.ValidateSCNStatus;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-26  03:42:21 PM
 */
public class Validate_SmartCardNumber extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-26  03:42:21 PM
	 */
	public Validate_SmartCardNumber() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:00 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:00 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:46:00 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(615)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0008", false).setDebugId(616));
			actions.add(new com.avaya.sce.runtime.Next("Collect_SmartCardNumber-link_down", "linkdown").setDebugId(617));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:IsValidSCN", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(459)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:ValidSCNTriesCount", "CONSTANTS:ZERO", false).setDebugId(468));
				actions.add(new com.avaya.sce.runtime.Next("Collect_SmartCardNumber-fetch_Loyalityinfo", "valid").setDebugId(460));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("AppVariables:ValidSCNTriesCount").setDebugId(462));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "AppVariables:ValidSCNTriesCount", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "CONSTANTS:THREE", true).setDebugId(463)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Collect_SmartCardNumber-InvalidAnnc", "retry").setDebugId(464));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:ValidSCNTriesCount", "CONSTANTS:ZERO", false).setDebugId(466));
					actions.add(new com.avaya.sce.runtime.Next("Collect_SmartCardNumber-Tries_ExceedAnnc", "tries-exceed").setDebugId(467));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}

			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace =null;
		ValidateSCNStatus validateSCNStatus = null;

		try
		{
			trace = mySession.getTraceOutput();
			/** Formating the Request **/
			validateSCNStatus = new ValidateSCNStatus();
			validateSCNStatus.setScnNo(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_SCNUMBER).getStringValue());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate SCN Number Request :: "+validateSCNStatus.toString());
			
			/** Getting Response By Host Processing **/
			validateSCNStatus = IVRDBServiceInstance.getRcomdth02DataService().getSubscriberValidations((IVRDataBean) mySession.getProperty(AppConstants.IVRDATABEAN), validateSCNStatus);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate SCN Number Response :: "+validateSCNStatus.toString());
			
			if(validateSCNStatus !=null && validateSCNStatus.getStatus().equalsIgnoreCase(AppConstants.Success) && !validateSCNStatus.getErrorCode().equalsIgnoreCase(AppConstants.two))
			{
				if(validateSCNStatus.getErrorCode().equalsIgnoreCase(AppConstants.zero))
				{
					
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_VALID_SCN).setValue(AppConstants.Yes);
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ACCOUNT_STATUS).setValue(validateSCNStatus.getScnStatus());
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CAFNUMBER).setValue(validateSCNStatus.getAccountNo());
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_STB_TYPE).setValue(validateSCNStatus.getStbType());
					
				}
				else 
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_VALID_SCN).setValue(AppConstants.No);
			}
			/** InValid SCN Code **/
			else if(validateSCNStatus !=null && validateSCNStatus.getStatus().equalsIgnoreCase(AppConstants.Failure)&&validateSCNStatus.getErrorCode().equalsIgnoreCase(AppConstants.one))
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_VALID_SCN).setValue(AppConstants.No);
			else
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);

	}catch(Exception e)
	{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
	StackTrace.PrintException(e);
	}
	finally
	{trace=null;validateSCNStatus=null;}
	}
}
