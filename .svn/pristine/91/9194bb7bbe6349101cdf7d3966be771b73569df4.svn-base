package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.MDNHotFlashInfo;
import com.rcom.prepaid.resource.IVRDBServiceInstance;
import com.servion.util.AppConstant;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;
import com.servion.util.StackTrace;
import com.sun.corba.se.impl.orbutil.closure.Constant;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-12  10:49:00 PM
 */
public class SetHotFlashInfo extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-12  10:49:00 PM
	 */
	public SetHotFlashInfo() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:21 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Start_HotFlash", "Hot Flash");
		next.setDebugId(8762);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:21 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:21 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferCode", "TR_0055", true).setDebugId(8761));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isMdnHotFlash", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:Key_true", true).setDebugId(10090)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("HotFlashInfo:CallingNodeId", "constant:Start", false).setDebugId(10093));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("HotFlashInfo:annoID", "appVariables:mdnHotflashID", false).setDebugId(10098));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:HNIcaller", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:Key_true", true).setDebugId(10096)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("HotFlashInfo:CallingNodeId", "constant:Start", false).setDebugId(10097));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("HotFlashInfo:annoID", "HotFlashIDs:PA_0004_HNI", false).setDebugId(10094));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("HotFlashInfo:CallingNodeId", "constant:Start", false).setDebugId(8759));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("HotFlashInfo:annoID", "HotFlashIDs:PA_0004", false).setDebugId(8760));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
	IVRDataBean objIVRData = null;
	ITraceInfo trace =null;
	String mdn_category="",mdnHotflashCatagories ="",isMDNHotflah =AppConstant.FALSE;
	
	try{
		trace = mySession.getTraceOutput();
		objIVRData = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
		String callerANI = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
		
         String MDN_Hotflash_Circle = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp("MDN_HOTFLASH_CIRCLE");
         
         trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"MDN_Hotflash_Circle list :"+MDN_Hotflash_Circle.toString());
         
		 String Mdn_hotflash="False";
		 
		 if(MDN_Hotflash_Circle==null||MDN_Hotflash_Circle.equalsIgnoreCase("N"))
		 {
			 MDN_Hotflash_Circle="NA";
		 }
		
	    String circleID = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
		
		 if(MDN_Hotflash_Circle.contains(circleID))
			 {
			 
			  mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_CIRCLE__MDN__HOTFLASH).setValue("TRUE"); 
			  Mdn_hotflash="TRUE";
			  trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Mdn_hotflash flag :"+Mdn_hotflash.toString());
			 }
	 
	 if(Mdn_hotflash.equalsIgnoreCase("TRUE"))
	 {
		
		MDNHotFlashInfo mdnhost=new MDNHotFlashInfo();
		
		mdnhost.setMdn(callerANI);
		
		// *//**DB**//*
		mdnhost=IVRDBServiceInstance.getInstance().checkMDNHotFlashFlag(objIVRData, mdnhost);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"mdnhost Response :"+mdnhost.toString());
		
		
		
		mdn_category = mdnhost.getP_MDN_MSG_OUT();
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"mdn_status12:"+mdn_category+"*");
		
		if(mdn_category!=null && !mdn_category.equalsIgnoreCase(AppConstant.EMPTY_STRING) && !mdn_category.equalsIgnoreCase(AppConstant.NA))
		{
		
					 isMDNHotflah = AppConstant.TRUE;
					 mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_MDN_HOTFLASH_ID).setValue( AppConstant.PA_0004+AppConstant.SEPERATOR_UNDERSCORE+mdn_category);
					 trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"MDN hotflash "+isMDNHotflah);
	 }
	 }
	}
	catch(Exception e){
		trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"ERROR in set MDN Hot flash :"+e);
		mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_MDN_HOT_FLASH).setValue("FALSE");
		StackTrace.PrintException(e);
	}
	finally
	{
		mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_MDN_HOT_FLASH).setValue(isMDNHotflah);
	}
}
}
