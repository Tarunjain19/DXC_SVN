package flow.subflow.PushSMS;

import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.postpaid.model.PushSMSInfo;
import com.servion.postpaid.utils.AppDataMap;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.PrintStackTrace;
import com.servion.postpaid.utils.SetPushSMS;
import com.servion.rcom.hostinterface.view.ReqPushSMS;
import com.servion.rcom.hostinterface.view.ResPushSMS;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-15  07:36:23 PM
 */
public class PostSMS extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		
		Hashtable<String, String> smsHashTable = null;
		SetPushSMS setPushSMS = null;
		String strKeyword = "";
		PushSMSInfo pushSMSInfo = null;
		String strApplicationName = "",strCircle = "", strMsgText = "", strSMSTemplate = "";
		String freeUnitSuccess ="";
		Hashtable<String, PushSMSInfo> pushSMSHashTable = null;
		IVRDataBean ivrDataBean = null;
		Hashtable<String, Hashtable<String, String>> smsHashTableDataIndexMap = null;
		int size = 0;
		ReqPushSMS reqPushSMS = null;
		ResPushSMS resPushSMS = null;
		IVRWebService ivrWebService = null;
		
		try{
			
			pushSMSInfo = new PushSMSInfo();
			setPushSMS = new SetPushSMS();
			smsHashTable = (Hashtable<String, String>) mySession.getProperty(Constants.SMSDataMap);
			strCircle = mySession.getVariableField(IProjectVariables.ROUTING_INFO, IProjectVariables.ROUTING_INFO_FIELD_CIRCLE).getStringValue();
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Data map:"+smsHashTable);
			
			strApplicationName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
			freeUnitSuccess = mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_FRUSUCCESS).getStringValue();
			
			pushSMSHashTable = (Hashtable<String, PushSMSInfo>) AppDataMap.getInstance(strApplicationName).getAppData(Constants.PUSH_SMS+strApplicationName);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Push SMS Table:"+pushSMSHashTable);
			
			if(pushSMSHashTable != null){
				
				if(smsHashTable == null ||freeUnitSuccess.equalsIgnoreCase(Constants.Yes) ){
					smsHashTableDataIndexMap = (Hashtable<String, Hashtable<String, String>>) mySession.getProperty(Constants.SMSDataIndexMap);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Hash Table:"+smsHashTableDataIndexMap);
					if(smsHashTableDataIndexMap != null){
						size = smsHashTableDataIndexMap.size();
						for (int i = 0; i < smsHashTableDataIndexMap.size(); i++) {
							
							smsHashTable = smsHashTableDataIndexMap.get(""+i);
							info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, i+" - PushSMSDataMap:"+smsHashTable);
							strKeyword = smsHashTable.get(Constants.SMSKeyword);
							info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Keyword:"+strCircle+Constants.UNDERSCORE+strKeyword);
							pushSMSInfo = pushSMSHashTable.get(strCircle+Constants.UNDERSCORE+strKeyword);
							strSMSTemplate = pushSMSInfo.getSmsText();
							
							reqPushSMS = new ReqPushSMS();
							ivrWebService = new IVRWebServiceImpl();
							
							if((strSMSTemplate != null)&&(i<=size)){
								
								strMsgText = setPushSMS.getSMSText(strSMSTemplate, smsHashTable);
								reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue());
								reqPushSMS.setMessageText(strMsgText);
								resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
								info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, i+" - PushSMSText:"+strMsgText);
							}
							
						}
						
						
						
						
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
					}
					else{
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "No SMS Map available");
					}
				}else{
					
					strKeyword = smsHashTable.get(Constants.SMSKeyword);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Keyword:"+strCircle+Constants.UNDERSCORE+strKeyword);
					pushSMSInfo = pushSMSHashTable.get(strCircle+Constants.UNDERSCORE+strKeyword);
					strSMSTemplate = pushSMSInfo.getSmsText();
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Template:"+strSMSTemplate);
					
					if(pushSMSInfo.getSmsText() != null){
						
						strMsgText = setPushSMS.getSMSText(strSMSTemplate, smsHashTable);
						reqPushSMS = new ReqPushSMS();
						ivrWebService = new IVRWebServiceImpl();
						
						reqPushSMS.setMDN(mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue());
						reqPushSMS.setMessageText(strMsgText);
						
						resPushSMS = ivrWebService.executePushSMS(ivrDataBean, reqPushSMS);
						
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
					}else{
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this service");
					}
				}
				
			}else{
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this application");
			}
			
		}catch (Exception e) {
			PrintStackTrace.PrintException(e);
			info.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in sending SMS");
		}
		finally{
			mySession.setProperty(Constants.SMSDataMap, null);
			mySession.setProperty(Constants.SMSDataIndexMap, null);
		}
		
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-15  07:36:23 PM
	 */
	public PostSMS() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:43 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("PushSMS-PushSMSreturn", "Default");
		next.setDebugId(7);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:43 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  11:20:43 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}

