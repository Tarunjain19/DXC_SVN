package flow;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.rcom.hni.hostinterface.view.ReqServiceRequestDetails;
import com.servion.rcom.hni.hostinterface.view.ResServiceRequestDetails;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.triplefive.utils.Constants;
import com.servion.triplefive.utils.DynamicMenu;
import com.servion.triplefive.utils.PrintStackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-24  04:21:47 PM
 */
public class AccessHost_SR extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		
		IVRDataBean ivrDataBean = null;
		ReqServiceRequestDetails reqServiceRequestDetails = null;
		ResServiceRequestDetails resServiceRequestDetails = null;
		IVRWebService ivrWebService = null;
		String strMDN = "", strSLADate = "", strSLAID = "", strInitialAudios = "", strApplicationName = "", strCallDate = "";
		Date callDate = null, dateSLADate = null;
		DateFormat dateFormat = null;
		DynamicMenu dynamicMenu = null;
		ArrayList<String> dynamicList = null;
		AppProperties audioConfigInstance = null;
		
		try {
			dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			callDate = new Date();
			strCallDate = dateFormat.format(callDate);
			callDate = dateFormat.parse(strCallDate);
			strApplicationName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
			
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			strMDN = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue();
			reqServiceRequestDetails = new ReqServiceRequestDetails();
			reqServiceRequestDetails.setMDN(strMDN);
			
			ivrWebService = new IVRWebServiceImpl();
			resServiceRequestDetails = ivrWebService.executeServiceRequestDetails(ivrDataBean, reqServiceRequestDetails);
			
			if((resServiceRequestDetails.getResponseCode()).equals(Constants.zero)){
				strSLADate = resServiceRequestDetails.getServiceRequestSLADate();
				strSLAID = resServiceRequestDetails.getServiceRequestID();
				if(strSLADate != null){
					dateSLADate = dateFormat.parse(strSLADate);
					
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> SLADate:"+strSLADate);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SLA Date comparision"+dateSLADate.compareTo(callDate));
					if(dateSLADate.compareTo(callDate)<0){
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_SLADATE_VALID).setValue(Constants.Yes);
					}else{
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_SLADATE_VALID).setValue(Constants.No);
						
						dynamicMenu = new DynamicMenu();
						dynamicList = new ArrayList<String>();
						audioConfigInstance = (AppProperties) mySession.getProperty(Constants.AudioPropertyInstance);
						
						dateFormat = new SimpleDateFormat("yyyy-MM-dd");
						strSLADate = dateFormat.format(dateSLADate);
						
						dynamicList.add(strSLAID);
						dynamicList.add(strSLADate);
						strInitialAudios = audioConfigInstance.getIVRProp(strApplicationName+Constants.HYPEN+Constants.PA_0005);
						strInitialAudios = dynamicMenu.playPrompt(dynamicList, strInitialAudios, ""+dynamicList.size(), info);
						
						mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_INITIAL_AUDIOS).setValue(strInitialAudios);
					}
				}else{
					mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_SLADATE_VALID).setValue(Constants.NoRecord);
				}
			}else{
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_SLADATE_VALID).setValue(Constants.NoRecord);
			}
			
		} catch (Exception e) {
			PrintStackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
		}finally{
			reqServiceRequestDetails = null;
			resServiceRequestDetails = null;
		}
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-24  04:21:47 PM
	 */
	public AccessHost_SR() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:41 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:41 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:41 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(1423)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:isLinkDown", "Constants:no", false).setDebugId(3067));
			actions.add(new com.avaya.sce.runtime.Next("AccessDB_CRMCount", "LinkDown").setDebugId(1424));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:isSLADateValid", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(1426)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("CallData:transferReasonCode", "Constants:TR_0004", false).setDebugId(1929));
				actions.add(new com.avaya.sce.runtime.Next("SetTransferData", "Transfer").setDebugId(1422));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "Flag:isSLADateValid", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "NoRecord", false).setDebugId(1564)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("AccessDB_CRMCount", "NoRecord").setDebugId(1565));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("PlayworkInProgress_PA_0005", "WorkInProgress").setDebugId(1428));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
