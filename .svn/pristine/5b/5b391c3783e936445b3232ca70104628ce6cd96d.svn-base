package flow;

import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.ppp.model.TransferVDNInfo;
import com.rcom.ppp.resource.IVRDBServiceInstance;
import com.rcom.util.AppConstants;
import com.rcom.util.StackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.prepaid.report.IVRREPORTDATA.MENUDETAILS.MENU;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-17  06:56:37 PM
 */
public class TransferAgent extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-17  06:56:37 PM
	 */
	public TransferAgent() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JAN-24  02:14:45 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("CheckBarringList", "Default");
		next.setDebugId(2986);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JAN-24  02:14:45 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JAN-24  02:14:45 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(4);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "UUI Data :: ", "appVariables:uuiData").setDebugId(5290));
		actions.add(new com.avaya.sce.runtime.varoperations.PrepareAAI("Shared", "", "appVariables:uuiData", "appVariables:uuiData").setDebugId(5289));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Prepared UUI :: ", "appVariables:uuiData").setDebugId(5291));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		/**Declaring the variables**/
		TransferVDNInfo transferVDNInfo = null;
		IVRDataBean ivrDataBean = null;
		ITraceInfo info = null;
		String last5Menu =AppConstants.EMPTY_STRING;
		ITraceInfo trace = null;
		String strUUI = AppConstants.EMPTY_STRING;
		String menuID = AppConstants.EMPTY_STRING;
		String ani = AppConstants.EMPTY_STRING,currentLanguage = AppConstants.EMPTY_STRING;
		String dnis = AppConstants.EMPTY_STRING,transferCode = AppConstants.EMPTY_STRING;
		AppProperties ivrProperties = null;
		String defaultVDN=AppConstants.EMPTY_STRING,key= AppConstants.EMPTY_STRING,transferVDN = AppConstants.EMPTY_STRING;
		
		try{
			
			/**Assigning the trace object**/
			info = mySession.getTraceOutput();
			
			/** getting the IVRData bean from session**/
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstants.IVRDATABEAN);

			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			IVRREPORTDATA ivrreportdata = getReportObject.getIvrreportdata();
			CALLINFO callInfo = ivrreportdata.getCALLINFO();
			trace = mySession.getTraceOutput();
			ivrProperties = AppProperties.GetInstance(AppConstants.IVR_CONFIG);
			ani = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			dnis = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_DNIS).getStringValue();
			currentLanguage = mySession.getCurrentLanguage();
			 transferCode = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_CODE).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dnis :"+dnis);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Ani :" +ani);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "currentLanguage :" +currentLanguage);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Menu:"+ivrreportdata.getMENUDETAILS().getMENU());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer Code :" +transferCode);
			
			List<MENU> menuList = ivrreportdata.getMENUDETAILS().getMENU();
			
			if(menuList  !=null){
				
				for (int i = menuList.size(); (i> (menuList.size()-5)) && (i!=0); i-- ){
					menuID = menuList.get((i-1)).getMENUID();
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "menu ID :"+menuID);
					last5Menu = last5Menu + menuID+"|";
				}
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Last 5 menu accessed :"+last5Menu);
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "No Menu accessed");
			}
			
			
			strUUI = ani+AppConstants.PIPE+dnis+AppConstants.PIPE+currentLanguage+AppConstants.PIPE+last5Menu +AppConstants.PIPE+transferCode;
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_UUI_DATA).setValue(strUUI);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "UUI data:"+strUUI);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_UUI_DATA).setValue(strUUI);
			
			transferVDNInfo = new TransferVDNInfo();
			transferVDNInfo.setAppName(mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue());
			transferVDNInfo.setCircle(mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue());
			transferVDNInfo.setCallType("4");
			transferVDNInfo.setCustomerSegment("3");
			transferVDNInfo.setLanguage(currentLanguage);
			transferVDNInfo.setTransferReasonCode(transferCode);
			
			transferVDNInfo = IVRDBServiceInstance.getInstance().getTransferVDN(ivrDataBean, transferVDNInfo);
			callInfo.setHOWCALLENDED(AppConstants.TRANSFER);
			
			transferVDN = transferVDNInfo.getTransferVDN1(); 
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Transfer VDN from DB : "+transferVDN);
			
			if(transferVDN != null && !AppConstants.EMPTY_STRING.equals(transferVDN)){
				callInfo.setAGENTEXTN(transferVDN);
				callInfo.setAGENTID(transferVDN);
				callInfo.setTRANSFERVDN(transferVDN);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(transferVDN);
			}
			
			if(transferVDNInfo.getSkillName()!=null)
				callInfo.setSKILLNAME(transferVDNInfo.getSkillName());
			
			callInfo.setUUIDATA(strUUI);
			callInfo.setTRANSCODE(transferCode);
			callInfo.setDISPOSITION(AppConstants.XA);
			callInfo.setCALLENDREASON(AppConstants.TRANSFER);
			
			ivrreportdata.setCALLINFO(callInfo);
		
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer VDN from DB"+transferVDNInfo.toString());
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer VDN  :: "+mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).getStringValue());
			
		}catch(Exception e){
			StackTrace.PrintException(e);
		}finally{
			if(transferVDN == null || AppConstants.EMPTY_STRING.equals(transferVDN)){
				key = AppConstants.DEFAULT_TRANSFER_VDN_+currentLanguage;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Default Transfer VDN :"+key);
				defaultVDN = AppProperties.GetInstance(AppConstants.IVR_CONFIG).getIVRProp(key);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Default Transfer VDN :"+defaultVDN);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(defaultVDN);
			}
		}
	
	}
}