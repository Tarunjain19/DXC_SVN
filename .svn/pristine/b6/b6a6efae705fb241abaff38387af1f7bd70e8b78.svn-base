package flow.subflow.RGC_Flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.hpe.util.AppConstant;
import com.hpe.util.StackTrace;
import com.rcom.ppp.model.TransferVDNInfo;
import com.rcom.ppp.resource.IVRDBServiceInstance;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-JUN-07  11:16:48 AM
 */
public class DAT_Get_VDN extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-JUN-07  11:16:48 AM
	 */
	public DAT_Get_VDN() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	public void requestBegin(SCESession mySession)
	{

		super.requestBegin(mySession);
		/**Declaring the variables**/
		TransferVDNInfo transferVDNInfo = null;
		IVRDataBean ivrDataBean = null;
		ITraceInfo info = null;
		String last5Menu =AppConstant.EMPTY_STRING;
		ITraceInfo trace = null;
		String strUUI = AppConstant.EMPTY_STRING;
		String menuID = AppConstant.EMPTY_STRING;
		String ani = AppConstant.EMPTY_STRING,currentLanguage = AppConstant.EMPTY_STRING;
		String dnis = AppConstant.EMPTY_STRING,transferCode = AppConstant.EMPTY_STRING;
		AppProperties ivrProperties = null;
		String defaultVDN=AppConstant.EMPTY_STRING,key= AppConstant.EMPTY_STRING,transferVDN = AppConstant.EMPTY_STRING;
		String circle = AppConstant.EMPTY_STRING;
		
		CALLINFO callInfo = null;
		IVRREPORTDATA ivrreportdata = null;
		
		try{
			transferCode = "TR_0104";
			
			/**Assigning the trace object**/
			info = mySession.getTraceOutput();
			
			/** getting the IVRData bean from session**/
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);

			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			ivrreportdata = getReportObject.getIvrreportdata();
			callInfo = ivrreportdata.getCALLINFO();
			trace = mySession.getTraceOutput();
			ivrProperties = AppProperties.GetInstance(AppConstant.IVR_CONFIG);
			ani = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			dnis = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
			currentLanguage = "ENG";
			circle = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dnis :"+dnis);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Ani :" +ani);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "currentLanguage :" +currentLanguage);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer Code :" +transferCode);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"circle :"+circle);
			
			
			
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_REASON).setValue(transferCode);
			
			transferVDNInfo = new TransferVDNInfo();
			transferVDNInfo.setAppName(mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue());
			transferVDNInfo.setCircle(circle);
			transferVDNInfo.setCallType("4");
			transferVDNInfo.setCustomerSegment("3");
			transferVDNInfo.setLanguage(currentLanguage);
			transferVDNInfo.setTransferReasonCode(transferCode);
			
			transferVDNInfo = IVRDBServiceInstance.getInstance().getTransferVDN(ivrDataBean, transferVDNInfo);
			callInfo.setHOWCALLENDED(AppConstant.TRANSFER);
			
			transferVDN = transferVDNInfo.getTransferVDN1(); 
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Transfer VDN from DB : "+transferVDN);
			
			if(transferVDN != null && !AppConstant.EMPTY_STRING.equals(transferVDN)){
				callInfo.setAGENTEXTN(transferVDN);
				callInfo.setAGENTID(transferVDN);
				callInfo.setTRANSFERVDN(transferVDN);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(transferVDN);
			}
			
			if(transferVDNInfo.getSkillName()!=null)
				callInfo.setSKILLNAME(transferVDNInfo.getSkillName());
			
			callInfo.setUUIDATA(strUUI);
			callInfo.setTRANSCODE(transferCode);
			callInfo.setDISPOSITION(AppConstant.XA);
			callInfo.setCALLENDREASON(AppConstant.TRANSFER);
			
			ivrreportdata.setCALLINFO(callInfo);
		
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer VDN from DB"+transferVDNInfo.toString());
			
		}catch(Exception e){
			StackTrace.PrintException(e);
		}finally{
			if(transferVDN == null || AppConstant.EMPTY_STRING.equals(transferVDN)){
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Finalkly block is executed - ");
				key = AppConstant.DEFAULT_TRANSFER_VDN_+circle+AppConstant.SEPERATOR_UNDERSCORE+currentLanguage;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Default Transfer VDN :"+key);
				defaultVDN = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(key);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Default Transfer VDN :"+defaultVDN);
				
				if(defaultVDN != null && !AppConstant.EMPTY_STRING.equals(defaultVDN)){
					ivrreportdata.getCALLINFO();
					callInfo.setAGENTEXTN(defaultVDN);
					callInfo.setAGENTID(defaultVDN);
					callInfo.setTRANSFERVDN(defaultVDN);
					
					ivrreportdata.setCALLINFO(callInfo);
					
					mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_TRANSFER_VDN).setValue(defaultVDN);
				}
			}
		}
	
	
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-JUN-25  02:40:38 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JUN-25  02:40:38 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JUN-25  02:40:38 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Agent Transfer Reason - ", "appVariables:transferReason").setDebugId(1032));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Agent Transfer Reason - ", "appVariables:TransferVDN").setDebugId(1033));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag_Application_Error", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:TRUE", true).setDebugId(1034)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.ReportAlarmInfo(com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_CRITICAL, "RCOM_RGC_CF_IVR - DB Error while fetching Transfer VDN details", "session:sessionid", true).setDebugId(1035));
			actions.add(new com.avaya.sce.runtime.Next("RGC_Flow-TechDiffMsg", "Tech_Diff_Msg").setDebugId(1036));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("RGC_Flow-AgentTransfer", "Transfer").setDebugId(1038));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
