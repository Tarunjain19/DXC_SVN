package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.AppConstant;
import com.rcom.prepaid.model.IVRCspInfo;
import com.rcom.prepaid.resource.IVRDBServiceInstance;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-APR-25  04:39:44 PM
 */
public class IVR_CSP extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-APR-25  04:39:44 PM
	 */
	public IVR_CSP() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-APR-28  01:19:14 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Check_Time", "Default");
		next.setDebugId(6759);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-APR-28  01:19:14 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-APR-28  01:19:14 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		/** Declaration **/
		String  callerANI = "",preferedLang = "",propetyKey= "";
		String  barringCode = "",key = "",appName= "",propertiesLocation = "";
		String  callerType = "",dataType = "",service_Type = "";
		String hostOutput = "";
		IVRDataBean objIVRData = null;
		IVRCspInfo objIVRCspInfo = null;
		ITraceInfo trace =null;
		GetReportObject objGetReportObject = null;
		IVRREPORTDATA objIVRREPORTDATA= null;
		CALLINFO objCALLINFO = null;
		
		
		/**Assign**/
		trace = mySession.getTraceOutput();
		callerANI =mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_ALT_MDN).getStringValue();
		
		
		objIVRData = (IVRDataBean) mySession.getProperty("IVRDataBean");
		appName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
		objIVRCspInfo = new IVRCspInfo();
		objIVRCspInfo.setMdn(callerANI);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"caller ANI :"+callerANI);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"IVRData Bean Object :"+objIVRData);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"appName :"+appName);
		
		try{
		
		objGetReportObject = objIVRData.getGetReportObject(); 
		objIVRREPORTDATA = objGetReportObject.getIvrreportdata();
		objCALLINFO = objIVRREPORTDATA.getCALLINFO();
			
		/**DB**/
		objIVRCspInfo=IVRDBServiceInstance.getInstance().getIVRCSPInfo(objIVRData, objIVRCspInfo);
		
		
		
		
	
		/***Postpaid caller Flag***/
		
		preferedLang=objIVRCspInfo.getPreLang();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"prefered Lang :"+preferedLang);
		
		if(preferedLang!=null && !AppConstant.EMPTY_STRING.equals(preferedLang) && !AppConstant.NA.equalsIgnoreCase(preferedLang)){
			
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_DEFAULT_LANGUAGE).setValue(preferedLang);
			 String PropertyLocation=mySession.getVariableField(IProjectVariables.DMPROPERTY, ""+preferedLang+"_ConfigFilePath").getStringValue();
			 trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "PropertyLocation after lang select is :"+PropertyLocation);
			 mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_CONFIG_FILE_PATH).setValue(PropertyLocation);
			 mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_DB__LANG).setValue(preferedLang);
		}
		
		service_Type =  objIVRCspInfo.getServiceType();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"service_Type :"+service_Type);
		if(service_Type!=null && service_Type.contains("POST")){
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Post Paid Caller");
			mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_SERVICE__TYPE).setValue("POSTPAID");
			
		}
		else if(service_Type!=null && service_Type.contains("PRE"))
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"PRE Paid Caller");
			mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_SERVICE__TYPE).setValue("POSTPAID");
				
		}
		else
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Not Able to identify");
			mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_SERVICE__TYPE).setValue("NA");
		}
		
		// Check Caller_TYPE
		
		if(service_Type!=null && service_Type.contains("GSM"))
		{
			mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_CALLER_TYPE).setValue("GSM");
		}
		else if(service_Type!=null && service_Type.contains("CDMA"))
		{
			mySession.getVariableField(IProjectVariables.CALL_DATA,IProjectVariables.CALL_DATA_FIELD_CALLER_TYPE).setValue("CDMA");
		}
		
		hostOutput = "Success";
		
		
		}catch (Exception e) {
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in IVR CSP DB Hit :" +e);
		}
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Status :" +hostOutput);
		//mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostOutput);
	}
}
