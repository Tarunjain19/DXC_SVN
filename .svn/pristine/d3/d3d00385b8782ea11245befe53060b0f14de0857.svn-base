package flow.subflow.RechargeAcUsingCashCard;


import java.text.SimpleDateFormat;


import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.Constants;
import com.rcom.rdtv.SayItSmartTime;
import com.rcom.rdtv.StackTrace;
import com.rcom.rdtv.dthvoms.UpdateVoucherStock;
import com.rcom.rdtv.rcomdth02.model.VoucherRecharge;
import com.servion.rdtv.hostinterface.TransAccountDetails;
import com.servion.rdtv.hostservice.ReqAccountDetails;
import com.servion.rdtv.hostservice.ResAccountDetails;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-01  03:25:02 PM
 */
public class AccessHost extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-01  03:25:02 PM
	 */
	public AccessHost() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:11 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:11 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:11 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:isException", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(1149)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferPoint", "TransferPoints:RD02_TR_0019", false).setDebugId(1151));
			actions.add(new com.avaya.sce.runtime.Next("RechargeAcUsingCashCard-LinkDown", "Linkdown").setDebugId(1152));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "appVariables:isException", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(1153)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferPoint", "TransferPoints:RD02_TR_0020", false).setDebugId(1155));
				actions.add(new com.avaya.sce.runtime.Next("RechargeAcUsingCashCard-LinkDown", "LinkDown").setDebugId(1156));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("RechargeAcUsingCashCard-Set_PA_0030", "Success").setDebugId(742));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		String sessionId = null;
		String scn = null, strVoucherPIN = "", strOffset = "", strDenomination = "", strAni = "";
		java.util.Date date = null;
		SimpleDateFormat dateFormat = null;
		
		UpdateVoucherStock updateVocherStock = null;
		
		ReqAccountDetails reqAccountDetails = null;
		ResAccountDetails resAccountDetails = null;
		VoucherRecharge voucherRecharge = null;
		
		TransAccountDetails transAccountDetails = null;
		
		IVRDataBean objIVRData = null;
		try
		{
			date = new java.util.Date();
			dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			objIVRData = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);			
			sessionId = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_SESSIONID).getStringValue();
			strAni = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			scn = mySession.getVariableField(IProjectVariables.SCN__NUMBER, IProjectVariables.SCN__NUMBER_FIELD_NUMBER).getStringValue();
			strDenomination = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_DENOMINATION).getStringValue();
			strOffset = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_OFFSET).getStringValue();
			strVoucherPIN = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_VOUCHER_PIN).getStringValue();
			
			voucherRecharge = new VoucherRecharge();
			voucherRecharge.setCliNo(strAni);
			voucherRecharge.setDenomination(strDenomination);
			//voucherRecharge.setInstallationType("Voucher");
			//voucherRecharge.setOffset(strOffset);
			SimpleDateFormat sd  = new SimpleDateFormat("yyyy-MM-dd");
			java.util.Date utildate = new java.util.Date();
			
			voucherRecharge.setRequestDate(java.sql.Date.valueOf(sd.format(utildate)));
			voucherRecharge.setScnNo(scn);
			//voucherRecharge.setVoucherCos("DTH");
			voucherRecharge.setVoucherNo(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_VOUCHER_NO).getStringValue());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Account Details Host request :: "+ voucherRecharge.toString());
			
			//Host Interaction
			voucherRecharge = IVRDBServiceInstance.getRcomdth02DataService().getVoucherRecharge(objIVRData, voucherRecharge);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Account Details Host response :: "+ voucherRecharge.toString());
			
			if(voucherRecharge.getStatus().contains("success")||voucherRecharge.getStatus().contains("Success")){
				
				//objIVRData = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
				//strVoucherPIN = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_VOUCHER_PIN).getStringValue();
				
				try{
					updateVocherStock = new UpdateVoucherStock();
					updateVocherStock.setVoucherPIN(strVoucherPIN);
					updateVocherStock.setStatusCode(2);
					updateVocherStock.setRechargedMDN(mySession.getVariableField(IProjectVariables.GET_SMART_CARD_NUMBER__MN, IProjectVariables.GET_SMART_CARD_NUMBER__MN_FIELD_VALUE).getStringValue());
					updateVocherStock.setMin("NULL");
					updateVocherStock.setRechargeMedia("IVF");
					
					/*SimpleDateFormat sd1 = new SimpleDateFormat("yyyy-MM-dd");
					java.util.Date dt1 = new java.util.Date();
					
					Date date1 = Date.valueOf(sd1.format(dt1));
					updateVocherStock.setRechargedDate(date1);*/
					//Changes in Date.
					SimpleDateFormat simpDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
					java.util.Date rechargeDate = new java.util.Date();
					String strDate = simpDate.format(rechargeDate);
					updateVocherStock.setRechargedDate(strDate);
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Update PIN Status :"+updateVocherStock.toString());
					updateVocherStock = IVRDBServiceInstance.getDthvomsDataService().queryVoucherStock(objIVRData, updateVocherStock);	
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Update PIN Status :"+updateVocherStock.toString());
					
				}catch (Exception e) {
					StackTrace.PrintException(e);
					trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Recharge Successful but couldnt Update PIN Status");
				}
				
				
				
				reqAccountDetails = new ReqAccountDetails();
				reqAccountDetails.setAccountId(scn);
				reqAccountDetails.setStartDate(SayItSmartTime.accountDetailsDateFormat());
				reqAccountDetails.setSource("DTH_IVR");
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Account Details Host request :: "+ reqAccountDetails.toString());
				
				transAccountDetails = new TransAccountDetails();
				resAccountDetails = transAccountDetails.getHostInterface(objIVRData, reqAccountDetails);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Account Details Host response :: "+resAccountDetails.toString());
				
				
				if(resAccountDetails.getResponseCode().equalsIgnoreCase(Constants.Zero)){
				mySession.getVariableField(IProjectVariables.CURRENT_BALANCE,IProjectVariables.CURRENT_BALANCE_FIELD_AMOUNT).setValue(resAccountDetails.getAccBalance());	
				
			}else{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
			}
			
			
			}
			else{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
			}
		}
		catch(Exception e)
		{
			StackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
		}
		finally
		{
			reqAccountDetails = null;
			reqAccountDetails = null;
			transAccountDetails = null;
		}
		
		
	}
	}

