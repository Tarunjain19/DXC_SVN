package flow.subflow.ProductsAndOffers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.hni.model.CircleOffersInfo;
import com.rcom.hni.model.MDNOfferInfo;
import com.rcom.hni.resource.IVRDBServiceInstance;
import com.servion.rcom.hni.hostinterface.view.OfferDetails;
import com.servion.rcom.hni.hostinterface.view.PlanDetails;
import com.servion.rcom.hni.hostinterface.view.ReqVoiceOffers;
import com.servion.rcom.hni.hostinterface.view.ResVoiceOffers;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hni.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.triplefive.utils.AppDataMap;
import com.servion.triplefive.utils.Constants;
import com.servion.triplefive.utils.PrintStackTrace;
import com.servion.triplefive.utils.SetPushSMS;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-08  01:03:41 PM
 */
public class AccessHost_MDNVoiceOffer extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo info = mySession.getTraceOutput();
		String mdn = "",VoiceInfoKey = "";
		String appName = "";
		String language = "",offerKey= "",circleID = "";
		String strVoiceOfferPhrase = "",strVoiceOfferDetailPhrase= "",strOfferCode = "";
		int count = 0;
		ReqVoiceOffers reqVoiceOffers = null;
		ResVoiceOffers resVoiceOffers = null;
		IVRWebService webServiceManager = null;
		IVRDataBean objIVRData = null;
		
		ArrayList<OfferDetails> resPackDetails = null;
		ArrayList<String> offerCodes = null,offerPhrase = null;
		HashMap<String,String>	offerDetailPhrase = null;
		OfferDetails objPackDetails =null; 
		Hashtable<String, List<CircleOffersInfo>> mapCircleOffersInfo = null;
		HashMap<String, String> offerPhraseMap =null;
		List<CircleOffersInfo> listCircleOffersInfo = null;
		CircleOffersInfo objCircleOffersInfo = null;
		
		AppProperties appProperties = null;
		PlanDetails planDetails = null;
		SetPushSMS setPushSMS = null;
		String strSMSFrame = "";
		ArrayList<String> arrSMSData = null;
		Hashtable<String, String> smsHashTable = null;
		
		MDNOfferInfo objMDNOfferInfo =null;
		Hashtable<String, Hashtable<String, List<MDNOfferInfo>>> mapMDNOfferInfo = null;
		try
		{
			
			setPushSMS = new SetPushSMS();
			arrSMSData = new ArrayList<String>();
			appProperties = (AppProperties) mySession.getProperty(Constants.IvrPropertyInstance);
			
			objIVRData = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			
			/****Offer for You****/
			/**Request Processing......**/
			mdn = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue();
			appName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
			circleID = mySession.getVariableField(IProjectVariables.ROUTING_INFO,IProjectVariables.ROUTING_INFO_FIELD_CIRCLE).getStringValue();
			language = mySession.getCurrentLanguage();
			
			offerCodes = new ArrayList<>();
			offerPhrase = new ArrayList<>();
			offerDetailPhrase = new HashMap<String,String>();
			offerPhraseMap= new HashMap<String,String>();
			
			try {
				
				reqVoiceOffers = new ReqVoiceOffers();
				reqVoiceOffers.setMDN(mdn);
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer Host Request :: "+reqVoiceOffers.toString());
				
				/**Response Processing......**/
				webServiceManager = new IVRWebServiceImpl();
				resVoiceOffers = webServiceManager.executeVoiceOffers(objIVRData,reqVoiceOffers);
				
				/*delete*/
			/*	resVoiceOffers = new ResVoiceOffers();
				resPackDetails = new ArrayList<OfferDetails>();
				OfferDetails offerDetails = new OfferDetails();
				offerDetails.setOfferCode("121");
				resPackDetails.add(offerDetails);
				resVoiceOffers.setOfferDetailsList(resPackDetails);*/
				/*delete and change the if condition below*/
				
				if(resVoiceOffers!=null && Constants.zero.equalsIgnoreCase(resVoiceOffers.getResponseCode())){
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN Host Response :: "+resVoiceOffers.toString());
					resPackDetails = resVoiceOffers.getOfferDetailsList();
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN Package Details :: "+resPackDetails);
					
					if(resPackDetails!=null ){
						for(int i= 0;i<resPackDetails.size();i++){
							objPackDetails = resPackDetails.get(i);
							
							info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN OfferCode ::"+i+":"+resPackDetails);
							String campaignName = objPackDetails.getCampaignName(); 
							if(campaignName != null){
								objMDNOfferInfo = new MDNOfferInfo();
								objMDNOfferInfo.setAppName(appName);
								objMDNOfferInfo.setCampaignname(campaignName);
								objMDNOfferInfo.setCircleId(circleID);
								objMDNOfferInfo.setLanguage(language);
								objMDNOfferInfo.setOfferType(Constants.VOICE_OFFER);
							}
							
							objMDNOfferInfo = IVRDBServiceInstance.getInstance().getMDNSpecificOffers(objIVRData,objMDNOfferInfo);
							if(objMDNOfferInfo!= null){
								if(objMDNOfferInfo.getOfferCode()!=null){
									strVoiceOfferPhrase = objMDNOfferInfo.getOfferCategoryPhrase();
									strVoiceOfferDetailPhrase = objMDNOfferInfo.getOfferDetailPhrase();
									String offerID =  objMDNOfferInfo.getOfferCode();
									strOfferCode = strOfferCode+offerID+Constants.COMMA;
									offerPhrase.add(strVoiceOfferPhrase);
									offerDetailPhrase.put(offerID,strVoiceOfferPhrase);
									offerPhraseMap.put(offerID,strVoiceOfferDetailPhrase);
									offerCodes.add(offerID);
								}
								
							}
							count++;
							if(i==1){
								break;
							}
							
						}
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Offer MDN Offer Code List:: "+offerCodes);  
					}
					
				}else{
					mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_TRANSFER_REASON_CODE).setValue("TR_0070");
				}
			} catch (Exception e) {
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "--->Exception in accessing voice offer host:"+e.getMessage());
				PrintStackTrace.PrintException(e);
			}
			
			
			/***DB Hit to get the Voice Offer details **/
			VoiceInfoKey = Constants.VOICEOFFER_KEY+appName;
			mapCircleOffersInfo = (Hashtable<String, List<CircleOffersInfo>>) AppDataMap.getInstance(appName).getAppData(VoiceInfoKey);
		
			
			offerKey = circleID+Constants.UNDERSCORE+language+Constants.UNDERSCORE+Constants.Option1;
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Activate Voice Offer Key :: "+offerKey);
			listCircleOffersInfo = mapCircleOffersInfo.get(offerKey);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "listCircleOffersInfo Object :: "+listCircleOffersInfo);
			
			if(listCircleOffersInfo!= null){
				objCircleOffersInfo = listCircleOffersInfo.get(0);
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circle Offers Info Object :: "+objCircleOffersInfo);
				
				if(objCircleOffersInfo!= null){
					strVoiceOfferPhrase= objCircleOffersInfo.getOfferCategoryPhrase();
					strVoiceOfferDetailPhrase = objCircleOffersInfo.getOfferDetailPhrase();
					String offerID = objCircleOffersInfo.getOfferCode();
				
					strOfferCode = strOfferCode+offerID+Constants.COMMA;
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Category Phrase :: "+strVoiceOfferPhrase);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Detail Phrase :: "+strVoiceOfferDetailPhrase);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Offer Code :: "+strOfferCode);
					
					offerPhrase.add(strVoiceOfferPhrase);
					offerCodes.add(offerID);
					offerDetailPhrase.put(offerID,strVoiceOfferDetailPhrase);
					offerPhraseMap.put(offerID,strVoiceOfferPhrase);
					count++;
				}
			}
		
		mySession.setProperty(Constants.OFFERCODES,strOfferCode);
		mySession.setProperty(Constants.OFFER_PHRASE,offerPhrase);
		mySession.setProperty(Constants.OFFER_PHRASE_MAP,offerPhraseMap);
		mySession.setProperty(Constants.OFFER_DETAILS_PHRASE,offerDetailPhrase);
		mySession.setProperty(Constants.OFFER_COUNT,count);
		
		
	}
	catch(Exception e)
	{
		strSMSFrame = appProperties.getIVRProp(Constants.VOICE_OFFER_Failure);
		smsHashTable = setPushSMS.generatePushSMSDataMap(strSMSFrame, arrSMSData);
		
		PrintStackTrace.PrintException(e);
		info.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Exception in Voice Offer Details Host : " + e);
		mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
		mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_TRANSFER_REASON_CODE).setValue("TR_0128");
		
	}
	finally
	{
		reqVoiceOffers = null;
		resVoiceOffers = null;
		webServiceManager = null;
		mySession.setProperty(Constants.SMSDataMap, smsHashTable);

	}
		
	
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-08  01:03:41 PM
	 */
	public AccessHost_MDNVoiceOffer() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:46 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:46 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:46 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:isVoiceOffer", "Constants:yes", false).setDebugId(2399));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(661)).evaluate(mySession)) {
			actions = new java.util.ArrayList(3);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("CallData:globalMenuType", "Constants:FeatureLevel", false).setDebugId(2558));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:isLinkDown", "Constants:no", false).setDebugId(2563));
			actions.add(new com.avaya.sce.runtime.Next("ProductsAndOffers-PushSMS_VoiceOfferFailed", "LinkDown").setDebugId(660));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ProductsAndOffers-Initialize_MN_0025", "Continue").setDebugId(663));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
