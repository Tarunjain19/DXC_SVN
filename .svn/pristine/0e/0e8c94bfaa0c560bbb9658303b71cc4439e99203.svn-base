package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.metro.Constants;
import com.rcom.metro.Utilities;
import com.servion.util.AppProperties;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-02  05:47:20 PM
 */
public class WithinBusinessHour_BC extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-02  05:47:20 PM
	 */
	public WithinBusinessHour_BC() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	
	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Business Hour Check");
		
		String workingTime = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.WORKING_TIME);
		String workingTime_1 = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.WORKING_TIME_1);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Working Time 1 : " +workingTime);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Working Time 2 : " + workingTime_1);
		
		String workingTimeStart = workingTime.split("-")[0];
		String workingTimeEnd = workingTime.split("-")[1];
		
		
		boolean workingTimeIsBusinessHour = Utilities.isBusinessHour(null, null, workingTimeStart, workingTimeEnd);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, workingTime + " : " + workingTimeIsBusinessHour);
		
		Boolean workingTime_1IsBusinessHour = null;
		
		if(workingTime_1 != null && !workingTime_1.equalsIgnoreCase("") && !workingTime_1.equalsIgnoreCase(Constants.NO_KEY))
		{
			String workingTimeStart_1 = workingTime_1.split("-")[0];
			String workingTimeEnd_1 = workingTime_1.split("-")[1];
			
			workingTime_1IsBusinessHour = Utilities.isBusinessHour(null, null, workingTimeStart_1, workingTimeEnd_1);
		}
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, workingTime_1 + " : " + workingTime_1IsBusinessHour);
		
		
		workingTime_1IsBusinessHour = (workingTime_1IsBusinessHour==null)?false:workingTime_1IsBusinessHour;
		
		if(workingTimeIsBusinessHour || workingTime_1IsBusinessHour)
		{
			mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_IS_CALLED_WITHIN_BUSINESS_HOUR).setValue(true);
		}
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Within Business Hour : " + mySession.getVariableField(IProjectVariables.CONSTANTS, IProjectVariables.CONSTANTS_FIELD_IS_CALLED_WITHIN_BUSINESS_HOUR).getBooleanValue());
		
	}
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-JAN-28  05:42:46 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JAN-28  05:42:46 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JAN-28  05:42:46 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Constants:IsCalledWithinBusinessHour", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(1652)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("setCallVar_getXFerVDN_BC", "Yes").setDebugId(1650));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("BusinessHourAnn_PP", "No").setDebugId(1654));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
