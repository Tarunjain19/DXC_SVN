package flow;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.ppp.model.PrepaidPostpaidServiceInfo;
import com.rcom.ppp.resource.IVRDBServiceInstance;
import com.servion.util.AppConstant;
import com.servion.util.AppProperties;
import com.servion.util.DynamicMenu;
import com.servion.util.IVRDataBean;
import com.servion.util.StackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-24  06:25:28 PM
 */
public class AccessDBPostpaidService extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-24  06:25:28 PM
	 */
	public AccessDBPostpaidService() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo trace = mySession.getTraceOutput();
		String hostResult = AppConstant.ERROR;
		IVRDataBean objIVRDataBean = null;
		String key = AppConstant.EMPTY_STRING;
		String initialPrompt = null;
		
		try
		{
			
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			
			String PostpaidOffersMenuRetVal = mySession.getVariableField(IProjectVariables.POSTPAID_SERVICES__MN, (IProjectVariables.POSTPAID_SERVICES__MN_FIELD_VALUE)).getStringValue();
			String appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			String circle = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			String serviceType = AppConstant.NA;
			String RTNValue = null;
			String RTNConstant = null;
			
			RTNValue = mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_RETENTION_LIST).getStringValue();
			RTNConstant = mySession.getVariableField(IProjectVariables.CONSTANT, IProjectVariables.CONSTANT_FIELD_RTN).getStringValue();
			
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "RTN Value : " +RTNValue);
			
			if(RTNValue.equalsIgnoreCase(RTNConstant))
			{
				serviceType = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CALLER_TYPE).getStringValue();
			}
			else
			{
				serviceType = AppConstant.NA;
			}
			
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Service Type : " +serviceType);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "App Name : " +appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "POSTPAID_SERVICES__MN_FIELD_VALUE : " +PostpaidOffersMenuRetVal);
			
			PrepaidPostpaidServiceInfo prepaidPostpaidServiceInfo = new PrepaidPostpaidServiceInfo();
			prepaidPostpaidServiceInfo.setAppName(appName);
			prepaidPostpaidServiceInfo.setCircleCode(circle);
			prepaidPostpaidServiceInfo.setLanguage(mySession.getCurrentLanguage());
			
			Hashtable<String, PrepaidPostpaidServiceInfo> htPrepaidPostPaidServiceInfo = IVRDBServiceInstance.getInstance().getPrepaidPostpaidServiceInfo(objIVRDataBean, prepaidPostpaidServiceInfo);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Prepaid Postpaid Service Info : " +htPrepaidPostPaidServiceInfo);
			
			key = AppConstant.POSTPAID_SERVICES + AppConstant.SEPERATOR_UNDERSCORE + PostpaidOffersMenuRetVal + AppConstant.SEPERATOR_UNDERSCORE + serviceType;
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Key : " +key);
			
			if(htPrepaidPostPaidServiceInfo != null && htPrepaidPostPaidServiceInfo.size() != 0)
			{
				PrepaidPostpaidServiceInfo prepaidServiceInfo = htPrepaidPostPaidServiceInfo.get(key);
				
				Hashtable<String, String> htPhraseInfo = new Hashtable<String, String>();
				
				if(prepaidServiceInfo.getOfferInformation1Phrase()!=null && !prepaidServiceInfo.getOfferInformation1Phrase().equalsIgnoreCase(AppConstant.EMPTY_STRING) && prepaidServiceInfo.getOfferInformation1DetailPhrase() != null && !prepaidServiceInfo.getOfferInformation1DetailPhrase().equalsIgnoreCase(AppConstant.EMPTY_STRING))
				{
					htPhraseInfo.put(prepaidServiceInfo.getOfferInformation1Phrase(), prepaidServiceInfo.getOfferInformation1DetailPhrase());
				}
				if(prepaidServiceInfo.getOfferInformation2Phrase()!=null && !prepaidServiceInfo.getOfferInformation2Phrase().equalsIgnoreCase(AppConstant.EMPTY_STRING) && prepaidServiceInfo.getOfferInformation2DetailPhrase() != null && !prepaidServiceInfo.getOfferInformation2DetailPhrase().equalsIgnoreCase(AppConstant.EMPTY_STRING))
				{
					htPhraseInfo.put(prepaidServiceInfo.getOfferInformation2Phrase(), prepaidServiceInfo.getOfferInformation2DetailPhrase());
				}
				if(prepaidServiceInfo.getOfferInformation3Phrase()!=null && !prepaidServiceInfo.getOfferInformation3Phrase().equalsIgnoreCase(AppConstant.EMPTY_STRING) && prepaidServiceInfo.getOfferInformation3DetailPhrase() != null && !prepaidServiceInfo.getOfferInformation3DetailPhrase().equalsIgnoreCase(AppConstant.EMPTY_STRING))
				{
					htPhraseInfo.put(prepaidServiceInfo.getOfferInformation3Phrase(), prepaidServiceInfo.getOfferInformation3DetailPhrase());
				}
				if(prepaidServiceInfo.getOfferInformation4Phrase()!=null && !prepaidServiceInfo.getOfferInformation4Phrase().equalsIgnoreCase(AppConstant.EMPTY_STRING) && prepaidServiceInfo.getOfferInformation4DetailPhrase() != null && !prepaidServiceInfo.getOfferInformation4DetailPhrase().equalsIgnoreCase(AppConstant.EMPTY_STRING))
				{
					htPhraseInfo.put(prepaidServiceInfo.getOfferInformation4Phrase(), prepaidServiceInfo.getOfferInformation4DetailPhrase());
				}
				if(prepaidServiceInfo.getOfferInformation5Phrase()!=null && !prepaidServiceInfo.getOfferInformation5Phrase().equalsIgnoreCase(AppConstant.EMPTY_STRING) && prepaidServiceInfo.getOfferInformation5DetailPhrase() != null && !prepaidServiceInfo.getOfferInformation5DetailPhrase().equalsIgnoreCase(AppConstant.EMPTY_STRING))
				{
					htPhraseInfo.put(prepaidServiceInfo.getOfferInformation5Phrase(), prepaidServiceInfo.getOfferInformation5DetailPhrase());
				}
				
				
				if(htPhraseInfo.size() != 0)
				{
					key = appName +AppConstant.SEPERATOR_HYPEN+ AppConstant.MN_0039;
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Dynamic prompt Key :: "+key);
					initialPrompt = AppProperties.GetInstance(AppConstant.DYN_MENU).getIVRProp(key);
					
					ArrayList<String> Offerlist = new ArrayList<String>((Collections.list(htPhraseInfo.keys())));
					
					
					initialPrompt=DynamicMenu.playPrompt(Offerlist, initialPrompt, ""+Offerlist.size(), AppConstant.MN_0039, trace);
					
					mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
					mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_MENU_OPTION).setValue(Offerlist.toString().replaceAll("\\[", "").replaceAll("\\]", "").replaceAll("\\s+", ""));
					mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_MORE_OPTION_COUNT).setValue(Offerlist.size());
					
					mySession.setProperty(AppConstant.PREPAID_POSTPAID_SERVICE_OFFERS, htPhraseInfo);
					
					hostResult = AppConstant.Success;
				
				}
				
			}
			
			
			
			
		}catch(Exception e)
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Exception while accessing Postpaid service offers");
			StackTrace.PrintException(e);
		}
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Status :" +hostResult);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResult);
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:03 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:03 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:03 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(14839)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:HostResult", "constant:error", false).setDebugId(14840));
			actions.add(new com.avaya.sce.runtime.Next("PostpaidOffers_MN", "(Success)").setDebugId(14841));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0071", true).setDebugId(14940));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown", "(Timeout)").setDebugId(14843));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
