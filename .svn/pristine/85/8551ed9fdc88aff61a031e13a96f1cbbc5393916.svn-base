package flow;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.red.constants.Constants;
import com.rcom.red.loadproperty.LoadProperty;
import com.rcom.red.model.IVRRoutingInfo;
import com.rcom.red.resource.IVRDBServiceInstance;
import com.rcom.red.utils.PrintStackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-17  03:01:36 PM
 */
public class InitializeVariables extends com.avaya.sce.runtime.Data {

	private static Logger logger = Logger.getLogger("Dialog.Designer.TraceWriter.RCOM_CF_RED_IVR");
	
	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info  = mySession.getTraceOutput();
		IVRDataBean ivrDataBean = null;
		IVRRoutingInfo ivrRoutingInfo = null;
		GetReportObject getReportObject = null;
		IVRREPORTDATA ivrreportdata = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		InetAddress ip = null;
		CALLINFO callInfo  = null;
		String strKey = "";
		
		try{
			/*Setting logger and sesion id */
			ivrDataBean = new IVRDataBean();
			ivrDataBean.setLogger(logger);
			ivrDataBean.setSessionID(mySession.getSessionId());
			mySession.setProperty(Constants.IVRDataBean, (IVRDataBean) ivrDataBean);
			
			getReportObject = new GetReportObject();
			ivrreportdata = getReportObject.createIVRReportObject();
			mySession.setProperty(Constants.BEANREPORTDATA, getReportObject);
			getReportObject.setIvrreportdata(ivrreportdata);
			ivrDataBean.setGetReportObject(getReportObject);
			
			/**Assigning call info data for report*/
			ip= InetAddress.getLocalHost();
			callInfo  = ivrreportdata.getCALLINFO();
			callInfo.setUNIQUECALLID(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue());
			callInfo.setSESSIONID(mySession.getSessionId());
			callInfo.setVXMLIP(String.valueOf(ip));
			callInfo.setSTARTDATETIME(dateFormat.format(new Date()));
			callInfo.setAPPNAME(LoadProperty.getivrconfigProp(Constants.ApplicationName));
			callInfo.setCALLERTYPE("NA");
			callInfo.setCATEGORY("NA");
			callInfo.setCIRCLEID("NA");
			callInfo.setCLI(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
			callInfo.setDNIS(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
			callInfo.setDNISTYPE("NA");
			callInfo.setHUB(LoadProperty.getivrconfigProp(Constants.HUB));
			callInfo.setAGENTID("NA");
			callInfo.setAGENTEXTN("NA");
			callInfo.setTRANSCODE("NA");
			callInfo.setTRANSFERVDN("NA");
			callInfo.setUUIDATA("NA");
			callInfo.setABANDONEDFLAG("NA");
			callInfo.setTRANSTOIVR("NA");
			callInfo.setSKILLNAME("NA");
			callInfo.setLANGCODE("ENG");
			callInfo.setENDDATETIME("NA");
			callInfo.setDTMFPATH("NA");
			callInfo.setMENUPATH("NA");
			callInfo.setCALLERPATH("NA");
			callInfo.setLASTMENUACCESSED("NA");
			callInfo.setDISPOSITION("ID");
			callInfo.setCALLENDREASON("IVR_DISCONNECT");
			callInfo.setHOWCALLENDED("DISCONNECT");
			callInfo.setLANGUAGEFROM("NA");
			callInfo.setLANGUAGETO("NA");
			callInfo.setTAGGING("NA");
			callInfo.setERRREASON("NA");
			callInfo.setLANGUAGEFROM("NA");
			callInfo.setLANGUAGETO("NA");
			callInfo.setTAGGING("NA");
			callInfo.setLASTNODEACCESSED("NA");
			ivrreportdata.setCALLINFO(callInfo);
			ivrDataBean.setGetReportObject(getReportObject);
			
			/*Setting input parameter*/
			ivrRoutingInfo =  new IVRRoutingInfo();
			ivrRoutingInfo.setDnis(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
			
			/*Invoking DB*/
			ivrRoutingInfo = IVRDBServiceInstance.getIVRDBInstance().getIVRRoutingInfo(ivrDataBean, ivrRoutingInfo);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "After Hitting ivrRoutingInfo  circle :"+ivrRoutingInfo.getCircle());
			
			callInfo.setCIRCLEID(ivrRoutingInfo.getCircle());
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "After Hitting ivrRoutingInfo  CIRCLE_LANGUAGES :"+ivrRoutingInfo.getLanguage());
			
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_CIRCLE).setValue(ivrRoutingInfo.getCircle());
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_CIRCLE_LANGUAGES).setValue(ivrRoutingInfo.getLanguage());
			
			
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "After Hitting ivrRoutingInfo DefaultLanguage :"+ivrRoutingInfo.getDefaultLanguage());
			
			try
			{
			
			if(ivrRoutingInfo.getDefaultLanguage()!=null)
				mySession.setCurrentLanguage(ivrRoutingInfo.getDefaultLanguage());
			else
				mySession.setCurrentLanguage(Constants.ENG);
			
			}
			catch (Exception e) {
				PrintStackTrace.PrintException(e);
			}
			
			ivrDataBean.setGetReportObject(getReportObject);
			mySession.setProperty(Constants.IVRDataBean, ivrDataBean);
			
			strKey = mySession.getCurrentLanguage()+Constants.DMConfigPath;
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "After Hitting ivrRoutingInfo strKey :"+strKey);
			mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_CONFIG_FILE_PATH).setValue(LoadProperty.getivrconfigProp(strKey));
			
		}catch (Exception e) {
			PrintStackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Y);
		}finally{
			if(strKey.equals("")){
				strKey = mySession.getCurrentLanguage()+Constants.DMConfigPath;
				mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_CONFIG_FILE_PATH).setValue(LoadProperty.getivrconfigProp(strKey));

			}
		}
		
		
	}
	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-17  03:01:36 PM
	 */
	public InitializeVariables() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:44:33 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Y", false).setDebugId(1044)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Transfercode", "Constants:RED_TR_0004", false).setDebugId(1145));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_RED_PA_0009", "LinkDown").setDebugId(1000));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Welcome_RED_PA_0001", "Continue").setDebugId(1046));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
