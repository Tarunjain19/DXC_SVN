package flow.subflow.PostpaidStartFlow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.hsd.utils.Constants;
import com.servion.hsd.utils.PrintStackTrace;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-24  04:36:40 PM
 */
public class ValidateTotalExposure extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		
		String strOutstandingAmount = "", strUnbilledAmount = "", strCreditLimit = "";
		double doubleTotalExposure = 0, doubleCreditAmount = 0;
		
		try {
			strOutstandingAmount = mySession.getVariableField(IProjectVariables.POSTPAID__CHECK_BILL_DETAIL, IProjectVariables.POSTPAID__CHECK_BILL_DETAIL_FIELD_INVOICE_AMOUNT).getStringValue();
			strUnbilledAmount = mySession.getVariableField(IProjectVariables.POSTPAID__UNBILLED_INFO, IProjectVariables.POSTPAID__UNBILLED_INFO_FIELD_UNBILLED_AMOUNT).getStringValue();
			strCreditLimit = mySession.getVariableField(IProjectVariables.POSTPAID__CREDIT_INFO, IProjectVariables.POSTPAID__CREDIT_INFO_FIELD_CREDIT_AMOUNT).getStringValue();
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> Outstanding Amount:"+strOutstandingAmount+", Unbilled Amount:"+strUnbilledAmount+", Credit limit:"+strCreditLimit);
			
			if(strOutstandingAmount!=null){
				doubleTotalExposure = doubleTotalExposure+Double.parseDouble(strOutstandingAmount);
			}
			if(strUnbilledAmount!=null){
				doubleTotalExposure = doubleTotalExposure+Double.parseDouble(strUnbilledAmount);
			}
			if(strCreditLimit!=null){
				doubleCreditAmount = doubleCreditAmount+Double.parseDouble(strCreditLimit);
			}
			
			if(doubleTotalExposure<(1.5*doubleCreditAmount)){
				mySession.getVariableField(IProjectVariables.POSTPAID__FLAG, IProjectVariables.POSTPAID__FLAG_FIELD_IS_TOTAL_EXPOSURE_VALID).setValue(Constants.Yes);
			}
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> Total Exposure :"+doubleTotalExposure);
		} catch (Exception e) {
			PrintStackTrace.PrintException(e);
		} 
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-24  04:36:40 PM
	 */
	public ValidateTotalExposure() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:06 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:06 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:06 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Postpaid_Flag:isTotalExposureValid", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Postpaid_Constants:yes", true).setDebugId(7244)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("PostpaidStartFlow-AccessDB_PTP", "TotalExposureValid").setDebugId(7245));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("PostpaidStartFlow-AccessDB_PTP", "TotalExposureInvalid").setDebugId(7247));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
