package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.MDNActivationStatus;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.util.AppConstant;
import com.rcom.util.StackTrace;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-APR-06  02:31:40 PM
 */
public class AccessHost_Activation extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-APR-06  02:31:40 PM
	 */
	public AccessHost_Activation() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-24  10:30:26 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-24  10:30:26 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-24  10:30:26 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "MDN Activation Status", "appVariables:activationStatus").setDebugId(6080));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:Success", true).setDebugId(6081)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Set_RCD_PA_009", "Valid").setDebugId(6082));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_PP", "Default").setDebugId(6075));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		String sessionId = null,hostResponse= AppConstant.ERROR;
		String mdn = AppConstant.EMPTY_STRING,activationStatus = AppConstant.EMPTY_STRING,wave = AppConstant.EMPTY_STRING;
		MDNActivationStatus mdnactivationStaus = new MDNActivationStatus();
		IVRDataBean objIVRDataBean = null;
		try
		{
			mdn =  mySession.getVariableField(IProjectVariables.ENTER_MOBILE_NUM, IProjectVariables.ENTER_MOBILE_NUM_FIELD_VALUE).getStringValue();
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Activation MDN Sent :"+mdn);
			mdnactivationStaus.setMdn(mdn);
			mdnactivationStaus = IVRDBServiceInstance.getIVRDBInstance().checkMDNActivationStatus(objIVRDataBean, mdnactivationStaus);
			
			if(mdnactivationStaus!=null)
			{
				activationStatus = mdnactivationStaus.getCurrent_status();
				
				if(activationStatus!=null)
				{
					mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ACTIVATION_STATUS).setValue(activationStatus);
					
					if(activationStatus.equalsIgnoreCase(AppConstant.ACTIVE))
							wave = "2930.wav";
					else if (activationStatus.equalsIgnoreCase(AppConstant.SUSPENDED))
						wave ="2932.wav";
					else
						wave = "2931.wav";
					
					hostResponse =AppConstant.Success;
					mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_GET_WAVE).setValue(wave);
				}
				
		 }
		}
		catch(Exception e)
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception In MDN Activation Status :"+e);
			StackTrace.PrintException(e);
			
			
		}
		finally
		{
				sessionId = null;mdn = null;mdnactivationStaus = null;
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResponse);	
		}
	
	
	}
	
	
}
