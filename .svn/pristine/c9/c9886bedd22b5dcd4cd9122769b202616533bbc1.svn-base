package flow.subflow.Account_Information;

import java.util.ArrayList;
import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.ppp.model.PushSMSInfo;
import com.servion.util.AppConstant;
import com.servion.util.AppDataMap;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;
import com.servion.util.SetPushSMS;
import com.servion.util.StackTrace;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-12  06:37:25 PM
 */
public class SetProperty2 extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-12  06:37:25 PM
	 */
	public SetProperty2() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {

		/**Declaration**/
		String pushSMSkey = AppConstant.EMPTY_STRING;
		ITraceInfo trace = null;
		SetPushSMS objSetPushSMS = null;
		Hashtable<String, String> dynamicValueMap = null;
		IVariable dataBalance = null;
		String threeGFairUsageBalance = AppConstant.EMPTY_STRING, threeGFairUsageBalanceExpiryDate= AppConstant.EMPTY_STRING;
		String threeGNetBalance= AppConstant.EMPTY_STRING,threeGNetBalanceExpiryDate = AppConstant.EMPTY_STRING;
		String cdmaUsageBalance = AppConstant.EMPTY_STRING,cdmaUsageBalanceExpiryDate = AppConstant.EMPTY_STRING;
		String twoGNetBalance = AppConstant.EMPTY_STRING,twoGNetBalanceExpiryDate = AppConstant.EMPTY_STRING;
		String appName = AppConstant.EMPTY_STRING;
		String key = AppConstant.EMPTY_STRING,smsText= AppConstant.EMPTY_STRING;
		ArrayList<String> dynamicValueList =null;
		/**Assign**/
		trace = mySession.getTraceOutput();
		try {
			
			dataBalance = mySession.getVariable(IProjectVariables.DATA_BALANCE_AND_VALIDITY);
			threeGFairUsageBalance = dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GFAIR_USAGE_BALANCE).getStringValue();
			threeGFairUsageBalanceExpiryDate = dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_SMS_THREE_GFAIR_USAGE_DATE).getStringValue();
			threeGNetBalance = dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GNET_BALANCE).getStringValue();
			threeGNetBalanceExpiryDate = dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_SMSTHREE_GNET_DATE).getStringValue();
			cdmaUsageBalance = dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_CDMA_USAGE_BALANCE).getStringValue();
			cdmaUsageBalanceExpiryDate = dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_SMSCDMA_USAGE_DATE).getStringValue();
			twoGNetBalance = dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_TWO_GNET_BALANCE).getStringValue();
			twoGNetBalanceExpiryDate = dataBalance.getComplexVariable().getField(IProjectVariables.DATA_BALANCE_AND_VALIDITY_FIELD_SMSTWO_GNET_DATE).getStringValue();
			appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGFairUsageBalance:: "+threeGFairUsageBalance);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGFairUsageBalanceExpiryDate:: "+threeGFairUsageBalanceExpiryDate);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGNetBalance:: "+threeGNetBalance);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGNetBalanceExpiryDate:: "+threeGNetBalanceExpiryDate);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response cdmaUsageBalance:: "+cdmaUsageBalance);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response cdmaUsageBalanceExpiryDate:: "+cdmaUsageBalanceExpiryDate);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response TwoGNetBalance:: "+twoGNetBalance);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response TwoGNetBalanceExpiryDate:: "+twoGNetBalanceExpiryDate);
			
			
			
			if(!appName.contains(AppConstant.CDMA)){
				String finalSMSText = AppConstant.EMPTY_STRING;
				String[] textContent = null;
				String[] dynamicKeys = null;
				String[] keyAndDynamicKeyCode =null;
				String smsKeyWord = AppConstant.EMPTY_STRING;
				
				key = AppConstant.DATA_BAL_SUCCESS+AppConstant.SEPERATOR_UNDERSCORE+AppConstant.GSM;
				pushSMSkey = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(key);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Data Balance Push SMS Success Key :"+pushSMSkey);
				if(!AppConstant.N.equalsIgnoreCase(pushSMSkey)){
					keyAndDynamicKeyCode = pushSMSkey.split(AppConstant.SEPERATOR_PIPE);
					smsKeyWord = keyAndDynamicKeyCode[0];
					dynamicKeys = keyAndDynamicKeyCode[1].split(AppConstant.SEPERATOR_COMMA);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Data Balance Push SMS KeyWord :"+smsKeyWord);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"dynamicKeys:"+keyAndDynamicKeyCode[1]);
					
					smsText = pushSMSText(mySession,smsKeyWord);
					textContent = smsText.split(AppConstant.SEPERATOR_COMMA);
					
					for(int i =0; i<textContent.length;i++){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Text Content:" + ": "+textContent[i]);
					}
					
					
					if(threeGNetBalance!=null && threeGNetBalanceExpiryDate!=null && !AppConstant.EMPTY_STRING.equals(threeGNetBalance) && !AppConstant.EMPTY_STRING.equals(threeGNetBalanceExpiryDate)){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "threeGNetBalance ");
						finalSMSText = textContent[0].replaceAll(dynamicKeys[0], threeGNetBalance);
						finalSMSText = finalSMSText.replaceAll(dynamicKeys[1], threeGNetBalanceExpiryDate);
						finalSMSText =finalSMSText +AppConstant.SEPERATOR_COMMA;
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "threeGNetBalance Final Text "+finalSMSText);
					}
					
					if(threeGFairUsageBalance!=null && threeGFairUsageBalanceExpiryDate!=null && !AppConstant.EMPTY_STRING.equals(threeGFairUsageBalance) && !AppConstant.EMPTY_STRING.equals(threeGFairUsageBalanceExpiryDate)){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "threeGFairUsageBalance ");
						finalSMSText = finalSMSText + textContent[1].replaceAll(dynamicKeys[2], threeGFairUsageBalance);
						finalSMSText = finalSMSText.replaceAll(dynamicKeys[3], threeGFairUsageBalanceExpiryDate);
						finalSMSText =finalSMSText +AppConstant.SEPERATOR_COMMA;
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "threeGFairUsageBalance Final Text "+finalSMSText);
					}
					
					if(twoGNetBalance!=null && twoGNetBalanceExpiryDate!=null && !AppConstant.EMPTY_STRING.equals(twoGNetBalance) && !AppConstant.EMPTY_STRING.equals(twoGNetBalanceExpiryDate)){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "twoGNetBalance ");
						finalSMSText = finalSMSText + textContent[2].replaceAll(dynamicKeys[4], twoGNetBalance);
						finalSMSText = finalSMSText.replaceAll(dynamicKeys[5], twoGNetBalanceExpiryDate);
						finalSMSText =finalSMSText +AppConstant.SEPERATOR_COMMA;
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "twoGNetBalance Final Text"+finalSMSText);
					}
					finalSMSText = finalSMSText + "."+textContent[3];
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "final SMS Text "+finalSMSText);
					mySession.getVariableField(IProjectVariables.PUSH_SMSFLAG,IProjectVariables.PUSH_SMSFLAG_FIELD_PUSH_SMSTEXT).setValue(finalSMSText);
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Property file config for GSM Push SMS not done");
				}
				
			}else{
				
				key = AppConstant.DATA_BAL_SUCCESS+AppConstant.SEPERATOR_UNDERSCORE+AppConstant.CDMA;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Data Balance Push SMS Key :"+key);
				pushSMSkey = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(key);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Data Balance Push SMS Success Key :"+pushSMSkey);
				
				dynamicValueList=new ArrayList<String>();
				
				if(cdmaUsageBalance!=null && cdmaUsageBalanceExpiryDate!=null && !AppConstant.EMPTY_STRING.equals(cdmaUsageBalance) && !AppConstant.EMPTY_STRING.equals(cdmaUsageBalanceExpiryDate)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "cdmaUsageBalance ");
					dynamicValueList.add(cdmaUsageBalance);
					dynamicValueList.add(cdmaUsageBalanceExpiryDate);
				}
				objSetPushSMS = new SetPushSMS();
				dynamicValueMap = objSetPushSMS.generatePushSMSDataMap(pushSMSkey, dynamicValueList);
				mySession.setProperty(AppConstant.SMSDataMap,dynamicValueMap);
			}	
			
		} catch (Exception e) {
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Error in Push SMS Data :"+e);
			StackTrace.PrintException(e);
		}
	}
	
	public String pushSMSText(SCESession mySession,String strKeyword){

		ITraceInfo trace = mySession.getTraceOutput();
		
		Hashtable<String, String> smsHashTable = null;
		PushSMSInfo pushSMSInfo = null;
		String strApplicationName = AppConstant.EMPTY_STRING,strCircle = AppConstant.EMPTY_STRING, strMsgText = AppConstant.EMPTY_STRING;
		Hashtable<String, PushSMSInfo> pushSMSHashTable = null;
		IVRDataBean ivrDataBean = null;
		String smsText =AppConstant.EMPTY_STRING;
		
		try{
			
			pushSMSInfo = new PushSMSInfo();

			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
			strCircle = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			strApplicationName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Cricle ID :" + strCircle);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMS Key Word :" + strKeyword);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Applicatin Name :" + strApplicationName);
			
			pushSMSHashTable = (Hashtable<String, PushSMSInfo>) AppDataMap.getInstance(strApplicationName).getAppData(AppConstant.PUSH_SMS+strApplicationName);
			
			if(pushSMSHashTable != null){
				pushSMSInfo = pushSMSHashTable.get(strCircle+AppConstant.SEPERATOR_UNDERSCORE+strKeyword);
				if(pushSMSInfo!=null){
					strMsgText = pushSMSInfo.getSmsText();
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText From DB :" + strMsgText);
					if(strMsgText != null){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText:"+strMsgText);
						
					}else{
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not for that Circle");
					}
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this service");
				}
			}else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SMSText not available for this application");
			}
			
		}catch (Exception e) {
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in sending SMS");
			
		}finally{
			ivrDataBean = null;pushSMSInfo = null;
			
		}
		return strMsgText;
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:17 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Account_Information-PushSMSDataBal", "Default");
		next.setDebugId(3517);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:17 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:17 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("dmInputParameter:propertyFileName", "propertyFileName:GPMenuRepeat", false).setDebugId(3518));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Push SMS Bal Success :", "PushSMSFlag:dataBalFailure").setDebugId(3513));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "PushSMSFlag:dataBalSuccess", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:Key_true", true).setDebugId(3514)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Account_Information-GPRepeatLevel", "Skip").setDebugId(3515));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		actions = new java.util.ArrayList(1);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("PushSMSFlag:dataBalSuccess", "constant:Key_true", false).setDebugId(3516));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
