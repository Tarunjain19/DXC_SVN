package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.dbservice.IVRDataService;
import com.rcom.otherflows.dbservice.IVRDataServiceImpl;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.Constants;
import com.rcom.rdtv.StackTrace;
import com.rcom.rdtv.rcomdth02.model.ValidateSCNStatus;
import com.servion.util.IVRDataBean;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-29  07:12:44 PM
 */
public class ValidateKitNo extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-29  07:12:44 PM
	 */
	public ValidateKitNo() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:06 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:06 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-12  05:47:06 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:isException", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(2588)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferPoint", "TransferPoints:RD02_TR_0016", false).setDebugId(2589));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_PP", "LinkDown").setDebugId(2590));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "ValidateKitNo:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:Success", true).setDebugId(2593)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "ValidateKitNo:Result", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(2594)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("CheckStatus", "CheckStatus").setDebugId(2595));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.varoperations.Increment("appVariables:startedNoCount").setDebugId(2597));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "appVariables:startedNoCount", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "Constants:three", true).setDebugId(2598)).evaluate(mySession)) {
						actions = new java.util.ArrayList(1);
						actions.add(new com.avaya.sce.runtime.Next("InvalidEntry_PP", "ReEnter").setDebugId(2599));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					} else {
						actions = new java.util.ArrayList(1);
						actions.add(new com.avaya.sce.runtime.Next("ExceedTries_Annc", "CountExceeded").setDebugId(2601));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;
					}

				}


			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("CallEnd", "CallEnd").setDebugId(2603));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	//Commented by deepan, have to uncomment
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		ValidateSCNStatus validateSCNStatus = null;
		IVRDataService ivrDataService = null;
		IVRDataBean ivrDataBean = null;

		try
		{
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			
			/** Request by Kit Number**/
			validateSCNStatus = new ValidateSCNStatus();
			validateSCNStatus.setScnNo(mySession.getVariableField(IProjectVariables.GET_STARTED_KIT__MN, IProjectVariables.GET_STARTED_KIT__MN_FIELD_VALUE).getStringValue());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate Kit Number Request :: "+validateSCNStatus.toString());
			mySession.getVariableField(IProjectVariables.SCN__NUMBER, IProjectVariables.SCN__NUMBER_FIELD_NUMBER).setValue(mySession.getVariableField(IProjectVariables.GET_STARTED_KIT__MN, IProjectVariables.GET_STARTED_KIT__MN_FIELD_VALUE).getStringValue());
			mySession.getVariableField(IProjectVariables.GET_SMART_CARD_NUMBER__MN, IProjectVariables.GET_SMART_CARD_NUMBER__MN_FIELD_VALUE).setValue(mySession.getVariableField(IProjectVariables.GET_STARTED_KIT__MN, IProjectVariables.GET_STARTED_KIT__MN_FIELD_VALUE).getStringValue());
			/** Response **/
			ivrDataService = new IVRDataServiceImpl();
			validateSCNStatus = IVRDBServiceInstance.getRcomdth02DataService().getSubscriberValidations(ivrDataBean, validateSCNStatus);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Validate Kit Number Response :: "+validateSCNStatus.toString());
			
			if(validateSCNStatus.getStatus().equalsIgnoreCase(Constants.SUCCESS))
			{
					mySession.getVariableField(IProjectVariables.VALIDATE_KIT_NO, IProjectVariables.VALIDATE_KIT_NO_FIELD_RESULT).setValue(Constants.Yes);
					mySession.getVariableField(IProjectVariables.VALIDATE_KIT_NO, IProjectVariables.VALIDATE_KIT_NO_FIELD_FLAG).setValue(validateSCNStatus.getStatus());
					mySession.getVariableField(IProjectVariables.VALIDATE_KIT_NO, IProjectVariables.VALIDATE_KIT_NO_FIELD_STATUS).setValue(validateSCNStatus.getScnStatus());
									
			}
			else{
				mySession.getVariableField(IProjectVariables.VALIDATE_KIT_NO, IProjectVariables.VALIDATE_KIT_NO_FIELD_RESULT).setValue(Constants.No);
				mySession.getVariableField(IProjectVariables.VALIDATE_KIT_NO, IProjectVariables.VALIDATE_KIT_NO_FIELD_STATUS).setValue(Constants.SUCCESS);
			}

	}catch(Exception e)
	{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(Constants.Yes);
	StackTrace.PrintException(e);
	}
	finally
	{trace=null;validateSCNStatus=null;ivrDataService=null;}
	}
}
