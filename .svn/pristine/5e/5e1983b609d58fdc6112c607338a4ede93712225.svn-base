package flow;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.dnd.util.AppConstant;
import com.dnd.util.LoadProperty;
import com.dnd.util.StackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-16  06:44:01 PM
 */
public class CallStart extends com.avaya.sce.runtime.Data {

	public static Logger logger = Logger.getLogger(CallStart.class);
	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-16  06:44:01 PM
	 */
	public CallStart() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-23  01:04:16 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Set_DND_MN_0001", "Default");
		next.setDebugId(27);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-23  01:04:16 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-23  01:04:16 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		com.avaya.sce.runtime.BooleanOperation bo1 = new com.avaya.sce.runtime.BooleanOperation(com.avaya.sce.runtime.BooleanOperation.OR);
		com.avaya.sce.runtime.Expression be1 = new com.avaya.sce.runtime.Expression("expression1", "session:ani", com.avaya.sce.runtime.Expression.IS_EMPTY);
		bo1.addExpression(be1);
		com.avaya.sce.runtime.Expression be2 = new com.avaya.sce.runtime.Expression("expression2", "session:dnis", com.avaya.sce.runtime.Expression.IS_EMPTY);
		bo1.addExpression(be2);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition").setDebugId(2425)).evaluate(mySession, bo1)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.Next("DND_PA_0002", "empty").setDebugId(2430));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		Logger logger = Logger.getLogger(this.getClass());
		
		GetReportObject getReportObject = null;
		IVRREPORTDATA ivrreportdata = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		InetAddress ip = null;
		CALLINFO callInfo  = null;
		
		String sessionId = mySession.getSessionId();
		String ANI = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		String DNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "SESSION ID : " +sessionId);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "ANI : " +ANI);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DNIS : " +DNIS);
		
		try {
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE).setValue(LoadProperty.getivrconfigProp(AppConstant.DEFAULT_LANG));
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_UUI_DATA).setValue(ANI+"|" + DNIS + "|");
			
		//Setting IVRDataBean in session for DB Transactions - Start
		IVRDataBean ivrDataBean = new IVRDataBean();
		ivrDataBean.setSessionID(sessionId);
		ivrDataBean.setLogger(logger);
		mySession.setProperty(AppConstant.IVRDATABEAN, ivrDataBean);
		//Setting IVRDataBean in session for DB Transactions - End
		
		
		getReportObject = new GetReportObject();
		ivrreportdata = getReportObject.createIVRReportObject();
		mySession.setProperty(AppConstant.BEANREPORTDATA, getReportObject);
		getReportObject.setIvrreportdata(ivrreportdata);
		ivrDataBean.setGetReportObject(getReportObject);
		mySession.getVariable(IProjectVariables.APP__NAME).getSimpleVariable().setValue(LoadProperty.getivrconfigProp(AppConstant.APP_NAME));
		
		/**Assigning call info data for report*/
		ip= InetAddress.getLocalHost();
		callInfo  = ivrreportdata.getCALLINFO();
		callInfo.setUNIQUECALLID(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue());
		callInfo.setSESSIONID(mySession.getSessionId());
		callInfo.setVXMLIP(String.valueOf(ip));
		callInfo.setSTARTDATETIME(dateFormat.format(new Date()));
		callInfo.setAPPNAME(mySession.getVariable(IProjectVariables.APP__NAME).getSimpleVariable().getStringValue());
		callInfo.setCALLERTYPE("NA");
		callInfo.setCATEGORY("NA");
		callInfo.setCIRCLEID("NA");
		callInfo.setCLI(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
		callInfo.setDNIS(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
		callInfo.setDNISTYPE("NA");
		callInfo.setHUB(LoadProperty.getivrconfigProp(AppConstant.HUB));
		callInfo.setAGENTID("NA");
		callInfo.setAGENTEXTN("NA");
		callInfo.setTRANSCODE("NA");
		callInfo.setTRANSFERVDN("NA");
		callInfo.setUUIDATA("NA");
		callInfo.setABANDONEDFLAG("NA");
		callInfo.setTRANSTOIVR("NA");
		callInfo.setSKILLNAME("NA");
		callInfo.setLANGCODE(LoadProperty.getivrconfigProp(AppConstant.DEFAULT_LANG));
		callInfo.setENDDATETIME("NA");
		callInfo.setDTMFPATH("NA");
		callInfo.setMENUPATH("NA");
		callInfo.setCALLERPATH("NA");
		callInfo.setLASTMENUACCESSED("NA");
		callInfo.setLASTNODEACCESSED("NA");
		callInfo.setDISPOSITION("ID");
		callInfo.setCALLENDREASON("IVR_DISCONNECT");
		callInfo.setHOWCALLENDED("DISCONNECT");
		callInfo.setERRREASON("NA");
		callInfo.setRESERVE1("NA");
		callInfo.setRESERVE2("NA");
		callInfo.setRESERVE3("NA");
		callInfo.setRESERVE4("NA");
		callInfo.setRESERVE5("NA");
		callInfo.setLANGUAGEFROM("NA");
		callInfo.setLANGUAGETO("NA");
		callInfo.setTAGGING("NA");
	
		
		ivrreportdata.setCALLINFO(callInfo);
		
		ivrDataBean.setGetReportObject(getReportObject);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Application Name:: "+mySession.getVariable(IProjectVariables.APP__NAME).getSimpleVariable().getStringValue());
		
		String DM_PropertiesLocation = LoadProperty.getivrconfigProp(AppConstant.DM_PROPERTY_FILE_LOCATION);
		String defaultLanguage = LoadProperty.getivrconfigProp(AppConstant.DEFAULT_LANG);
		String englishFilePath = LoadProperty.getivrconfigProp(AppConstant.LANGUAGE_+defaultLanguage);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DM Properties Location  : " +DM_PropertiesLocation);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Default Language  : " +englishFilePath);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DM Properties Location with language  : " +DM_PropertiesLocation + englishFilePath + AppConstant.FORWARD_SLASH);
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(DM_PropertiesLocation + englishFilePath + AppConstant.FORWARD_SLASH);
		
		
		}catch(Exception e){
			StackTrace.PrintException(e);
		}
	}
}
