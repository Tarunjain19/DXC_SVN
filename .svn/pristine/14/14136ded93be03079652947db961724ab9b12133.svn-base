package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.StackTrace;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-MAR-14  11:48:27 AM
 */
public class Play_CSAT extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-MAR-14  11:48:27 AM
	 */
	public Play_CSAT() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-APR-11  05:10:40 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("CSAT_MN_0001", "Default");
		next.setDebugId(3711);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-APR-11  05:10:40 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-APR-11  05:10:40 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo trace =null;
		
		trace = mySession.getTraceOutput();
		
		
		try{
		
	    String Array_count=mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_ARRAY_COUNT).getStringValue();
	    String Arrav_Value= mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_ARRAY_VALUE).getStringValue();
	    String Arrav_Inital= mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_INITAL_ARRAY).getStringValue();
	    String Arrav_End= mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_END_ARRAY).getStringValue();
	   
	  
		
	    trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Array_count is :"+Array_count);
	    trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Arrav_Value is :"+Arrav_Value);
	    trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Arrav_Inital is :"+Arrav_Inital);
	    trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Arrav_End is :"+Arrav_End);
	    
	    String Array_Total[]=Arrav_Value.split("\\|");
	    
	    int Array_Len=Integer.parseInt(Array_count);
	    int Arrav_Start=Integer.parseInt(Arrav_Inital);
	    int Arrav_Finish=Integer.parseInt(Arrav_End);
	    
	    String dialogname="CSAT_MN_"+Arrav_Finish;
	    
	    for(int i=Arrav_Start;i<Arrav_Finish;i++)
		{
			
			
			 trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Array_Total[i] :"+Array_Total[i]);
			
			String Ar2[]=Array_Total[i].split("\\*");
			 trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Ar2.length:"+Ar2.length);
			
			String MenuOpetion="";
		
		        trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Question is:"+Ar2[0]);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Opetion is:"+Ar2[1]);
				
				//mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.dm).setValue(Ar2[0]);
				mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_INITIAL_PROMPT).setValue(Ar2[0]);
			   
				mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_MENU_OPTION_COUNT).setValue(Ar2[1]);
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"dialogname is:"+dialogname);
				
				mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_DIALOG_NAME).setValue(dialogname);
				
				
			
				if(Ar2[1].equalsIgnoreCase("1"))	
				{
					MenuOpetion="1";
				}
				else if(Ar2[1].equalsIgnoreCase("2"))
				{
					MenuOpetion="1,2";
				}
				else if(Ar2[1].equalsIgnoreCase("3"))
				{
					MenuOpetion="1,2,3";
				}
				else if(Ar2[1].equalsIgnoreCase("4"))
				{
					MenuOpetion="1,2,3,4";
				}
				else if(Ar2[1].equalsIgnoreCase("5"))
				{
					MenuOpetion="1,2,3,4,5";
				}
		
			
			
			 trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"MenuOpetion is:"+MenuOpetion);
			 mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_MENU_OPTION).setValue(MenuOpetion);
			
			
		}
	
		
		
		
		
	}
	
	catch (Exception e) {
		//strDefaultLanguage = Constants.ENG;
		StackTrace.PrintException(e);
		mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_ARRAY_COUNT).setValue(0);
		mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
	}
	}
	
}
