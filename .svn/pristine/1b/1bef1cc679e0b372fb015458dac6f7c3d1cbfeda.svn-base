package flow.subflow.Recharge_Account_Using_Cash_Card;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.BBMoviesInfo;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.AppDataMap;
import com.rcom.rdtv.util.DynamicMenu;
import com.rcom.rdtv.util.StackTrace;
import com.servion.util.AppProperties;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-28  07:35:47 PM
 */
public class Fetch_MoviesName extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-28  07:35:47 PM
	 */
	public Fetch_MoviesName() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:53 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:53 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:53 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(2622)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0047", false).setDebugId(2623));
			actions.add(new com.avaya.sce.runtime.Next("Recharge_Account_Using_Cash_Card-link_down", "linkdown").setDebugId(2624));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Recharge_Account_Using_Cash_Card-Movies_MN", "Default").setDebugId(1527));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		
		String movieName,appName,initialPrompt,bbMoviesKey,languageCode = null,circleID = null,key=null;
		int listSize = 0,checkSize=0;
		String moreOptiondynamicValues = AppConstants.EMPTY_STRING;
		List<String> dynamicList = null;
		Hashtable<String, Hashtable<String, Hashtable<String, BBMoviesInfo>>>  circleIDBBMoviesList= null;
		Hashtable<String, Hashtable<String, BBMoviesInfo>> langCodeBBMobiesList = null;
		Hashtable<String, BBMoviesInfo> moviesIdList = null;
		BBMoviesInfo bbMoviesInfo = null;Set<String> moviesId = null;
		try
		{
			
		appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
		circleID = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
		languageCode = mySession.getCurrentLanguage();
		
		/** Getting from Session **/
		key = AppConstants.BBMOVIES_KEY+appName;
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "BlockBuster Movies Key :: "+key);
		circleIDBBMoviesList = (Hashtable<String, Hashtable<String, Hashtable<String, BBMoviesInfo>>>) AppDataMap.getInstance(appName).getAppData(key);
				
		if(circleIDBBMoviesList !=null)
		{
			
			langCodeBBMobiesList = circleIDBBMoviesList.get(circleID);
			moviesIdList = langCodeBBMobiesList.get(languageCode);
			moviesId = moviesIdList.keySet();
			listSize = moviesId.size();
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO," BBMovies Check :" +languageCode);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO," BBMovies Info from DB :" +moviesIdList.toString());
			
			dynamicList = new ArrayList<String>();
			for (String movieId : moviesId) 
			{
				dynamicList.add(moviesIdList.get(movieId).getMoviePhrase());
				checkSize++;
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Check Size Value :: "+checkSize);
				moreOptiondynamicValues = moreOptiondynamicValues+movieId;
				if(checkSize%5==0)
				{
					//moreOptiondynamicValues =moreOptiondynamicValues+AppConstants.PIPE_SEPERATOR;
					moreOptiondynamicValues =moreOptiondynamicValues+AppConstants.SEPERATOR_COMMA;	
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Pipe Adding :: ");
				}
				else
				{
					moreOptiondynamicValues =moreOptiondynamicValues+AppConstants.SEPERATOR_COMMA;		
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Comma Adding ");
				}
			}
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " moreOptiondynamicValues :: "+moreOptiondynamicValues);
		/** Forming the Dynamic Prompt **/
		key = appName+AppConstants.SEPERATOR_HYPEN+AppConstants.RD01_MN_0020;
		initialPrompt = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(key);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Prompt Key "+AppConstants.RD01_MN_0020+" :: "+key);
		
		/** Invoking the playPromt method **/
		initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, String.valueOf(checkSize), AppConstants.RD01_MN_0020, trace);
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_MENU_OPTION).setValue(moreOptiondynamicValues);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Initial Prompt "+AppConstants.RD01_MN_0020+" :: "+initialPrompt);
			
		}
		else
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
		}
		
		}catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
		StackTrace.PrintException(e);
		}
		finally
		{initialPrompt = null;movieName = null;appName=null;key=null;dynamicList=null;bbMoviesInfo=null;moviesIdList=null;circleID=null;moviesId=null;langCodeBBMobiesList=null;circleIDBBMoviesList=null;moreOptiondynamicValues=null;key=null;}
		}

	public static void main(String[] args) {
	
		String check="1,2,3,4,5|6,";
		System.out.println(check);
	}
}
