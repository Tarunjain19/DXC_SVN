package flow.subflow.GlobalPrompt;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.util.AppConstant;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-11  08:43:15 PM
 */
public class CheckGPFLValue extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-11  08:43:15 PM
	 */
	public CheckGPFLValue() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:13 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:13 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:13 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "GlobalPromptCommon:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(145)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "GlobalPromptCommon:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:previous", true).setDebugId(143)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("GlobalPrompt-PreviousMenu", "PreviousMenu").setDebugId(140));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "GlobalPromptCommon:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:MainMenu", true).setDebugId(144)).evaluate(mySession)) {

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "IVR_CSP_Details:isPostpaid", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(454)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("GlobalPrompt-PostpaidMainMenu", "(Postpaid Main Menu)").setDebugId(455));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "IVR_CSP_Details:IsPrepaid", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(456)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("GlobalPrompt-PrepaidMainMenu", "(Prepaid Main Menu)").setDebugId(457));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("GlobalPrompt-ProspectMainMenu", "(Prospect Main Menu)").setDebugId(147));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "GlobalPromptCommon:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:repeat", true).setDebugId(148)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("appVariables:RCount").setDebugId(160));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition7", "appVariables:RCount", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "3", false).setDebugId(161)).evaluate(mySession)) {

					if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition8", "dmInputParameter:propertyFileName", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "propertyFileName:GPFeatureLevel", true).setDebugId(450)).evaluate(mySession)) {
						actions = new java.util.ArrayList(1);
						actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0092", true).setDebugId(449));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;

					} else {
						actions = new java.util.ArrayList(1);
						actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0089", true).setDebugId(453));
						if(evaluateActions(actions, mySession)) {
							return true;
						}
						actions = null;
					}


					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("GlobalPrompt-RepeatExceeded", "TriesExceed").setDebugId(163));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("GlobalPrompt-Repeat", "Repeat").setDebugId(150));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else {
				actions = new java.util.ArrayList(3);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0090", true).setDebugId(463));
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "global prompt tranfer reason :", "appVariables:transferReason").setDebugId(464));
				actions.add(new com.avaya.sce.runtime.Next("GlobalPrompt-agent", "agent").setDebugId(149));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag:NIFlag", "GlobalPromptCommon:ReturnCode", false).setDebugId(465));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition9", "dmInputParameter:propertyFileName", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "propertyFileName:GPFeatureLevel", true).setDebugId(444)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0091", true).setDebugId(443));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition10", "dmInputParameter:propertyFileName", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "propertyFileName:GPMenuLevel", true).setDebugId(445)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0087", true).setDebugId(447));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0088", true).setDebugId(448));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("GlobalPrompt-agent", "agent").setDebugId(152));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		/**Declaration**/
		String returnCode = AppConstant.EMPTY_STRING;
		String returnValue = AppConstant.EMPTY_STRING;
		ITraceInfo trace = mySession.getTraceOutput();
		
		/**Assign**/
		returnCode = mySession.getVariableField(IProjectVariables.GLOBAL_PROMPT_COMMON,IProjectVariables.GLOBAL_PROMPT_COMMON_FIELD_RETURN_CODE).getStringValue();
		trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Global Prompt Return Code :"+returnCode);
		
		/**Process**/
		if(AppConstant.Success.equalsIgnoreCase(returnCode)){
			
			returnValue = mySession.getVariableField(IProjectVariables.GLOBAL_PROMPT_COMMON,IProjectVariables.GLOBAL_PROMPT_COMMON_FIELD_VALUE).getStringValue();
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Global Prompt Return Value :"+returnValue);
			
			if(!AppConstant.repeat.equalsIgnoreCase(returnValue)){
				mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_RCOUNT).setValue(AppConstant.zero);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Repeat Count reseted");
			}
			
		}
	}
}
