package flow;

import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.TransferVDNInfo;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.televerification.loadproperty.LoadProperty;
import com.rcom.televerification.utils.Constants;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.prepaid.report.IVRREPORTDATA.MENUDETAILS.MENU;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-02  02:04:28 PM
 */
public class SetTransferData extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-02  02:04:28 PM
	 */
	public SetTransferData() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		String strDataCardFlag = null;
		String strReasonCode = null;
		String strTransferVDN = null;
		String strInitialAudios = null;
		TransferVDNInfo transferVDNInfo = null;
		IVRDataBean ivrDataBean = null;
		GetReportObject getReportObject = null;
		IVRREPORTDATA ivrreportdata = null;
		CALLINFO callInfo = null;
		ITraceInfo info = null;
		String last5Menu ="";
		ITraceInfo trace = null;
		String strUUI = "";
		String menuID = "";
		String strANI = "";
		String strDNIS = "";
		String strverifyMDN = "";
		
		/**Assigning the trace object**/
		info = mySession.getTraceOutput();
		
		/** getting the IVRData bean from session**/
		ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDataBean);
		
		/**Deciding the transfer flow**/
		strDataCardFlag = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_IS_DATA_CARD).getStringValue();
		info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DataCard flag:"+strDataCardFlag);
		if(strDataCardFlag.equalsIgnoreCase("Y")){
			strInitialAudios = LoadProperty.getivrconfigProp(Constants.TELV_PA_0008);
		}
		else
		{
			strInitialAudios = LoadProperty.getivrconfigProp(Constants.TELV_PA_0010);
		}
		mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_INITIAL_PROMPT).setValue(strInitialAudios);
		
		strReasonCode = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_TRANSFER_REASON_CODE).getStringValue();
		strTransferVDN = LoadProperty.getivrconfigProp(strReasonCode);
		if((strTransferVDN.equalsIgnoreCase(null)) ||(strTransferVDN == null)){
			strTransferVDN = LoadProperty.getivrconfigProp(Constants.DEFAULT);
		}
		mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_TRANSFER_VDN).setValue(strTransferVDN);
		

		getReportObject = ivrDataBean.getGetReportObject();
		ivrreportdata = getReportObject.getIvrreportdata();
		callInfo = ivrreportdata.getCALLINFO();
		trace = mySession.getTraceOutput();

		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Menu:"+ivrreportdata.getMENUDETAILS().getMENU());
		List<MENU> menuList = ivrreportdata.getMENUDETAILS().getMENU();
		
		if(menuList  !=null){
			
			for (int i = menuList.size(); (i> (menuList.size()-5)) && (i!=0); i-- ){
				menuID = menuList.get((i-1)).getMENUID();
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "menu ID :"+menuID);
				last5Menu = last5Menu + menuID+"|";
			}
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Last 5 menu accessed :"+last5Menu);
		}else{
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "No Menu accessed");
		}
		
		strANI = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		strDNIS = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
		strverifyMDN = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_VERIFY_MDN).getStringValue();

		info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Caller Type in TransferVDN :"+mySession.getVariableField(IProjectVariables.CALLER_TYPE_FLAG).getStringValue());
		
		if( mySession.getVariableField(IProjectVariables.CALLER_TYPE_FLAG).getStringValue().equalsIgnoreCase(Constants.prepaid)||mySession.getVariableField(IProjectVariables.CALLER_TYPE_FLAG).getStringValue().equalsIgnoreCase(Constants.postpaid))
		
		{	
			strUUI = strANI+"|"+strDNIS+"|"+mySession.getCurrentLanguage()+"|"+strANI+"|"+last5Menu+"|"+strReasonCode;
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "In mobile transfer");
		}
			else
			{
		strUUI = strANI+"|"+strDNIS+"|"+mySession.getCurrentLanguage()+"|"+strverifyMDN+"|"+last5Menu+"|"+strReasonCode;
		info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "In datacard transfer");
			}
		mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_UUI_DATA).setValue(strUUI);
		
		info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "UUI data:"+strUUI);
		
		transferVDNInfo = new TransferVDNInfo();
		transferVDNInfo.setAppName(LoadProperty.getivrconfigProp(Constants.ApplicationName));
		transferVDNInfo.setCircle(mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_CIRCLE).getStringValue());
		transferVDNInfo.setCallType("4");
		transferVDNInfo.setCustomerSegment("3");
		transferVDNInfo.setLanguage(mySession.getCurrentLanguage());
		transferVDNInfo.setTransferReasonCode(strReasonCode);
		
		transferVDNInfo = IVRDBServiceInstance.getIVRDBInstance().getTransferVDN(ivrDataBean, transferVDNInfo);
		
		callInfo.setHOWCALLENDED("TRANSFER");
		if(transferVDNInfo.getTransferVDN1()!=null){
			callInfo.setAGENTEXTN(transferVDNInfo.getTransferVDN1());
			callInfo.setAGENTID(transferVDNInfo.getTransferVDN1());
			callInfo.setTRANSFERVDN(transferVDNInfo.getTransferVDN1());
		}else{
			
		}
		if(transferVDNInfo.getSkillName()!=null)
			callInfo.setSKILLNAME(transferVDNInfo.getSkillName());
		
		callInfo.setUUIDATA(strUUI);
		callInfo.setTRANSCODE(strReasonCode);
		callInfo.setDISPOSITION("XA");
		callInfo.setCALLENDREASON("TRANSFER");
		 mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_UUI_DATA).setValue(strUUI);
		ivrreportdata.setCALLINFO(callInfo);
		info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer VDN Key"+mySession.getCurrentLanguage()+Constants.UNDERSCORE+Constants.DEFAULT_VDN);
		if(transferVDNInfo.getTransferVDN1()==null){
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "No transfer VDN from DB");
			 mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_TRANSFER_VDN).setValue(LoadProperty.getivrconfigProp(mySession.getCurrentLanguage()+Constants.UNDERSCORE+Constants.DEFAULT_VDN));
			 callInfo.setTRANSFERVDN(LoadProperty.getivrconfigProp(mySession.getCurrentLanguage()+Constants.UNDERSCORE+Constants.DEFAULT_VDN));
		}else{
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_TRANSFER_VDN).setValue(transferVDNInfo.getTransferVDN1());
			
		}
		
		info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer VDN from DB"+transferVDNInfo.toString());
		
		
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-DEC-28  01:09:53 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Transfer_TELV_PA_0008_TELV_PA_0010", "Default");
		next.setDebugId(1303);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-DEC-28  01:09:53 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-DEC-28  01:09:53 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(4);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "UUI DATA PLAIN :", "CallData:uuiData").setDebugId(2069));
		actions.add(new com.avaya.sce.runtime.varoperations.PrepareAAI("Shared", "session:ucid", "CallData:uuiData", "UUIData").setDebugId(2067));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "UUI Data :", "UUIData").setDebugId(2068));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
