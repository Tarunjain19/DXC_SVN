package flow.subflow.Prepaid;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.OnlinePaymentCheck;
import com.rcom.prepaid.resource.IVRDBServiceInstance;
import com.servion.hsd.utils.AppConstant;
import com.servion.hsd.utils.StackTrace;
import com.servion.util.IVRDataBean;


import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-15  03:07:33 PM
 */
public class Check_Onlinepayment extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-15  03:07:33 PM
	 */
	public Check_Onlinepayment() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:03 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:03 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:03 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Buy the Pack Host Details", "AppVariables:HostResult").setDebugId(7980));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Online Payment Flag", "Flag:OnlinePaymentEnabled").setDebugId(7981));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(7982)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:OnlinePaymentEnabled", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:Y", true).setDebugId(7983)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Prepaid-BuyPackMenu", "success").setDebugId(7984));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:HSDI_TR_0048", false).setDebugId(7986));
				actions.add(new com.avaya.sce.runtime.Next("Prepaid-Transfer", "agent").setDebugId(7987));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:HSDI_TR_0048", false).setDebugId(11280));
			actions.add(new com.avaya.sce.runtime.Next("Prepaid-Transfer", "LinkDown").setDebugId(7990));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {

		
		/** Declaration **/
		String onlineFlag = AppConstant.EMPTY_STRING,hostOutput = AppConstant.EMPTY_STRING;
		String appName = AppConstant.EMPTY_STRING,circleID = AppConstant.EMPTY_STRING;
		
		ITraceInfo trace = null;
		IVRDataBean objIVRData = null;
		OnlinePaymentCheck objOnlinePaymentCheck = null;

		
		/**Assign**/
		objIVRData = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
		
		appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
		circleID = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
		trace = mySession.getTraceOutput();
		trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "circle ID :"+ circleID);
		
		try{
			/**DB**/
			objOnlinePaymentCheck = new OnlinePaymentCheck();
			objOnlinePaymentCheck.setAppName(appName);
			objOnlinePaymentCheck.setCircleId(circleID);
			objOnlinePaymentCheck= IVRDBServiceInstance.getInstance().checkOnlinePaymentFlag(objIVRData, objOnlinePaymentCheck);
			
			if(objOnlinePaymentCheck!=null){
				/**Response **/
				onlineFlag = objOnlinePaymentCheck.getStatus();
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "online Flag :"+ onlineFlag);		
				mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_ONLINE_PAYMENT_ENABLED).setValue(onlineFlag);

				hostOutput = AppConstant.Success;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Host Output :"+ hostOutput);
			
			}
			}catch (Exception e) {
				trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in Online Payment :" +e);
				StackTrace.PrintException(e);
			}
		mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostOutput);
	
	}
}
