package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.IVRRoutingInfo;
import com.servion.hsd.utils.AppConstant;
import com.servion.hsd.utils.StackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-MAR-01  11:55:20 AM
 */
public class CheckUUIdata extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-MAR-01  11:55:20 AM
	 */
	public CheckUUIdata() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	
	
	
	
	
	
	
	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo trace = mySession.getTraceOutput();
		

		String rUUIData,convertedUUIData;
		String prefix,postfix;
		String ani,dnis,currentLanguage,last5Menu,connectionType,IsVarified,datacardnumber,CircleId;
		//ITraceInfo trace = null;
		String[] arrrUUIData;
		String[] arrUUIDATA;
		String appName= AppConstant.EMPTY_STRING;
		
		
		String defaultLanguage = AppConstant.EMPTY_STRING,Language = AppConstant.EMPTY_STRING;
		String circleID = AppConstant.EMPTY_STRING,trunkID = AppConstant.EMPTY_STRING,propertiesLocation = AppConstant.EMPTY_STRING,propetyKey = AppConstant.EMPTY_STRING;
		String hostOutput = AppConstant.ERROR,key=AppConstant.EMPTY_STRING;
		IVRRoutingInfo objIVRRoutingInfo = null;
		IVRDataBean objIVRDataBean = null;
		
		
		appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
		
		mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE_LIST).setValue(Language);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language List :"+Language);
		
		/**Assign Circle ID **/
		mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).setValue(circleID);
		mySession.getVariableField(IProjectVariables.POSTPAID__ROUTING_INFO, IProjectVariables.POSTPAID__ROUTING_INFO_FIELD_CIRCLE).setValue(circleID);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"circle ID :"+circleID +"trunkID :" + trunkID );
		
		
		
		//trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"DNIS :"+dnis +" - App Name :" + appName);


		//ITraceInfo trace = mySession.getTraceOutput();
		
		
		try {
			trace = mySession.getTraceOutput();
			rUUIData = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_UUI).getStringValue();
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Session UUI :"+rUUIData);
			
			
			prefix = AppConstant.startPart;
			postfix = AppConstant.endPart;
			
			if(rUUIData != null && !AppConstant.EMPTY_STRING.equalsIgnoreCase(rUUIData)){
				arrrUUIData = rUUIData.split(prefix);
				if(arrrUUIData.length>1){
					rUUIData = arrrUUIData[1];
					rUUIData = rUUIData.split(postfix)[0];
				    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Session UUI after spliting:"+rUUIData);
					
					StringBuilder output = new StringBuilder();
				    for (int i = 0; i < rUUIData.length(); i+=2) {
				        String str = rUUIData.substring(i, i+2);
				        output.append((char)Integer.parseInt(str, 16));
				    }
				    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Converted data :"+output);
				    convertedUUIData = output.toString();
				    
				    arrUUIDATA = convertedUUIData.split("\\|");
				    
				    /*
				     * 
				     * ani,
						dnis,
						currentLanguage,
						last5Menu 
						connectionType,
						IsVarified,
						datacardnumber;
						
						ani+AppConstant.PIPE+dnis+AppConstant.PIPE+currentLanguage +AppConstant.PIPE+connectionType+AppConstant.PIPE+IsVarified+AppConstant.PIPE+datacardnumber;

				     * 
				     * 
				     */
				    
				    
				    if(arrUUIDATA.length>1){
				    	
				    	
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI ani :" + arrUUIDATA[0]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI DNIS :" + arrUUIDATA[1]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"currentLanguage :" + arrUUIDATA[2]);
				    	//trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI last5Menu :" + arrUUIDATA[3]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI connectionType :" + arrUUIDATA[3]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"IsVarified :" + arrUUIDATA[4]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Datacardnumber :" + arrUUIDATA[5]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"CircleID :" + arrUUIDATA[6]);
				    	
				    	
				    	
				    	
				    	ani = arrUUIDATA[0];
				    	dnis = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
				    	currentLanguage = arrUUIDATA[2];
				    	//last5Menu =  arrUUIDATA[3];
				    	connectionType= arrUUIDATA[3];
				    	IsVarified =arrUUIDATA[4];
				    	datacardnumber= arrUUIDATA[5];
				    	CircleId=arrUUIDATA[6];
				    	
				    	mySession.getVariableField(IProjectVariables.LANGUAGE_IN_UUI).setValue(currentLanguage);
				    	
				    	appName = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(AppConstant.APP_NAME);
				    	
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"AppName :" + appName);
				    	
				    	
				    	/**Dependency for DM**/
				    	
				    	if(defaultLanguage!=null && !AppConstant.EMPTY_STRING.equals(defaultLanguage))
							mySession.setCurrentLanguage(currentLanguage);
						
						propetyKey = AppConstant.PROPERTY+appName+AppConstant.SEPERATOR_UNDERSCORE+currentLanguage;
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"propety Key :"+propetyKey);
						propertiesLocation = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(propetyKey);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location :"+propertiesLocation);
						
						if(propertiesLocation!=null && !AppConstant.N.equalsIgnoreCase(propertiesLocation))
							mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertiesLocation);
						else{
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
							propertiesLocation = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(AppConstant.DEFAULT_PROPERTY_LOCATION);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"default properties Location :"+propertiesLocation);
							mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertiesLocation);
						}
						
						/** Dependency  for DM completed here**/
				    	
				    	
				    	
				    	mySession.getVariableField(IProjectVariables.APP__NAME).setValue(appName);
				    	
				    	mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).setValue(CircleId);
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).setValue(ani);
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).setValue(dnis);
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_CURRENTLANGUAGE).setValue(currentLanguage);
				    	mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).setValue(datacardnumber);
				    	mySession.getVariableField(IProjectVariables.IS_VERIFIED).setValue(IsVarified);
				    	mySession.getVariableField(IProjectVariables.CONNECTION_TYPE_RETUNED_AT_UUI_IS_PREPAID).setValue(connectionType);
				    	mySession.getVariableField(IProjectVariables.GET_DATA_CARD, IProjectVariables.GET_DATA_CARD_FIELD_RETURN_CODE).setValue(IsVarified);
				    	mySession.getVariableField(IProjectVariables.GET_DATA_CARD, IProjectVariables.GET_DATA_CARD_FIELD_VALUE).setValue(datacardnumber);

				    	
				    	
				    	//mySession.getVariableField(IProjectVariables.APP_NAME).setValue(appName);
				    }
				}else{
					arrrUUIData = rUUIData.split(";");
					rUUIData = arrrUUIData[0];
				    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Session UUI after spliting:"+rUUIData);
					
					StringBuilder output = new StringBuilder();
				    for (int i = 0; i < rUUIData.length(); i+=2) {
				        String str = rUUIData.substring(i, i+2);
				        output.append((char)Integer.parseInt(str, 16));
				    }
				    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Converted data :"+output);
				    convertedUUIData = output.toString();
				    
				    arrUUIDATA = convertedUUIData.split("\\|");
				    
				    if(arrUUIDATA.length>1){
				    	
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Else Part executed   :");
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI ani :" + arrUUIDATA[0]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI DNIS :" + arrUUIDATA[1]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"currentLanguage :" + arrUUIDATA[2]);
				    	//trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI last5Menu :" + arrUUIDATA[3]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"UUI connectionType :" + arrUUIDATA[3]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"IsVarified :" + arrUUIDATA[4]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Datacardnumber :" + arrUUIDATA[5]);
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"CircleID :" + arrUUIDATA[6]);
				    	
				    
				    	
				    	
				    	ani = arrUUIDATA[0];
				    	dnis = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
				    	currentLanguage = arrUUIDATA[2];
				    //	last5Menu =  arrUUIDATA[3];
				    	connectionType= arrUUIDATA[3];
				    	IsVarified =arrUUIDATA[4];
				    	datacardnumber= arrUUIDATA[5];
				    	CircleId=arrUUIDATA[6];
				    	
				    	
				    	
				    	appName = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(AppConstant.APP_NAME);
				    	
/**Dependency for DM**/
				    	
				    	if(defaultLanguage!=null && !AppConstant.EMPTY_STRING.equals(defaultLanguage))
							mySession.setCurrentLanguage(currentLanguage);
						
						propetyKey = AppConstant.PROPERTY+appName+AppConstant.SEPERATOR_UNDERSCORE+currentLanguage;
						
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"propety Key :"+propetyKey);
						propertiesLocation = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(propetyKey);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location :"+propertiesLocation);
						
						if(propertiesLocation!=null && !AppConstant.N.equalsIgnoreCase(propertiesLocation))
							mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertiesLocation);
						else{
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
							propertiesLocation = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(AppConstant.DEFAULT_PROPERTY_LOCATION);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"default properties Location :"+propertiesLocation);
							mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertiesLocation);
						}
						
						/** Dependency  for DM completed here**/
				    	
				    	mySession.getVariableField(IProjectVariables.APP__NAME).setValue(appName);
				    	
				    	trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"AppName :" + appName);
				    	mySession.getVariableField(IProjectVariables.LANGUAGE_IN_UUI).setValue(currentLanguage);
				    	
				    	mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).setValue(CircleId);
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).setValue(ani);
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).setValue(dnis);
				    	mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_CURRENTLANGUAGE).setValue(currentLanguage);
				    	mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).setValue(datacardnumber);
				    	mySession.getVariableField(IProjectVariables.IS_VERIFIED).setValue(IsVarified);
				    	mySession.getVariableField(IProjectVariables.CONNECTION_TYPE_RETUNED_AT_UUI_IS_PREPAID).setValue(connectionType);
				    	mySession.getVariableField(IProjectVariables.GET_DATA_CARD, IProjectVariables.GET_DATA_CARD_FIELD_RETURN_CODE).setValue(IsVarified);
				    	mySession.getVariableField(IProjectVariables.GET_DATA_CARD, IProjectVariables.GET_DATA_CARD_FIELD_VALUE).setValue(datacardnumber);
				    	
				    	
				    	//mySession.getVariableField(IProjectVariables.a).setValue(appName);
				    }
				}
				
			
			}
		} catch(Exception e){
			
			mySession.getVariableField(IProjectVariables.UUIEXECEPTION).setValue("Yes");
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"ERROR in UUI Data :"+e);
			StackTrace.PrintException(e);
		}
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:54 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Capture_ANI_DNIS_BC", "Default");
		next.setDebugId(9989);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:54 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:54 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "session:uui", com.avaya.sce.runtime.Expression.IS_EMPTY).setDebugId(9996)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Fresh Call without UUI", "").setDebugId(10027));
			actions.add(new com.avaya.sce.runtime.Next("Capture_ANI_DNIS_BC", "NoUui").setDebugId(9997));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "UUIExeception", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Yes", false).setDebugId(10059)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Capture_ANI_DNIS_BC", "ExeceptionUUIparsing").setDebugId(10060));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "UUI Field Has data", "").setDebugId(10028));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "AppVariables:ANI", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "NA", false).setDebugId(10008)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "UUI data has Data Card Number.: ", "AppVariables:ANI").setDebugId(10029));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "ConnectionTypeRetunedAtUuiIsPrepaid", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Yes", false).setDebugId(10009)).evaluate(mySession)) {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Prepaid call", "").setDebugId(10030));
					actions.add(new com.avaya.sce.runtime.Next("Capture_ANI_DNIS_BC", "GotoPrePaid").setDebugId(10010));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "ConnectionTypeRetunedAtUuiIsPrepaid", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "NA", false).setDebugId(10033)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Capture_ANI_DNIS_BC", "ConnectionTypeNull").setDebugId(10034));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition6", "ConnectionTypeRetunedAtUuiIsPrepaid", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "No", false).setDebugId(10036)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Capture_ANI_DNIS_BC", "Postpaid").setDebugId(10037));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(3);
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Can not decide ConnnectionType", "").setDebugId(10031));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("NoDataInDataCardNumber", "True", true).setDebugId(10067));
					actions.add(new com.avaya.sce.runtime.Next("Capture_ANI_DNIS_BC", "GotoCheckConnection").setDebugId(10012));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else {
				actions = new java.util.ArrayList(3);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "UUI without DataCard", "").setDebugId(10032));
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("NoDataInDataCardNumber", "True", true).setDebugId(10068));
				actions.add(new com.avaya.sce.runtime.Next("Capture_ANI_DNIS_BC", "DataCardValueisEmpty").setDebugId(10014));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
