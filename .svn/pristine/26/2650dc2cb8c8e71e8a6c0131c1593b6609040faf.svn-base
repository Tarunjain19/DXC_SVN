package flow;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;

import org.apache.log4j.Logger;

import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.DBLoadOnStartUp;
import com.rcom.rdtv.util.LoadAppData;
import com.rcom.rdtv.util.PeriodicChecker;
import com.servion.util.AppProperties;




/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2015-MAY-26  11:24:31 AM
 */
public class LoadOnStartup extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-26  11:24:31 AM
	 */
	public LoadOnStartup() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Voice Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2015-MAY-26  11:24:31 AM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// : Add your code here!

	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:37 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("Capture_ANI_DNIS_BC", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
	
public Logger logger = Logger.getLogger("LoadOnStartup.class"); 
	
	@Override
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
		String appNames = AppConstants.EMPTY_STRING;
		
		String path = this.getServletContext().getInitParameter(AppConstants.IVR_CONFIG_PATH);
		String ivrConfig = this.getServletContext().getInitParameter(AppConstants.IVR_CONFIG);
		String hostConfig = this.getServletContext().getInitParameter(AppConstants.HOST_CONFIG);
		
		logger.debug("RDTV 9001 IVR_CONFIG PATH :: "+path);
		logger.debug("RDTV 9001 IVR_CONFIG PROPERTIES NAME :: "+ivrConfig);
		logger.debug("RDTV 9001 IVR_HOST_CONFIG PROPERTIES NAME :: "+hostConfig);
		AppConstants.IVR_CONFIG_PROPERTIES = ivrConfig;
		AppConstants.IVR_HOST_PROPERTIES = hostConfig;
		AppProperties.setInstance(ivrConfig, path);
		AppProperties.setInstance(hostConfig, path);
		
		logger = Logger.getLogger(AppConstants.LOGGER_NAME);
		
		/**Load Language Code**/
		LoadAppData.LanguageCode(logger);
		LoadAppData.LanguageCodeExternal(logger);
		
		appNames = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(AppConstants.APP_NAME);
		DBLoadOnStartUp objDBLoadOnStartUp = DBLoadOnStartUp.getInstance();
		objDBLoadOnStartUp.loadHotFlashMessage(appNames);
		objDBLoadOnStartUp.loadBBMoviesMessage(appNames);
		objDBLoadOnStartUp.loadBasePacksInfo(appNames);
		//objDBLoadOnStartUp.loadPackInfoMovieMessage(appNames);
		objDBLoadOnStartUp.loadPackInfoVASMessage(appNames);
		objDBLoadOnStartUp.loadTopUpMainCategoryMessage(appNames);
		objDBLoadOnStartUp.loadPushSMSText(appNames);
		//objDBLoadOnStartUp.loadTopUpSubCategoryMessage(appNames);
		//objDBLoadOnStartUp.loadCancelPacksInfo(appNames);
		
		
		
		Thread myThread = new PeriodicChecker();
		myThread.start();
		logger.info("Load on startup End");
		
		/** Periodic Update for Block Buster Movies **//*
		UpdateBlockBuster updateBlockBuster = new UpdateBlockBuster();
		updateBlockBuster.updateOfferCode();*/
	}
}
