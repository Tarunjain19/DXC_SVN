package flow;

import java.net.InetAddress;
import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.Constants;
import com.rcom.vas.model.IVRCspInfo;
import com.rcom.vas.resource.IVRDBServiceInstance;
import com.rcom.vas.model.IVRVasInfo;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.rcom.Data.utils.DynamicMenu;
import com.servion.util.IVRDataBean;
import com.rcom.Data.utils.StackTrace;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-NOV-25  04:00:33 PM
 */
public class IVR_CSP_Check extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-NOV-25  04:00:33 PM
	 */
	public IVR_CSP_Check() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-NOV-28  03:23:22 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Welcome_Ann", "Default");
		next.setDebugId(3258);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-NOV-28  03:23:22 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-NOV-28  03:23:22 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		/** Declaration **/
		String  callerANI = Constants.BLANK,preferedLang = Constants.BLANK,propetyKey= Constants.BLANK;
		String  barringCode = Constants.BLANK,key = Constants.BLANK,appName= Constants.BLANK,propertiesLocation = Constants.BLANK;
		String  callerType = Constants.BLANK,dataType = Constants.BLANK,service_Type = Constants.BLANK;
		String hostOutput = Constants.ERROR;
		IVRDataBean objIVRData = null;
		IVRCspInfo objIVRCspInfo = null;
		ITraceInfo trace =null;
		String IP = Constants.BLANK;
		GetReportObject objGetReportObject = null;
		IVRREPORTDATA objIVRREPORTDATA= null;
		CALLINFO objCALLINFO = null;
		String circleLangCode = Constants.BLANK;
		
		/**Assign**/
		trace = mySession.getTraceOutput();
		callerANI = mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_ANI).getStringValue();
		circleLangCode = mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_REGIONAL_LANG).getStringValue();
		
		objIVRData = (IVRDataBean) mySession.getProperty(Constants.IVRDataBean);
		appName = mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_APP_NAME).getStringValue();
		objIVRCspInfo = new IVRCspInfo();
		objIVRCspInfo.setMdn(callerANI);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"caller ANI :"+callerANI);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"IVRData Bean Object :"+objIVRData);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"appName :"+appName);
		
		try{
		
			IP = InetAddress.getLocalHost().getHostAddress();	
			objGetReportObject = objIVRData.getGetReportObject(); 
			objIVRREPORTDATA = objGetReportObject.getIvrreportdata();
			objCALLINFO = objIVRREPORTDATA.getCALLINFO();
			
			/**DB**/
			
				objIVRCspInfo=IVRDBServiceInstance.getInstance().getIVRCSPInfo(objIVRData, objIVRCspInfo);
					
			if(objIVRCspInfo!=null)
			{
				
				
				/***Preferred Language**/
				preferedLang=objIVRCspInfo.getPreLang();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"prefered Lang :"+preferedLang);
				
				if(preferedLang!=null && !Constants.BLANK.equals(preferedLang) && !Constants.NA.equalsIgnoreCase(preferedLang)){
					
					/*key = Constants.Language_Code+preferedLangCode;
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language_Code Key:"+key);
					preferedLang=(String) AppDataMap.getInstance(appName).getAppData(key);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Preferred Language :"+preferedLang);*/
						if(circleLangCode != null && circleLangCode.contains(preferedLang)){
							mySession.setCurrentLanguage(preferedLang);
							propetyKey = Constants.PROPERTY+appName+Constants.UNDERSCORE+preferedLang;
							
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"propety Key :"+propetyKey);
							propertiesLocation = AppProperties.GetInstance(Constants.VAS_CONFIG).getIVRProp(propetyKey);
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location :"+propertiesLocation);
							
							if(propertiesLocation!=null && !Constants.N.equalsIgnoreCase(propertiesLocation))
								mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(propertiesLocation);
							else
								trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
							
							mySession.getVariableField(IProjectVariables.IVR__CSP,IProjectVariables.IVR__CSP_FIELD_PREFERRED_LANG).setValue(preferedLang);
							mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_PREFERRED_LANG).setValue(preferedLang);
							objCALLINFO.setLANGCODE(preferedLang);
						}else{
							trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Preferred Language is not available in Circle"+circleLangCode);
							LanguageSelectionMenu(mySession);
						}
				
				}else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language Selection Menu Inital Prompt Start");
					LanguageSelectionMenu(mySession);
				}
				
							
			}else
				{ //When object is null
				
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language Selection Menu Inital Prompt Start");
					LanguageSelectionMenu(mySession);
					
/*					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Intelligent Layer dataType :"+dataType);
					mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_DATATYPE).setValue(Constants.NA);
				
					mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_CALLER_TYPE).setValue(Constants.NA);
					mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_HNICALLER).setValue(Constants.FALSE);
					mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_POST_PAID_CALLER).setValue(Constants.FALSE);*/
					
				}
		
		hostOutput = Constants.Success;
		
		
		}catch (Exception e) {
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in IVR CSP DB Hit :" +e);
			StackTrace.PrintException(e);
		}
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Status :" +hostOutput);
		mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_HOSTRESULT).setValue(hostOutput);
	}
	
	public void LanguageSelectionMenu (SCESession mySession){
		
		/** Declaration **/
		String initialPrompt = Constants.BLANK,grammarValue = Constants.BLANK,circleLangCode = Constants.BLANK;
		String dynamicWaves =  Constants.BLANK,appName = Constants.BLANK,key = Constants.BLANK,circleLanguage = Constants.BLANK,langKey = Constants.BLANK;
		String[] arrayLangCode = null;
		ArrayList<String> arrLanguage=null;
		ITraceInfo trace =null;
		
		/**Assign**/
		trace = mySession.getTraceOutput();
		appName = mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_APP_NAME).getStringValue();
		key = appName+Constants.HYPEN+Constants.MN_001;
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"application Name :"+appName);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language initial Prompt Key :"+key);
		
		dynamicWaves = AppProperties.GetInstance(Constants.DYN_MENU).getIVRProp(key);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language initial Prompt :"+dynamicWaves);
		arrLanguage = new ArrayList<>();
		/** Form Dynamic Initial Prompt**/
		circleLangCode = mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_REGIONAL_LANG).getStringValue();
		
		if(circleLangCode!=null){
			arrayLangCode = circleLangCode.split(Constants.COMMA);
			
			for(int i = 0;i<arrayLangCode.length;i++){
				/*key = Constants.Language_Code+arrayLangCode[i];
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language_Code Key:"+key);*/
				circleLanguage=arrayLangCode[i];
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Circle Language : "+i+" :"+circleLanguage);
				langKey = Constants.LANG_+i;
				dynamicWaves = dynamicWaves.replaceAll(langKey,circleLanguage);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic Wave :" +dynamicWaves);
				arrLanguage.add(circleLanguage+Constants.wave);
			}
			
			/** Form Initial Prompt**/
			String count = String.valueOf(arrLanguage.size());
			DynamicMenu objDynamicMenu = new DynamicMenu();
			initialPrompt=objDynamicMenu.playPrompt(arrLanguage, dynamicWaves, count, trace);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Menu Option : "+circleLangCode);
			
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MORE_OPTION_COUNT).setValue(count);
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MENU_OPTION).setValue(circleLangCode);
			
		}
		
	}
}
