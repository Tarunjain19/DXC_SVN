package flow.subflow.Prepaid_Account_Information;

import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.triplefive.utils.AppConstant;
import com.servion.triplefive.utils.Constants;
import com.servion.triplefive.utils.DynamicMenu;
import com.servion.triplefive.utils.PrintStackTrace;
import com.servion.util.AppProperties;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-11  06:10:04 PM
 */
public class Set_TGSM_PA_0024 extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-11  06:10:04 PM
	 */
	public Set_TGSM_PA_0024() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:59 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Prepaid_Account_Information-TGSM_PA_0024", "Default");
		next.setDebugId(1129);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:59 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:59 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
	 
		ITraceInfo trace = mySession.getTraceOutput();
		String initialPrompt = AppConstant.EMPTY_STRING,threeGNetBalance = null,threeGNetBalanceExpiryDate = null,threeGFairUsageBalance = null,threeGFairUsageBalanceExpiryDate = null;
		String twoGNetBalance = null,twoGNetBalanceExpiryDate = null,cdmaUsageBalance = null,cdmaUsageBalanceExpiryDate = null,threeGInitialPrompt = null,twoGInitialPrompt = null;
		String appName = AppConstant.EMPTY_STRING,key = AppConstant.EMPTY_STRING,dynamicPrompt = AppConstant.EMPTY_STRING;
		String[] arrDynamicPrompt = null;
		IVariable dataBalance = null;
		ArrayList<String> dynamicValueList = null;
		//initial prompt processing...
		try
		{
			dataBalance = mySession.getVariable(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY);
			threeGFairUsageBalance = dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GFAIR_USAGE_BALANCE).getStringValue();
			threeGFairUsageBalanceExpiryDate = dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GFAIR_USAGE_BALANCE_EXPIRY_DATE).getStringValue();
			threeGNetBalance = dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GNET_BALANCE).getStringValue();
			threeGNetBalanceExpiryDate = dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_THREE_GNET_BALANCE_EXPIRY_DATE).getStringValue();
			cdmaUsageBalance = dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_CDMA_USAGE_BALANCE).getStringValue();
			cdmaUsageBalanceExpiryDate = dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_CDMA_BALANCE_EXPIRY_DATE).getStringValue();
			
			twoGNetBalance = dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_TWO_GNET_BALANCE).getStringValue();
			twoGNetBalanceExpiryDate = dataBalance.getComplexVariable().getField(IProjectVariables.PREPAID__DATA_BALANCE_AND_VALIDITY_FIELD_TWO_GNET_BALANCE_EXPIRY_DATE).getStringValue();
			
			appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGFairUsageBalance:: "+threeGFairUsageBalance);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGFairUsageBalanceExpiryDate:: "+threeGFairUsageBalanceExpiryDate);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGNetBalance:: "+threeGNetBalance);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response ThreeGNetBalanceExpiryDate:: "+threeGNetBalanceExpiryDate);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response cdmaUsageBalance:: "+cdmaUsageBalance);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response cdmaUsageBalanceExpiryDate:: "+cdmaUsageBalanceExpiryDate);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response TwoGNetBalance:: "+twoGNetBalance);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Data Balance Host response TwoGNetBalanceExpiryDate:: "+twoGNetBalanceExpiryDate);
		
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "initial Prompt :: "+initialPrompt);
			
			appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Application Name :: "+appName);
			
			if(!appName.contains(AppConstant.CDMA)){
				key = appName +AppConstant.SEPERATOR_HYPEN+ AppConstant.PA_0024;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Key :: "+key);
				dynamicPrompt = AppProperties.GetInstance(Constants.AUDIO_CONFIG).getIVRProp(key);
				arrDynamicPrompt = dynamicPrompt.split(AppConstant.SEPERATOR_PIPE);
				dynamicValueList=new ArrayList<String>();
				
				if(threeGNetBalance!=null && threeGNetBalanceExpiryDate!=null && !AppConstant.EMPTY_STRING.equals(threeGNetBalance) && !AppConstant.EMPTY_STRING.equals(threeGNetBalanceExpiryDate)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "threeGNetBalance ");
					initialPrompt = arrDynamicPrompt[0] + AppConstant._Star;
					dynamicValueList.add(threeGNetBalance);
					dynamicValueList.add(threeGNetBalanceExpiryDate);
				}else{
					dynamicValueList.add(AppConstant.EMPTY_STRING);
					dynamicValueList.add(AppConstant.EMPTY_STRING);
				}
				
				if(threeGFairUsageBalance!=null && threeGFairUsageBalanceExpiryDate!=null && !AppConstant.EMPTY_STRING.equals(threeGFairUsageBalance) && !AppConstant.EMPTY_STRING.equals(threeGFairUsageBalanceExpiryDate)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "threeGFairUsageBalance ");
					initialPrompt =initialPrompt + arrDynamicPrompt[1] + AppConstant._Star;
					dynamicValueList.add(threeGFairUsageBalance);
					dynamicValueList.add(threeGFairUsageBalanceExpiryDate);
				}else{
					dynamicValueList.add(AppConstant.EMPTY_STRING);
					dynamicValueList.add(AppConstant.EMPTY_STRING);
				}
				
				
				if(twoGNetBalance!=null && twoGNetBalanceExpiryDate!=null && !AppConstant.EMPTY_STRING.equals(twoGNetBalance) && !AppConstant.EMPTY_STRING.equals(twoGNetBalanceExpiryDate)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "twoGNetBalance ");
					initialPrompt =initialPrompt+ arrDynamicPrompt[2] + AppConstant._Star;
					dynamicValueList.add(twoGNetBalance);
					dynamicValueList.add(twoGNetBalanceExpiryDate);
				}else{
					dynamicValueList.add(AppConstant.EMPTY_STRING);
					dynamicValueList.add(AppConstant.EMPTY_STRING);
				}
				
				
			
			initialPrompt = initialPrompt + arrDynamicPrompt[3];
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "dynamic Value List "+dynamicValueList.toString());
			
			}else{
				
				key = appName +AppConstant.SEPERATOR_HYPEN+ AppConstant.PA_0024 + AppConstant.SEPERATOR_UNDERSCORE+AppConstant.CDMA;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Key :: "+key);
				initialPrompt = AppProperties.GetInstance(Constants.AUDIO_CONFIG).getIVRProp(key);
				dynamicValueList=new ArrayList<String>();
				
				if(cdmaUsageBalance!=null && cdmaUsageBalanceExpiryDate!=null && !AppConstant.EMPTY_STRING.equals(cdmaUsageBalance) && !AppConstant.EMPTY_STRING.equals(cdmaUsageBalanceExpiryDate)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "cdmaUsageBalance ");
					dynamicValueList.add(cdmaUsageBalance);
					dynamicValueList.add(cdmaUsageBalanceExpiryDate);
				}else{
					dynamicValueList.add(AppConstant.EMPTY_STRING);
					dynamicValueList.add(AppConstant.EMPTY_STRING);
				}
			}
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "initial Prompt Data plan Announce:: "+initialPrompt);
			//int count = dynamicValueList.size()/2;
			DynamicMenu objDynamicMenu = new DynamicMenu();
			initialPrompt=objDynamicMenu.playPrompt(dynamicValueList, initialPrompt, AppConstant.NA, trace);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "initial Prompt Data plan Announce:: "+initialPrompt);
			mySession.getVariableField(IProjectVariables.PREPAID__DM_INPUT_PARAMETER, IProjectVariables.PREPAID__DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
		
			
		}
		catch(Exception e)
		{
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception in Data Plan Announce:: "+e);
			PrintStackTrace.PrintException(e);
		}
		finally
		{
				initialPrompt = null;
				threeGNetBalance = null;
				threeGNetBalanceExpiryDate = null;
				threeGFairUsageBalance = null;
				threeGFairUsageBalanceExpiryDate = null;
				twoGNetBalance = null;
				twoGNetBalanceExpiryDate = null;
				cdmaUsageBalance = null;
				cdmaUsageBalanceExpiryDate = null;
				threeGInitialPrompt = null;
				twoGInitialPrompt = null;
				dataBalance = null;
		}
		
	}
}
