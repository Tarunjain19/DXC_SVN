package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.ppp.model.MDN_RTN_Check;
import com.rcom.ppp.resource.IVRDBServiceInstance;
import com.rcom.util.AppConstants;
import com.rcom.util.StackTrace;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-16  10:34:28 AM
 */
@SuppressWarnings("serial")
public class CheckRTN extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-16  10:34:28 AM
	 */
	public CheckRTN() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JAN-24  02:14:44 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JAN-24  02:14:44 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JAN-24  02:14:44 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "IVR_CSP_Details:isPrepaid", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:Yes", true).setDebugId(4156)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Prepaid_MN", "Prepaid").setDebugId(4157));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "IVR_CSP_Details:isPostpaid", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:Yes", true).setDebugId(4159)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Postpaid_MN", "Postpaid").setDebugId(4160));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("OldProspect_MN", "Not RDN").setDebugId(4153));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		/**Declaration **/
		String ani = AppConstants.EMPTY_STRING,rTN = AppConstants.EMPTY_STRING;
		String serviceType = AppConstants.EMPTY_STRING,hostOutput = AppConstants.ERROR;
		MDN_RTN_Check mdn_RTN_Check = null;
		IVRDataBean objIVRDataBean = null;

		ITraceInfo trace = mySession.getTraceOutput();
		
		try {
			
			/**Assigning**/
			ani = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"ANI :"+ani);
			mdn_RTN_Check = new MDN_RTN_Check();
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstants.IVRDATABEAN);
			
			
			
			/**DB Hit**/
			mdn_RTN_Check.setMDN(ani);
			mdn_RTN_Check = IVRDBServiceInstance.getInstance().updateMdn_RTN_Check(objIVRDataBean, mdn_RTN_Check);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"MDN is RTN Check :" + mdn_RTN_Check);
			
			rTN = mdn_RTN_Check.getRTN();
			serviceType = mdn_RTN_Check.getServiceType();
			
			if(serviceType!=null && !serviceType.contains(AppConstants.NA)){
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Service Type :"+serviceType);
				mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_SERVICE_TYPE).setValue(serviceType);

				if(serviceType!=null && serviceType.contains(AppConstants.PRE)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Service Type ::"+AppConstants.PREPAID);
					mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_IS_PREPAID).setValue(AppConstants.Yes);
				}
				else if(serviceType!=null && serviceType.contains(AppConstants.POST)){
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Service Type ::"+AppConstants.POSTPAID);
					mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS,IProjectVariables.IVR__CSP__DETAILS_FIELD_IS_POSTPAID).setValue(AppConstants.Yes);
				}
				else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"MDN is RTN Check Object is null");
				}
			}
			
			else{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"MDN is Not RTN");
			}
			
			hostOutput = AppConstants.Success;

		} catch (Exception e) {
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in MDN Check :" +e);
			StackTrace.PrintException(e);
		}
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Status :" +hostOutput);
		mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostOutput);
	}

}
