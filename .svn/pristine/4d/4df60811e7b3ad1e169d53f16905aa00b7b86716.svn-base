package flow;

import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.util.AppConstant;
import com.servion.util.AppProperties;
import com.servion.util.DynamicMenu;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-MAR-31  12:39:40 PM
 */
public class ReadLanguage extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-MAR-31  12:39:40 PM
	 */
	public ReadLanguage() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		/** Declaration **/
		String initialPrompt = AppConstant.EMPTY_STRING,grammarValue = AppConstant.EMPTY_STRING,circleLangCode = AppConstant.EMPTY_STRING;
		String dynamicWaves =  AppConstant.EMPTY_STRING,appName = AppConstant.EMPTY_STRING,key = AppConstant.EMPTY_STRING,circleLanguage = AppConstant.EMPTY_STRING,langKey = AppConstant.EMPTY_STRING;
		String[] arrayLangCode = null;
		ArrayList<String> arrLanguage=null;
		ITraceInfo trace =null;
		
		/**Assign**/
		trace = mySession.getTraceOutput();
		appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
		key = appName+AppConstant.SEPERATOR_HYPEN+AppConstant.MN_0001;
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"application Name :"+appName);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language initial Prompt Key :"+key);
		
		dynamicWaves = AppProperties.GetInstance(AppConstant.DYN_MENU).getIVRProp(key);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language initial Prompt :"+dynamicWaves);
		arrLanguage = new ArrayList<>();
		/** Form Dynamic Initial Prompt**/
		
		//mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE_LIST).setValue(AppConstant.ENG);
		
		circleLangCode = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(AppConstant.DT_Language_Code);
		
		if(circleLangCode!=null){
			arrayLangCode = circleLangCode.split(AppConstant.SEPERATOR_COMMA);
			
			for(int i = 0;i<arrayLangCode.length;i++){
				/*key = AppConstant.Language_Code+arrayLangCode[i];
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language_Code Key:"+key);*/
				circleLanguage=arrayLangCode[i];
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Circle Language : "+i+" :"+circleLanguage);
				langKey = AppConstant.LANG_+i;
				dynamicWaves = dynamicWaves.replaceAll(langKey,circleLanguage);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic Wave :" +dynamicWaves);
				arrLanguage.add(circleLanguage+AppConstant.wave);
			}
			
			/** Form Initial Prompt**/
			String count = String.valueOf(arrLanguage.size());
			DynamicMenu objDynamicMenu = new DynamicMenu();
			initialPrompt=objDynamicMenu.playPrompt(arrLanguage, dynamicWaves, count, trace);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Menu Option : "+circleLangCode);
			
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MORE_OPTION_COUNT).setValue(count);
			mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MENU_OPTION).setValue(circleLangCode);
			
		}
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:20 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("LanguageMenu_VDN", "Default");
		next.setDebugId(9563);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:20 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:20 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
