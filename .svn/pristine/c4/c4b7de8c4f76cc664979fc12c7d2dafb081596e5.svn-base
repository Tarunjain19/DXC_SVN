package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.ValidateMDNPin;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.servion.util.IVRDataBean;
import com.wdvpn.util.AppConstant;
import com.wdvpn.util.StackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-02  01:05:02 PM
 */
public class ValidatePIN extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-02  01:05:02 PM
	 */
	public ValidatePIN() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUN-16  12:43:48 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUN-16  12:43:48 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUN-16  12:43:48 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:networkError", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(761)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:TransferCode", "TransferCodes:WDVPN_TR_0003", false).setDebugId(766));
			actions.add(new com.avaya.sce.runtime.Next("LinkDown_PA_0012", "network_error").setDebugId(762));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "validatePIN:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(764)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:reasonCode", "TransferCodes:WDVPN_TR_0001", false).setDebugId(767));
				actions.add(new com.avaya.sce.runtime.Next("GetTransferVDN", "hardcoded").setDebugId(765));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("NotAuthorizedAnnc_PA_0002", "non-hardcoded").setDebugId(770));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		ValidateMDNPin validateMDNPin = null;
		try
		{	/** Check-Pin-Hardcoding Request Formation **/
			validateMDNPin = new ValidateMDNPin();
			//validateMDNPin.setMdn(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
			validateMDNPin.setMdn(mySession.getVariableField(IProjectVariables.VALIDATE_PIN, IProjectVariables.VALIDATE_PIN_FIELD_GET_PINNUMBER).getStringValue());
			validateMDNPin.setPin(mySession.getVariableField(IProjectVariables.GET_PINNUMBER__MN___0_0_0_1, IProjectVariables.GET_PINNUMBER__MN___0_0_0_1_FIELD_VALUE).getStringValue());
			validateMDNPin.setAppName(mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Check-Pin-HardCoding DB Interaction Input :: "+validateMDNPin.toString());
			
			/** DB Interaction to get Response **/
			validateMDNPin = IVRDBServiceInstance.getIVRDBInstance().checkMDNandPINHardCoding((IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN), validateMDNPin);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Check-Pin-HardCoding DB Interaction Output :: Pin-HardCoded :: "+validateMDNPin.getFlag());
			mySession.getVariableField(IProjectVariables.VALIDATE_PIN, IProjectVariables.VALIDATE_PIN_FIELD_FLAG).setValue(validateMDNPin.getFlag());
		}
		catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstant.Yes);
		StackTrace.PrintException(e);}
		finally{validateMDNPin=null;trace=null;}
	}
}
