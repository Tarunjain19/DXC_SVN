package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.Constants;
import com.servion.util.AppProperties;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2017-MAY-22  02:40:41 PM
 */
public class initializeInputParams extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2017-MAY-22  02:40:41 PM
	 */
	public initializeInputParams() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-19  04:57:50 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-19  04:57:50 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-19  04:57:50 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:hostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:success", true).setDebugId(433)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("confirmUserChoice", "Success").setDebugId(434));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("LikDown", "error").setDebugId(426));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		String userId = Constants.BLANK,password = Constants.BLANK,channelId = Constants.BLANK,transId = Constants.BLANK;
		String contentId = Constants.BLANK,cpid = Constants.BLANK,action = Constants.BLANK,pname = Constants.BLANK,ivrApproach = Constants.BLANK,ipmode = Constants.BLANK;
		String cburl = Constants.BLANK,ani =  Constants.BLANK;
		
		String hostResult = Constants.Success;
		ITraceInfo trace = mySession.getTraceOutput();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "In initializeInputParams");
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"AppProperties.GetInstance(Constants.IVR_CONFIG)"+AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp("ApplicationName").trim());
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"User ID"+AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp("USERID").trim());
		try
		{
			ani = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.USERID).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.USERID).trim()!="N")
				userId = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.USERID).trim();
							
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.PASSWORD).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.PASSWORD).trim()!="N")
					password = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.PASSWORD).trim();
			
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CHANNELID).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CHANNELID).trim()!="N")
					channelId = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CHANNELID).trim();
			
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CONTENTID).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CONTENTID).trim()!="N")
					contentId = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CONTENTID).trim();
			
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CPID).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CPID).trim()!="N")
					cpid = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CPID).trim();
			
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.ACTION).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.ACTION).trim()!="N")
					action = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.ACTION).trim();
			
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.PNAME).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.PNAME).trim()!="N")
					pname = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.PNAME).trim();
			
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.IVRAPPROACH).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.IVRAPPROACH).trim()!="N")
					ivrApproach = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.IVRAPPROACH).trim();
			
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.IPMODE).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.IPMODE).trim()!="N")
					ipmode = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.IPMODE).trim();
			
			if(AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CBURL).trim()!=Constants.BLANK && AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CBURL).trim()!="N")
				cburl  = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(Constants.CBURL).trim();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Ani: "+ani);
			transId = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_UCID).getStringValue()+ani.substring(ani.length()-2, ani.length());
			
			
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "UserId: "+userId);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Password: "+password);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "ChannelId: "+channelId);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "transId: "+transId);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "contentId: "+contentId);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Cpid: "+cpid);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Action: "+action);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Pname	: "+pname);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "IvrApproach: "+ivrApproach);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Ipmode: "+ipmode);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Cburl: "+cburl);
			
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_USERID).setValue(userId);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_PASSWORD).setValue(password);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CHANNELID).setValue(channelId);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_TRANSID).setValue(transId);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CONTENTID).setValue(contentId);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CPID).setValue(cpid);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ACTION).setValue(action);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_PNAME).setValue(pname);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_IVR__APPROACH).setValue(ivrApproach);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_IPMODE).setValue(ipmode);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_CBURL).setValue(cburl);
		
			
			
		}catch(Exception e){
			hostResult = Constants.ERROR;
			e.printStackTrace();
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "error in initializeInputParams"+e.getMessage());
		}
		finally
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResult);
		}
	}
	
	 
}
