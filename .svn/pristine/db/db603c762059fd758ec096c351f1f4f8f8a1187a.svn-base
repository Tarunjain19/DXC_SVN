package flow;

import java.text.SimpleDateFormat;
import java.util.Date;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.energy.AppConstants;
import com.rcom.energy.DynamicMenu;
import com.rcom.energy.StackTrace;
import com.servion.rcom.hostinterface.view.ReqLastPaymentDetails;
import com.servion.rcom.hostinterface.view.ResLastPaymentDetails;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-29  05:27:47 PM
 */
public class WS_GetPmtDetails extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-29  05:27:47 PM
	 */
	public WS_GetPmtDetails() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	
	@Override
	public void requestBegin(SCESession mySession) {
	
		ITraceInfo trace = mySession.getTraceOutput();
		
		/*
		 * Calling Latest Bill Generation Details through Host Interface Web service
		 */
		
		String uniqueId = null;
		String accountNo = null;
		String MDN = null;
		String responseCode = null;
		String lastPmtReceivedDate = null;
		String totalAmtReceived = null;
		String modeOfPayment = null;
		String modeOfPaymentPromptId = null;
		String appName = null;
		String key = null;
		String initialPrompt = null;
		String[] dynamicList = null;
		boolean isValidAccount = false;
		IVRWebService ivrWebService = null;
		AppProperties ivrProperties = null;
		Date dstartDate =null;
		String currentLanguage = AppConstants.EMPTY_STRING;
		
		try
		{
		ivrProperties = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES);
		appName = ivrProperties.getIVRProp(AppConstants.APP_NAME);
		
		uniqueId = mySession.getSessionId();
		accountNo = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ACCOUNT_NO).getStringValue();
		MDN = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Inputs to Host Inteface : ");
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Unique ID : "+uniqueId);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Account No : "+accountNo);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "MDN : "+MDN);
		
		ReqLastPaymentDetails req = new ReqLastPaymentDetails();
		req.setAccountNo(accountNo);
		req.setMDN(MDN);
		ivrWebService = new IVRWebServiceImpl();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Before calling Last Payment Details Host Service");
		ResLastPaymentDetails res = ivrWebService.getLastPaymentDetails((IVRDataBean)mySession.getProperty(AppConstants.IVR_DATA_BEAN), req);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "After calling Last Payment Details Host Service");
		
		responseCode = res.getResponseCode();
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Response Code : " + responseCode);
		
		if(responseCode.equalsIgnoreCase(AppConstants.WS_RESPONSE_SUCCESS))
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_WEB_SERVICE_RESPONSE).setValue(AppConstants.SUCCESS);
			
			isValidAccount = res.isValidAccount();
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Is Valid Account : " + isValidAccount);
			
			if(isValidAccount == true)
			{
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_VALID_ACCOUNT).setValue(true);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_ACC_NO_VALIDATED).setValue(true);
				lastPmtReceivedDate = res.getLastPaymentReceivedDate();
				totalAmtReceived = res.getTotalAmtReceived();
				modeOfPayment = res.getModeOfPayment();
				currentLanguage = mySession.getCurrentLanguage();
				
				key = currentLanguage+AppConstants.UNDERSCORE+appName+AppConstants.HYPEN_SEPERATOR+AppConstants.PA_0035;
				initialPrompt = ivrProperties.getIVRProp(key);
				if(AppConstants.N.equalsIgnoreCase(initialPrompt)){
					key = appName+AppConstants.HYPEN_SEPERATOR+AppConstants.PA_0035;
					initialPrompt = ivrProperties.getIVRProp(key);
				}
				
				modeOfPaymentPromptId = ivrProperties.getIVRProp(AppConstants.MODE_OF_PAYMENT+AppConstants.UNDERSCORE+modeOfPayment);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Response Mode Of Payment :: "+modeOfPayment+" ,PromptId = "+modeOfPaymentPromptId);
				
				dynamicList = new String[3];
				
				/**Date Format Conversion **/
				SimpleDateFormat sdFormat = new SimpleDateFormat("ddMMyyyy");
				SimpleDateFormat sdFormat2 = new SimpleDateFormat("yyyyMMdd");
				dstartDate = sdFormat.parse(lastPmtReceivedDate);
				lastPmtReceivedDate = sdFormat2.format(dstartDate);
				dynamicList[0] = lastPmtReceivedDate;
				
				dynamicList[1] = totalAmtReceived+AppConstants.currency;
				dynamicList[2] = modeOfPaymentPromptId;
				
				initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, AppConstants.NA, AppConstants.PA_0035, trace);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Menu Initial Prompt : " + initialPrompt);
				
				mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);
				
			}
			else
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_VALID_ACCOUNT).setValue(false);
		}
		else
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_WEB_SERVICE_RESPONSE).setValue(AppConstants.FAILURE);
		}
		catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_WEB_SERVICE_RESPONSE).setValue(AppConstants.FAILURE);
			StackTrace.PrintException(e);
		}
		
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:15 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:15 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-28  03:43:15 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:WebServiceResponse", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:SUCCESS", true).setDebugId(4103)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:IsValidAccount", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(4105)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0028", false).setDebugId(5827));
				actions.add(new com.avaya.sce.runtime.Next("LastPmtDetails_PP", "(ValidAccount)").setDebugId(4108));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("AppVariables:BillDetailCollectAccNoTries").setDebugId(5814));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "AppVariables:BillDetailCollectAccNoTries", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "constant:three", true).setDebugId(5815)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("DupBillAccountNoInvalid_PP", "(TriesAvailable)").setDebugId(5816));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(3);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0016", false).setDebugId(5818));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:CollectAccNoTries", "constant:zero", false).setDebugId(5819));
					actions.add(new com.avaya.sce.runtime.Next("DupBillAccNoExceededTries_PP", "(ExceededTries)").setDebugId(5820));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}

			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:TR_0059", false).setDebugId(4118));
			actions.add(new com.avaya.sce.runtime.Next("Linkdown_PP", "(Failure)").setDebugId(4107));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
