package flow;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.log4j.Logger;

import com.hpe.util.AppConstant;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-11  05:56:15 PM
 */
public class DAT_CallStart extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-11  05:56:15 PM
	 */
	public DAT_CallStart() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-JUN-23  05:13:22 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JUN-23  05:13:22 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-JUN-23  05:13:22 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(6);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "ANI :", "session:ani").setDebugId(16427));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "DNIS :", "session:dnis").setDebugId(16428));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Application Name", "AppName").setDebugId(16429));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("RGC_CallDetails:DNIS", "session:dnis", false).setDebugId(16430));
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("RGC_CallDetails:ANI", "session:ani", false).setDebugId(16431));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag_Application_Error", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:TRUE", true).setDebugId(16432)).evaluate(mySession)) {
			actions = new java.util.ArrayList(3);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Application error - Call continued with default properties", "").setDebugId(16433));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Flag_Application_Error", "constant:FALSE", false).setDebugId(16434));
			actions.add(new com.avaya.sce.runtime.Next("DNIS_Routing", "Continue_Call").setDebugId(16435));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Exception_Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:TRUE", true).setDebugId(16436)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DM_TechDiff_Msg", "Tech_Diff").setDebugId(16437));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DNIS_Routing", "Welcome_Msg").setDebugId(16439));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {

		/**Declaration **/
		String ivrConfigFileName = AppConstant.EMPTY_STRING;
		String propertiesFilePath = AppConstant.EMPTY_STRING;
		String dynMenuConfigFileName = AppConstant.EMPTY_STRING;
		String HostConfigFileName = AppConstant.EMPTY_STRING;
		String sessionID = AppConstant.EMPTY_STRING,PropertyKey= AppConstant.EMPTY_STRING;
		String appName = AppConstant.EMPTY_STRING,PropertyLocation= AppConstant.EMPTY_STRING,defaultLanguage = AppConstant.EMPTY_STRING;
		Logger logger = null;
		ITraceInfo trace = null;
		IVRREPORTDATA ivrreportdata = null;
		InetAddress ip = null;
		CALLINFO callInfo  = null;
		SimpleDateFormat dateFormat = null;
		String callerType = AppConstant.EMPTY_STRING;
		String version = AppConstant.EMPTY_STRING;
		AppProperties ivrProperties = null;
		
		/**Assign**/
		
		propertiesFilePath = "C:/RCOM/OtherFlows/RCOM_RGC_CF_IVR/";
		ivrConfigFileName = "RCOM_RGC_CF_IVR_CONFIG";
		dynMenuConfigFileName ="RCOM_RGC_CF_IVR_DYN_MENU"; 
		HostConfigFileName = "RCOM_RGC_CF_IVR_HOST_CONFIG";
		
		try{
			
			if(propertiesFilePath.equalsIgnoreCase("")||propertiesFilePath == null || ivrConfigFileName.equalsIgnoreCase("")||ivrConfigFileName == null ||dynMenuConfigFileName.equalsIgnoreCase("")||dynMenuConfigFileName == null ||HostConfigFileName.equalsIgnoreCase("")||HostConfigFileName == null)
			{
				mySession.getVariableField(IProjectVariables.EXCEPTION__FLAG).setValue(AppConstant.TRUE);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG,"ERROR in Call Start while loading cofig files " , mySession);
			}
			else
			{
			AppConstant.IVR_CONFIG = ivrConfigFileName;
			AppConstant.DYN_MENU = dynMenuConfigFileName;
			AppConstant.HOST_CONFIG = HostConfigFileName;
		
			AppProperties.setInstance(ivrConfigFileName,propertiesFilePath);
			AppProperties.setInstance(dynMenuConfigFileName,propertiesFilePath);
			AppProperties.setInstance(HostConfigFileName,propertiesFilePath);
			AppProperties.GetInstance("RCOM_RGC_CF_IVR_CONFIG").getIVRProp("DRIVER");
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Get Intance output "+ AppProperties.GetInstance("RCOM_RGC_CF_IVR_CONFIG").getIVRProp("DRIVER") ,mySession);
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"ivrConfigFileName loaded "+ ivrConfigFileName ,mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"dynMenuConfigFileName loaded "+ dynMenuConfigFileName, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"HostConfigFileName loaded "+ HostConfigFileName, mySession);
			
			trace = mySession.getTraceOutput();
			sessionID = mySession.getSessionId();
			logger = Logger.getLogger(AppConstant.LOGGER_NAME_CALLLEVEL);
			ivrProperties = AppProperties.GetInstance(AppConstant.IVR_CONFIG);
			
			defaultLanguage = ivrProperties.getIVRProp(AppConstant.DefaultLanguage);
			mySession.getVariableField(IProjectVariables.APP_NAME).setValue(ivrProperties.getIVRProp(AppConstant.APPLICATION_NAMES));
			version = mySession.getVariableField(IProjectVariables.VERSION).getStringValue();
			appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			PropertyKey = AppConstant.PROPERTY+appName+"_"+defaultLanguage;
			dateFormat =  new SimpleDateFormat(AppConstant.DATE_FORMAT_REPORT);
				
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "### RGC IVR Version:" + version);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "default Language :" + defaultLanguage);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "application Name :" + appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Property Key :"+ PropertyKey);
			
			/*Create IVR Bean Object*/
			 
			 
			IVRDataBean objIVRDataBean = new IVRDataBean(); 
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Session ID :"+sessionID);
			objIVRDataBean.setLogger(logger);
			objIVRDataBean.setSessionID(sessionID);
			
			
			/**Default Property File Location**/
			
			PropertyKey = AppConstant.PROPERTY+appName+AppConstant.SEPERATOR_UNDERSCORE+defaultLanguage;
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "default Language :"+defaultLanguage);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "application Name :"+appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Property Key :"+PropertyKey);
			
			PropertyLocation = ivrProperties.getIVRProp(PropertyKey);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Property Location :"+PropertyLocation);
			
			if(PropertyLocation!=null && PropertyLocation!="N"){
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Properties Location :"+PropertyLocation);
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(PropertyLocation);
			}	
			else {
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
				PropertyLocation = ivrProperties.getIVRProp(AppConstant.DEFAULT_PROPERTY_LOCATION);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"default properties Location :"+PropertyLocation);
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_PROPERTY_FILE_LOCATION).setValue(PropertyLocation);
			}
			
			
			
			
			/**Reporting**/
			GetReportObject objGetReportObject = new GetReportObject();
			objGetReportObject.createIVRReportObject();
			objIVRDataBean.setGetReportObject(objGetReportObject);
			mySession.setProperty(AppConstant.IVRDATABEAN,objIVRDataBean);
			
			ivrreportdata = objGetReportObject.createIVRReportObject();
			mySession.setProperty(AppConstant.BEANREPORTDATA, objGetReportObject);
			objGetReportObject.setIvrreportdata(ivrreportdata);
			objIVRDataBean.setGetReportObject(objGetReportObject);
			
			
			
			/**Assigning call info data for report*/
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"/*** Call Info Reporting is started ***/");
			ip= InetAddress.getLocalHost();
			callInfo  = ivrreportdata.getCALLINFO();
			callInfo.setUNIQUECALLID(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue());
			callInfo.setSESSIONID(mySession.getSessionId());
			callInfo.setVXMLIP(String.valueOf(ip));
			callInfo.setSTARTDATETIME(dateFormat.format(new Date()));
			callInfo.setAPPNAME(appName);
			callInfo.setCALLERTYPE(callerType);
			callInfo.setCATEGORY(AppConstant.NA);
			callInfo.setCIRCLEID(AppConstant.NA);
			callInfo.setCLI(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
			callInfo.setDNIS(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
			callInfo.setDNISTYPE(AppConstant.NA);
			callInfo.setHUB(ivrProperties.getIVRProp(AppConstant.HUB));
			callInfo.setAGENTID(AppConstant.NA);
			callInfo.setAGENTEXTN(AppConstant.NA);
			callInfo.setTRANSCODE(AppConstant.NA);
			callInfo.setTRANSCODE(AppConstant.NA);
			callInfo.setLANGUAGEFROM(AppConstant.NA);
			callInfo.setLANGUAGETO(AppConstant.NA);
			callInfo.setTAGGING(AppConstant.NA);
			callInfo.setTRANSFERVDN(AppConstant.NA);
			callInfo.setUUIDATA(AppConstant.NA);
			callInfo.setABANDONEDFLAG(AppConstant.NA);
			callInfo.setTRANSTOIVR(AppConstant.NA);
			callInfo.setSKILLNAME(AppConstant.NA);
			callInfo.setLANGCODE(AppConstant.ENG);
			callInfo.setENDDATETIME(AppConstant.NA);
			callInfo.setDTMFPATH(AppConstant.NA);
			callInfo.setMENUPATH(AppConstant.NA);
			callInfo.setCALLERPATH(AppConstant.NA);
			callInfo.setLASTMENUACCESSED(AppConstant.NA);
			callInfo.setDISPOSITION(AppConstant.ID);
			callInfo.setCALLENDREASON(AppConstant.IVR_DISCONNECT);
			callInfo.setHOWCALLENDED(AppConstant.DISCONNECT);
			callInfo.setERRREASON(AppConstant.NA);
			ivrreportdata.setCALLINFO(callInfo);
			
			objIVRDataBean.setGetReportObject(objGetReportObject);
			mySession.setProperty(AppConstant.IVRDATABEAN,objIVRDataBean);
		
		
		}
		}catch(Exception e){
			mySession.getVariableField(IProjectVariables.FLAG__APPLICATION__ERROR).setValue(AppConstant.TRUE);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"ERROR in Call Start :"+e);
		}
		
}
}