package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.rcom.rdtv.rcomdth02.model.Last3ERecharge;
import com.rcom.util.AppConstant;
import com.rcom.util.StackTrace;
import com.servion.rcom.hostinterface.util.Utilities;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-APR-05  12:33:22 PM
 */
public class AccessHost_BAL extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-APR-05  12:33:22 PM
	 */
	public AccessHost_BAL() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-24  10:30:17 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-24  10:30:17 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-24  10:30:17 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		
		/**Declaration **/
		String appName = AppConstant.EMPTY_STRING,hostOutput = AppConstant.ERROR,key=AppConstant.EMPTY_STRING;
		String mdn = AppConstant.EMPTY_STRING, strFlag =AppConstant.EMPTY_STRING;
		
	    String out_transid = AppConstant.EMPTY_STRING,out_recepient_mdn = AppConstant.EMPTY_STRING,out_time = AppConstant.EMPTY_STRING;
	    String out_mrp =  AppConstant.EMPTY_STRING,out_talk_time = AppConstant.EMPTY_STRING,out_validity = AppConstant.EMPTY_STRING;
	    String out_status =  AppConstant.EMPTY_STRING,out_status_msg = AppConstant.EMPTY_STRING;
		

		Last3ERecharge objLast3ERecharge = null;
		IVRDataBean objIVRDataBean = null;

		ITraceInfo trace = mySession.getTraceOutput();

try {
			
			/**Assigning**/
			mdn = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			appName = mySession.getVariableField(IProjectVariables.APPNAME).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"MDN :"+mdn +" - App Name :" + appName);
			
			objLast3ERecharge = new Last3ERecharge();
			objLast3ERecharge.setIn_recepient_mdn("");
			objLast3ERecharge.setIn_donor_mdn(mdn);
			objLast3ERecharge.setIn_ivr_code("1");
			objLast3ERecharge.setIn_amount("0");
			objLast3ERecharge.setIn_trans_id(Utilities.generateUniqueID());
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			/**DB Hit**/
			objLast3ERecharge = IVRDBServiceInstance.getRcomdth02DataService().getLast3ERecharge(objIVRDataBean,objLast3ERecharge);
			if(objLast3ERecharge!=null){
				out_transid = objLast3ERecharge.getOut_transid();
				out_recepient_mdn =  objLast3ERecharge.getOut_recepient_mdn();
				out_time =  objLast3ERecharge.getOut_time();
				out_mrp =  objLast3ERecharge.getOut_mrp();
				out_talk_time =objLast3ERecharge.getOut_talk_time();
				out_validity =objLast3ERecharge.getOut_validity();
				out_status=objLast3ERecharge.getOut_status();
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "out_transid = "+out_transid);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "out_recepient_mdn ="+ out_recepient_mdn);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "out_time =  "+out_time);
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "out_mrp = "+out_mrp);
			    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "out_talk_time ="+out_talk_time);
			    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "out_validity ="+out_validity);
			    trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "out_status =" +out_status);
			    //
			}
}
			 catch (Exception e) {
					trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in Validate MDN :" +e);
					StackTrace.PrintException(e);
				}
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Status :" +hostOutput);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostOutput);
			
			
			}
		
			

	
}
