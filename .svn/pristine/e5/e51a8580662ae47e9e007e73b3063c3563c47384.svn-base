package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.AppConstant;
import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.StackTrace;
import com.servion.util.AppProperties;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-NOV-26  08:32:13 PM
 */
public class SetLang extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-NOV-26  08:32:13 PM
	 */
	public SetLang() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("MainMenu_1925_MN_0002", "Default");
		next.setDebugId(3210);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Language_1925_MN_0001:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(3213)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Language_1925_MN_0001:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "ENG", false).setDebugId(3215)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("DMProperty:ConfigFilePath", "DMProperty:ENG_ConfigFilePath", false).setDebugId(3216));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		ITraceInfo info = null;
		try{
			info = mySession.getTraceOutput();
			String tem_Status=mySession.getVariableField(IProjectVariables.LANGUAGE___1_9_2_5__MN___0_0_0_1, IProjectVariables.LANGUAGE___1_9_2_5__MN___0_0_0_1_FIELD_RETURN_CODE).getStringValue();
			String tem_lang=mySession.getVariableField(IProjectVariables.LANGUAGE___1_9_2_5__MN___0_0_0_1, IProjectVariables.LANGUAGE___1_9_2_5__MN___0_0_0_1_FIELD_VALUE).getStringValue();
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "tem_Status  :"+tem_Status);
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "tem_lang  :"+tem_lang);
			
			//String comb_lang_path=tem_lang+"_ConfigFilePath";
			
			//info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "comb_lang_path  :"+comb_lang_path);
			
			//String temp_path=AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(comb_lang_path);
			
			//info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "temp_path  :"+temp_path);
			
			
			
			
			
		    String PropertyLocation=mySession.getVariableField(IProjectVariables.DMPROPERTY, ""+tem_lang+"_ConfigFilePath").getStringValue();
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "PropertyLocation after lang select is :"+PropertyLocation);
			
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_CONFIG_FILE_PATH).setValue(PropertyLocation);
			mySession.setCurrentLanguage(tem_lang);
			
		  //mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_TAM__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.TAM_ConfigFilePath));
			
		}catch (Exception e) {
			
			StackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
		}
	}
}
