package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.StackTrace;
import com.servion.rcom.Data.hostinterface.view.ReqDataActDeact;
import com.servion.rcom.Data.hostinterface.view.ResDataActDeact;
import com.servion.rcom.Data.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.Data.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-NOV-21  07:12:04 AM
 */
public class Data_ACT_DEACT extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-NOV-21  07:12:04 AM
	 */
	public Data_ACT_DEACT() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Webservice Responce", "APP_VARIABLES:WebResponce").setDebugId(3046));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "APP_VARIABLES:WebResponce", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "SUCCESS", false).setDebugId(2755)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Error Code of web service", "APP_VARIABLES:ERROR_CODE").setDebugId(3047));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "APP_VARIABLES:ERROR_CODE", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "SUCCESS", false).setDebugId(3043)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("PushSms", "SUCCESS").setDebugId(2757));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("SetLinkDown", "FAILURE").setDebugId(3044));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("SetLinkDown", "FAILURE").setDebugId(2758));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo trace = mySession.getTraceOutput();
		String sessionId = null,hostResponse= Constants.ERROR;
		String mdn = null;
		String action = null;
		
		//Host Interaction Objects.....
		ReqDataActDeact reqDataActDeact = null;
		ResDataActDeact resDataActDeact = null;
		IVRWebService ivrWebService = null;
		IVRDataBean objIVRDataBean = null;
		
		try
		{
			//Request Processing ......
			mdn =  mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_ANI).getStringValue();
			action =  mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_IS_DATA_CARD).getStringValue();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "mdn is :: "+mdn);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "OpType is :: "+action);
			
			objIVRDataBean = (IVRDataBean)mySession.getProperty(Constants.IVRDataBean);
			reqDataActDeact = new ReqDataActDeact();
			reqDataActDeact.setMDN(mdn);
			reqDataActDeact.setREQUESTTYPE("DATA");
			reqDataActDeact.setREQopType(action);
			reqDataActDeact.setSOURCE("IVR");
			reqDataActDeact.setRequestId(sessionId);
			reqDataActDeact.setLangId("0");

			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Main Host request :: "+reqDataActDeact.toString());
			
			//Response Processing ......
			ivrWebService = new IVRWebServiceImpl();
			resDataActDeact = ivrWebService.executeDataRequest(objIVRDataBean, reqDataActDeact);
			//moving to complex variable
			if(resDataActDeact!= null){
				
				String res=resDataActDeact.getResponseCode();
				
				System.out.println("res is: "+res);
				
				if(res.equalsIgnoreCase("0"))
				{
					 mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_WEB_RESPONCE).setValue("SUCCESS");
					String Error_Code=resDataActDeact.getERROR_CODE();
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Error_Code is:: "+Error_Code);
					if(Error_Code.equalsIgnoreCase("0"))
					{
						 mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_ERROR__CODE).setValue("SUCCESS");
						
					}
					else
					{
						 mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_ERROR__CODE).setValue("FAILURE");
						
					}
					
					
					
				}else
				{
					 mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_WEB_RESPONCE).setValue("FAILURE");
				}
				
				
			}
			else
			{
				 mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_WEB_RESPONCE).setValue("FAILURE");
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Response Code is not zero");
			}
			
		}
		catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_WEB_RESPONCE).setValue("FAILURE");
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception In Account Balance :"+e);
			StackTrace.PrintException(e);
			
		}
		}
	
}
