package flow.subflow.HotFlash;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.bb.model.HotFlashInfo;
import com.rcom.broadband.AppDataMap;
import com.rcom.broadband.Constants;
import com.rcom.broadband.StackTrace;


import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-22  04:57:43 PM
 */
public class DB_GetHotFlashInfo extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-22  04:57:43 PM
	 */
	public DB_GetHotFlashInfo() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	@Override
	public void requestBegin(SCESession mySession) {
		/**Declaration**/
		String phraseID = Constants.EMPTY,appName =  Constants.EMPTY,circleID = Constants.EMPTY,hotFlashFlag = Constants.EMPTY;
		String startDate = Constants.EMPTY, endDate = Constants.EMPTY,language = Constants.EMPTY;
		String hotFlashKey = Constants.EMPTY,phraseKey=Constants.EMPTY,nodeID =  Constants.EMPTY;
		boolean flagPlayHotFlash = false;
		Hashtable<String, HotFlashInfo> objMapHotFlashInfo = null;
		HotFlashInfo objHotFlashInfo = null;
		SimpleDateFormat sdFormat = null;
		Date dstartDate = null, dendDate = null , currDate = null;
		ITraceInfo trace = null;
		
		/**Assign**/
		try{
			
			trace = mySession.getTraceOutput();
			appName = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_APP_NAME).getStringValue();
			nodeID = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_HOT_FLASH_ID).getStringValue();
			circleID = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue();
			language = mySession.getCurrentLanguage();
	
			hotFlashKey = Constants.HOTFLASH_KEY+appName;
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Application Name Inside Hot Flash :" +appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Applevel hot Flash Key :" +hotFlashKey);
			objMapHotFlashInfo = (Hashtable<String, HotFlashInfo>) AppDataMap.getInstance(appName).getAppData(hotFlashKey);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"object Map Hot Flash Info :" +objMapHotFlashInfo);
			
			/**Take Node Level Phrase **/
			
			if(objMapHotFlashInfo!=null){
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"object Map Hot Flash Info :" +objMapHotFlashInfo.toString());
				
				phraseKey =nodeID+Constants.UNDERSCORE+circleID+Constants.UNDERSCORE+language;
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"phrase Key For Hot flash message :" +phraseKey);
				objHotFlashInfo = objMapHotFlashInfo.get(phraseKey);
				
				if(objHotFlashInfo!=null){
					startDate = objHotFlashInfo.getStartDate();
					endDate =objHotFlashInfo.getEndDate();
					hotFlashFlag = objHotFlashInfo.getEnabledFlag();
					phraseID =objHotFlashInfo.getPhraseId();
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash start Date:" +startDate);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash end Date:" +endDate);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash Flag:" +hotFlashFlag);
					trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash phrase ID:" +phraseID);
					
					if(Constants.ENABLED.equalsIgnoreCase(hotFlashFlag)){
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Hot Flash is Valid:Flag is set to true");
						mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_FLASH__FLAG).setValue("TRUE");
						mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(phraseID);
						mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__ANNOUNCE_ID).setValue(nodeID);
						flagPlayHotFlash = true;
						}
					}
				}
				
			}
		catch(Exception e){
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in Hot Flash :" +e);
			StackTrace.PrintException(e);
		}
		
		mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOT_FLASH_APPLICABLE).setValue(flagPlayHotFlash);
	}
		
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:58 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:58 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:58 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:IsHotFlashApplicable", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(147)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("HotFlash-HotFlash_PP", "(PlayHotFlash)").setDebugId(8));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("HotFlash-HotFlashReturn", "(Skip)").setDebugId(149));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
