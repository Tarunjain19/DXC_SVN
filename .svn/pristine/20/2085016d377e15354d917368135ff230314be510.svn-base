package flow.subflow.Prepaid_Start;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.triplefive.utils.AppConstant;
import com.servion.triplefive.utils.Constants;
import com.servion.util.AppProperties;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-12  12:03:53 AM
 */
public class ChangeLanguageMenuEvaluate extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-12  12:03:53 AM
	 */
	public ChangeLanguageMenuEvaluate() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:52 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:52 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:52 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Language Menu Return Code", "ChangeLanguageMenu:ReturnCode").setDebugId(9447));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Language Menu Return Value", "ChangeLanguageMenu:Value").setDebugId(9448));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "ChangeLanguageMenu:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_constant:success", true).setDebugId(9449)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "ChangeLanguageMenu:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_MenuOption:agent", true).setDebugId(9450)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("Prepaid_appVariables:transferCode", "TR_0107", true).setDebugId(9451));
				actions.add(new com.avaya.sce.runtime.Next("Prepaid_Start-Get_TransferVDN", "agent").setDebugId(9452));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "ChangeLanguageMenu:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_MenuOption:MainMenu", true).setDebugId(9453)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Prepaid_Start-checkMainMenuCount", "MainMenu").setDebugId(9454));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "ChangeLanguageMenu:Value", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Prepaid_MenuOption:previous", true).setDebugId(9455)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Prepaid_Start-checkMainMenuCount", "previous").setDebugId(9456));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.SetCurrentLanguage("ChangeLanguageMenu:Value", false).setDebugId(9458));
				actions.add(new com.avaya.sce.runtime.Next("Prepaid_Start-UpdateLanguage", "confirm").setDebugId(9459));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("Prepaid_appVariables:transferCode", "TR_0049", true).setDebugId(9461));
			actions.add(new com.avaya.sce.runtime.Next("Prepaid_Start-Get_TransferVDN", "Exceeded").setDebugId(9462));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		/**Declaration **/
		String returnCode = AppConstant.EMPTY_STRING,returnValue = AppConstant.EMPTY_STRING;
		String selectedLang = AppConstant.EMPTY_STRING,key = AppConstant.EMPTY_STRING;
		String appName = AppConstant.EMPTY_STRING,propetyKey = AppConstant.EMPTY_STRING;
		String propertiesLocation = AppConstant.EMPTY_STRING;
		ITraceInfo trace = null;
		
		/**Assign **/
		returnValue = mySession.getVariableField(IProjectVariables.CHANGE_LANGUAGE_MENU,IProjectVariables.CHANGE_LANGUAGE_MENU_FIELD_VALUE).getStringValue();
		returnCode = mySession.getVariableField(IProjectVariables.CHANGE_LANGUAGE_MENU,IProjectVariables.CHANGE_LANGUAGE_MENU_FIELD_RETURN_CODE).getStringValue();
		appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
		trace = mySession.getTraceOutput();
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"LANGUAGE_MENU Return Code :"+returnCode);
		trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"LANGUAGE_MENU Return Value :"+returnValue);
		
		/***Getting Property File for selected Language***/
		if((AppConstant.Success.equalsIgnoreCase(returnCode)) && (!returnValue.equalsIgnoreCase("Transfer")) && (!returnValue.equalsIgnoreCase("MainMenu")) && (!returnValue.equalsIgnoreCase("Previous"))){
			
			/*key = AppConstant.Language_Code+returnValue;
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language_Code Key:"+key);
			selectedLang=(String) AppDataMap.getInstance(appName).getAppData(key);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Selected Language :"+selectedLang);
			*/
			
			selectedLang = returnValue;
			if(selectedLang!=null && !AppConstant.EMPTY_STRING.equals(selectedLang)){
				//mySession.setCurrentLanguage(selectedLang);
				//propetyKey = AppConstant.PROPERTY+appName+AppConstant.SEPERATOR_UNDERSCORE+selectedLang;
				propetyKey = appName+Constants.HYPEN+selectedLang+Constants.UNDERSCORE+Constants.PROPERTY_FILE_PATH;
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"propety Key :"+propetyKey);
				propertiesLocation = AppProperties.GetInstance(Constants.IVR_CONFIG).getIVRProp(propetyKey);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location :"+propertiesLocation);
				
				if(propertiesLocation!=null && !AppConstant.N.equalsIgnoreCase(propertiesLocation))
					mySession.getVariableField(IProjectVariables.DMPROPERTIES,IProjectVariables.DMPROPERTIES_FIELD_CONFIG_FILE_PATH).setValue(propertiesLocation);
				else{
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"properties Location is Null");
					
				}
			}
			
		}
	}
}
