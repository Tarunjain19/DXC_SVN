package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.ValidateMDNWebWorld;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.servion.util.IVRDataBean;
import com.webworld.util.AppConstant;
import com.webworld.util.StackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-02  05:03:33 PM
 */
public class Access_DB extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-02  05:03:33 PM
	 */
	public Access_DB() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUN-16  11:10:54 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUN-16  11:10:54 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUN-16  11:10:54 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Is exception flag", "appVariables:isException").setDebugId(2174));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:isException", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(338)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("LinkDown", "Exception").setDebugId(333));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Check DB Response Code : :", "CheckHardCoding").setDebugId(1515));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "CheckHardCoding:flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "success", false).setDebugId(341)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Check DB Flag : : ", "CheckHardCoding:flag").setDebugId(1514));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "CheckHardCoding:category", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "FED", false).setDebugId(346)).evaluate(mySession)) {
					actions = new java.util.ArrayList(4);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:reasonCode", "constant:WHIVR_TR_0001", false).setDebugId(2194));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("HotFlashInfo:annoID", "HotFlashIDs:WHIVR_PA_0004", false).setDebugId(2934));
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("HotFlashInfo:CallingNodeId", "HotFlashIDs:WHIVR_PA_0004", false).setDebugId(2935));
					actions.add(new com.avaya.sce.runtime.Next("FED_HotFlash", "FED").setDebugId(347));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "CheckHardCoding:category", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "W", false).setDebugId(2195)).evaluate(mySession)) {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("Main_Menu", "W").setDebugId(2196));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:reasonCode", "constant:WHIVR_TR_0002", false).setDebugId(2198));
					actions.add(new com.avaya.sce.runtime.Next("Transfer_Agent", "D/H").setDebugId(1517));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}


			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("ThankYou_Annce", "NoFlag").setDebugId(352));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		String appName = null,mdn = null;
		ValidateMDNWebWorld validateMDN = null;
		IVRDataBean ivrDataBean = null;
		
		try
		{	/** Request Formation **/
			validateMDN = new ValidateMDNWebWorld();
			appName  = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
			mdn = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			validateMDN.setMdn(mdn);
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " MDN HardCoding DB Request :: "+validateMDN.toString());
			
			validateMDN = IVRDBServiceInstance.getIVRDBInstance().validateWebWorldMDN(ivrDataBean, validateMDN);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " MDN HardCoding DB Response :: "+validateMDN.toString());
			if(validateMDN.getFlag().equalsIgnoreCase(AppConstant.Failure)){
				mySession.getVariableField(IProjectVariables.CHECK_HARD_CODING, IProjectVariables.CHECK_HARD_CODING_FIELD_FLAG).setValue(AppConstant.Failure);
			}else if(validateMDN.getFlag().equalsIgnoreCase(AppConstant.Success)){
				mySession.getVariableField(IProjectVariables.CHECK_HARD_CODING, IProjectVariables.CHECK_HARD_CODING_FIELD_FLAG).setValue(validateMDN.getFlag());
				mySession.getVariableField(IProjectVariables.CHECK_HARD_CODING, IProjectVariables.CHECK_HARD_CODING_FIELD_CATEGORY).setValue(validateMDN.getDataType());
			}else{
				mySession.getVariableField(IProjectVariables.CHECK_HARD_CODING, IProjectVariables.CHECK_HARD_CODING_FIELD_FLAG).setValue(AppConstant.Failure);
			}
				
		}catch(Exception e)
		{
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_EXCEPTION).setValue(AppConstant.Yes);
			StackTrace.PrintException(e);
		}
		finally{
			appName = null;mdn = null;validateMDN = null;ivrDataBean = null;
		}
		
	}
	
}
