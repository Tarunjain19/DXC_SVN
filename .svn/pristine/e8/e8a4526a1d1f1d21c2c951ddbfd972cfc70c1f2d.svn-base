package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.avaya.sce.runtimecommon.VariableTypeException;
import com.rcom.prepaid.model.GPRSSRCInfo;
import com.rcom.prepaid.resource.IVRDBServiceInstance;
import com.servion.hsd.utils.AppConstant;
import com.servion.hsd.utils.StackTrace;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-30  10:22:03 AM
 */
public class Check_SRCBAR extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-30  10:22:03 AM
	 */
	public Check_SRCBAR() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:57 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:57 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:57 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(9461)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:BarFlag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:Key_true", true).setDebugId(9462)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("ThankYouAnnc", "Barred").setDebugId(9465));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Get_TransferVDN", "NotBarred").setDebugId(9463));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Get_TransferVDN", "agentContd").setDebugId(9467));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		/**Declaration **/
		
		ITraceInfo trace = mySession.getTraceOutput();
		IVRDataBean objIVRDataBean = null;
		String hostOutput = AppConstant.ERROR;
		
		try {
			
		String ani = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
		
		String appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG," - App Name :" + appName);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG," - ani Name :" + ani);
		
					
		objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			
			GPRSSRCInfo	objGPRSInfo=new GPRSSRCInfo();
			objGPRSInfo.setMdn(ani);
			objGPRSInfo.setP_LOB_ID("01");
			objGPRSInfo.setP_COUNTER_SEGMENT_IN("HSD");
			objGPRSInfo=IVRDBServiceInstance.getInstance().checkGPRSSRCFlag(objIVRDataBean, objGPRSInfo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG," GPRS Responce :" + objGPRSInfo);
			if(objGPRSInfo!=null)
			  {
					String barStatus = objGPRSInfo.getP_BMBAR_STATUS();
					
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,	" Baring Status :" + barStatus);
	
					if (barStatus.equalsIgnoreCase("DBAR")|| barStatus.equalsIgnoreCase("WBAR")|| barStatus.equalsIgnoreCase("MBAR"))
					{
						mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_BAR_FLAG).setValue(AppConstant.TRUE);

					} else {
						mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_BAR_FLAG).setValue(AppConstant.FALSE);

					}
					// mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_GPRS_FLAG).setValue(gprsStatus);
					hostOutput = AppConstant.Success;
				} 
			else {
					mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_BAR_FLAG).setValue(AppConstant.FALSE);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,	"objGPRSInfo Object is null");
					
					hostOutput = "Failure";
				}
		
		} catch (VariableTypeException e) {
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in Barring caller Check :" +e);
			StackTrace.PrintException(e);
		}
		finally{
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Status :" +hostOutput);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostOutput);
		}
		
	}
}
