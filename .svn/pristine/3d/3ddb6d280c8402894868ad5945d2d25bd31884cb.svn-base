package flow;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.StackTrace;

import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;
import com.rcom.Data.utils.AppConstant;
import com.rcom.data.model.IVRRoutingInfo;
import com.rcom.data.resource.IVRDBServiceInstance;



/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-02  12:34:25 PM
 */
public class InitializeVariables extends com.avaya.sce.runtime.Data {

	//private static Logger logger = Logger.getLogger("Dialog.Designer.TraceWriter.RCOM_CF_Televerification_IVR");
	private static Logger logger = Logger.getLogger("Dialog.Designer.TraceWriter.RCOM_CF_1925_IVR");
	
	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-02  12:34:25 PM
	 */
	public InitializeVariables() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = null;
		IVRDataBean ivrDataBean = null;
	
		String strInitialAudios = "";
		String strLanguages = "";
		String strDefaultLanguage = Constants.ENG;
		GetReportObject getReportObject = null;
		IVRREPORTDATA ivrreportdata = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		InetAddress ip = null;
		CALLINFO callInfo  = null;
		
		System.out.println("Hello App");
		
		
		info = mySession.getTraceOutput();
		
		/*Setting logger and sesion id */
		ivrDataBean = new IVRDataBean();
		ivrDataBean.setLogger(logger);
		ivrDataBean.setSessionID(mySession.getSessionId());
		mySession.setProperty(Constants.IVRDataBean, (IVRDataBean) ivrDataBean);
		IVRRoutingInfo objIVRRoutingInfo = null;
		
		
		
		try{
			
			String UUIDNIS=mySession.getVariableField(IProjectVariables.APP__VARIABLES,IProjectVariables.APP__VARIABLES_FIELD_UUIDNIS).getStringValue();
			
			if(UUIDNIS != null && !AppConstant.EMPTY_STRING.equalsIgnoreCase(UUIDNIS))
			{
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "UUIDNIS :"+UUIDNIS);
				
			}
			else
			{
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Direct DNIS");
				
				UUIDNIS=mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
			
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " DNIS is :"+UUIDNIS);
		    	mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_UUIDNIS).setValue(UUIDNIS);
			}
			
			getReportObject = new GetReportObject();
			ivrreportdata = getReportObject.createIVRReportObject();
			getReportObject.setIvrreportdata(ivrreportdata);
			ivrDataBean.setGetReportObject(getReportObject);
			
			mySession.setProperty("BEANREPORTDATA", getReportObject);

			/*Assigning call info data for report*/
			
			ip= InetAddress.getLocalHost();
			callInfo  = ivrreportdata.getCALLINFO();
			callInfo.setUNIQUECALLID(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue());
			callInfo.setSESSIONID(mySession.getSessionId());
			callInfo.setVXMLIP(String.valueOf(ip));
			callInfo.setSTARTDATETIME(dateFormat.format(new Date()));
			callInfo.setAPPNAME(mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue());
			callInfo.setCALLERTYPE("NA");
			callInfo.setCATEGORY("NA");
			callInfo.setCIRCLEID("NA");
			callInfo.setCLI(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
			callInfo.setDNIS(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
			callInfo.setDNISTYPE("NA");
			callInfo.setHUB(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp("HUB"));
			callInfo.setAGENTID("NA");
			callInfo.setAGENTEXTN("NA");
			callInfo.setTRANSCODE("NA");
			callInfo.setTRANSFERVDN("NA");
			callInfo.setUUIDATA("NA");
			callInfo.setABANDONEDFLAG("NA");
			callInfo.setTRANSTOIVR("NA");
			callInfo.setSKILLNAME("NA");
			callInfo.setLANGCODE("ENG");
			callInfo.setENDDATETIME("NA");
			callInfo.setDTMFPATH("NA");
			callInfo.setMENUPATH("NA");
			callInfo.setCALLERPATH("NA");
			callInfo.setLASTMENUACCESSED("NA");
			callInfo.setDISPOSITION("ID");
			callInfo.setCALLENDREASON("IVR_DISCONNECT");
			callInfo.setHOWCALLENDED("DISCONNECT");
			callInfo.setERRREASON("NA");
			callInfo.setLANGUAGEFROM("NA");
			callInfo.setLANGUAGETO("NA");
			callInfo.setTAGGING("NA");
			callInfo.setLASTNODEACCESSED("NA");
			ivrreportdata.setCALLINFO(callInfo);
			
			ivrDataBean.setGetReportObject(getReportObject);
			
			info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Application Name:: "+mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue());
			
			
			objIVRRoutingInfo = new IVRRoutingInfo();
			
			String circleID="NA";
			
			String Flag_Call_PRE_Back=mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_TRANSFER_CALL_BACK__PRE).getStringValue();
			String Flag_Call_POS_Back=mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_TRANSFER_CALL_BACK__POS).getStringValue();
			String Flag_UUIF7Formate=mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_UDATA_FAIL).getStringValue();
			
			if(!Flag_UUIF7Formate.equalsIgnoreCase("TRUE"))
			{
			 objIVRRoutingInfo.setDnis(UUIDNIS);
				  objIVRRoutingInfo = IVRDBServiceInstance.getInstance().getIVRRoutingInfo(ivrDataBean,objIVRRoutingInfo);
				  if(objIVRRoutingInfo!=null){
						circleID=objIVRRoutingInfo.getCircle();
						callInfo.setCIRCLEID(circleID);
						ivrreportdata.setCALLINFO(callInfo);
						//trunkID= objIVRRoutingInfo.getTrunkGroup();
						strLanguages = objIVRRoutingInfo.getLanguage();
						strDefaultLanguage = objIVRRoutingInfo.getDefaultLanguage();
				  }
				  else
				 {
						strDefaultLanguage = Constants.ENG;
						callInfo.setCIRCLEID(circleID);
						ivrreportdata.setCALLINFO(callInfo);
				 }
			}
			
			if(Flag_Call_PRE_Back.equalsIgnoreCase("TRUE")||Flag_Call_POS_Back.equalsIgnoreCase("TRUE")||Flag_UUIF7Formate.equalsIgnoreCase("TRUE"))
			{
				
				strDefaultLanguage = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_DEFAULT_LANGUAGE).getStringValue();
		    	
				
			}
			
		}catch (Exception e) {
			strDefaultLanguage = Constants.ENG;
			StackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
		}finally{
			
			System.out.println("In finaly yes");
			
			
			mySession.getVariableField(IProjectVariables.APP__VARIABLES, IProjectVariables.APP__VARIABLES_FIELD_ANI).setValue(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue());
			
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_DEFAULT_LANGUAGE).setValue(strDefaultLanguage);
			mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_REGINAL_LANGUAGE).setValue(strLanguages);
			
			System.out.println("Before file path");
		/*	
			String Yekyahai =AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp("HUB");
		
			String PropertyLocation = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp("ConfigFilePath");
			System.out.println("PropertyLocation:"+PropertyLocation);
			String EngPropertyLocation = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp("ENG_ConfigFilePath");
			System.out.println("EngPropertyLocation:"+EngPropertyLocation);
			String HINPropertyLocation = AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp("HIN_ConfigFilePath");
			System.out.println("HINPropertyLocation:"+HINPropertyLocation);*/
			
			
			
			
			
			
			//info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Property Location :"+PropertyLocation);
			
			//mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_CONFIG_FILE_PATH).setValue(PropertyLocation);
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_ENG__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.ENG_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_HIN__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.HIN_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_TAM__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.TAM_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_MAR__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.MAR_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_GUJ__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.GUJ_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_PUN__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.PUN_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_TEL__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.TEL_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_KAN__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.KAN_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_MAL__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.MAL_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_ORI__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.ORI_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_BEN__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.BEN_ConfigFilePath));
			mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_ASS__CONFIG_FILE_PATH).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.ASS_ConfigFilePath));
			//mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_INITIAL_PROMPT).setValue(AppProperties.GetInstance(AppConstant.IVR_CONFIG).getIVRProp(Constants.DATA_PA_0001));
			
			 String PropertyLocation=mySession.getVariableField(IProjectVariables.DMPROPERTY, ""+strDefaultLanguage+"_ConfigFilePath").getStringValue();
		     info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "PropertyLocation after lang select is :"+PropertyLocation);
			 mySession.getVariableField(IProjectVariables.DMPROPERTY, IProjectVariables.DMPROPERTY_FIELD_CONFIG_FILE_PATH).setValue(PropertyLocation);
			
		}

		
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Welcome_1925_PA_0001", "Default");
		next.setDebugId(6);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-MAY-11  07:12:38 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Transfer Flag is", "Flag:TransferCallBack_Pre").setDebugId(3241));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:UdataFail", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "true", false).setDebugId(3261)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("SetLinkDown", "UUIF7formate").setDebugId(3262));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:TransferCallBack_Pre", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "true", false).setDebugId(1954)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "session:ani", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "APP_VARIABLES:AltMdn", true).setDebugId(3228)).evaluate(mySession)) {
				actions = new java.util.ArrayList(3);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("APP_VARIABLES:ANI", "session:ani", false).setDebugId(3232));
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "ANI for start", "APP_VARIABLES:ANI").setDebugId(3242));
				actions.add(new com.avaya.sce.runtime.Next("MainMenu_1925_MN_0002", "PREPAID").setDebugId(3229));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(3);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("APP_VARIABLES:ANI", "APP_VARIABLES:AltMdn", false).setDebugId(3233));
				actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "ANI for start", "APP_VARIABLES:ANI").setDebugId(3243));
				actions.add(new com.avaya.sce.runtime.Next("MainMenu_1925_MN_0002", "DONGALE").setDebugId(3236));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "Flag:TransferCallBack_Pos", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "true", false).setDebugId(3259)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("MainMenu_1925_MN_0002", "POSTPAID").setDebugId(3260));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "CallData:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Yes", false).setDebugId(3226)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Link down", "").setDebugId(3246));
			actions.add(new com.avaya.sce.runtime.Next("SetLinkDown", "LinkDown").setDebugId(3227));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
		}


		actions = new java.util.ArrayList(1);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Normal user", "").setDebugId(3247));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
