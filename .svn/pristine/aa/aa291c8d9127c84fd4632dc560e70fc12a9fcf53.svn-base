package flow.subflow.HotFlash;

import java.util.Hashtable;

import org.apache.log4j.Logger;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.otherflows.model.HotFlashInfo;
import com.rcom.otherflows.model.IVRRoutingInfo;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.servion.util.AppConstant;
import com.servion.util.IVRDataBean;
import flow.IProjectVariables;
import flow.CallStart;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-12  10:47:09 PM
 */
public class Get_HotFlash_Message extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	private static Logger logger = Logger.getLogger(CallStart.class);
	
	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-12  10:47:09 PM
	 */
	public Get_HotFlash_Message() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-SEP-06  02:38:39 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-06  02:38:39 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-SEP-06  02:38:39 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Hot Flash Enable Disable Flag :", "HotFlashInfo:Flag").setDebugId(145));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "HotFlashInfo:Flag", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(142)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("HotFlash-Start_HotFlash").setDebugId(7));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("HotFlash-Return", "Return").setDebugId(144));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		//Declaring variables
		ITraceInfo info = null;
		IVRRoutingInfo ivrRoutingInfo = null;
		String strInitialAudios = "";
		String strLanguages = "";
		String strDefaultLanguage = "";
		String strNodeId ="",strInitialAudio = ""; 
		String strCircle = "",strCurrentLanguage = "",strActiveFlag = "";
		IVRDataBean ivrDataBean = null;
		Hashtable<String, HotFlashInfo> hotFlashHashTable = null;
		/*Setting logger and sesion id */
		ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDataBean);
		mySession.setProperty(AppConstant.IVRDataBean, (IVRDataBean) ivrDataBean);
		
		HotFlashInfo hotFlashInfo = new HotFlashInfo();
		hotFlashInfo.setAppName("RCOM_Corporate_Desk");
		
		//Assigning values for the variable
				info = mySession.getTraceOutput();
				strCircle = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue();
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Application name:"+mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue());
				//hotFlashInfo.setAppName(mySession.getVariable(IProjectVariables.APP__NAME).getSimpleVariable().getStringValue());
				info = mySession.getTraceOutput();
				strNodeId = mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO, IProjectVariables.HOT_FLASH_INFO_FIELD_ANNO_ID).getStringValue();
				strCurrentLanguage = mySession.getCurrentLanguage();
				hotFlashHashTable = IVRDBServiceInstance.getIVRDBInstance().getHotFlashInfo(ivrDataBean, hotFlashInfo);
				
				if(hotFlashHashTable!=null){
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Hot flash Key:"+strNodeId+AppConstant.UNDERSCORE+strCircle+AppConstant.UNDERSCORE+strCurrentLanguage);
					hotFlashInfo = hotFlashHashTable.get(strNodeId+AppConstant.UNDERSCORE+strCircle+AppConstant.UNDERSCORE+strCurrentLanguage);
					if(hotFlashInfo!=null){
						
						strActiveFlag = hotFlashInfo.getEnabledFlag();
						info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Hot flag enabled status:"+strActiveFlag);
						
						if((strActiveFlag.equalsIgnoreCase(AppConstant.Y))||(strActiveFlag.equalsIgnoreCase(AppConstant.Yes))){
							strInitialAudio = hotFlashInfo.getPhraseId();
							mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(strInitialAudio);
							mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO, IProjectVariables.HOT_FLASH_INFO_FIELD_FLAG).setValue(AppConstant.Yes);
						}else{
							mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO, IProjectVariables.HOT_FLASH_INFO_FIELD_FLAG).setValue(AppConstant.No);
						}
						
					}
				}else{
					mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO, IProjectVariables.HOT_FLASH_INFO_FIELD_FLAG).setValue(AppConstant.No);
				}

				
			}
		
	}

