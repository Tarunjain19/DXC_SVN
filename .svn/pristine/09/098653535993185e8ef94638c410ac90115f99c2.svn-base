package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.hni.model.IVRCspInfo;
import com.rcom.hni.resource.IVRDBServiceInstance;
import com.servion.triplefive.utils.Constants;
import com.servion.triplefive.utils.PrintStackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-13  03:47:40 PM
 */
public class FetchCustomerProfile extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		/*Declaring the variables*/
		IVRCspInfo ivrCspInfo = null;
		IVRDataBean ivrDataBean = null;
		ITraceInfo info = null;
		String strApplicationName = "", strPropertyFilePath = "", strReturnValue = "", strPropKey = "";
		String strLanguages = "", strPrefLanguage = "";
		AppProperties appProperties = null;
		
		/*Assigning values to variables*/
		info = mySession.getTraceOutput();
		ivrCspInfo = new IVRCspInfo();
		ivrCspInfo.setMdn(mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_MDN).getStringValue());
		appProperties = (AppProperties) mySession.getProperty(Constants.IvrPropertyInstance);
		
		/*Getting call data from sesion*/
		ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
		
		try {
			
			/*Invoking the DB dip*/
			ivrCspInfo = IVRDBServiceInstance.getInstance().getIVRCSPInfo(ivrDataBean, ivrCspInfo);
			
			
			if(ivrCspInfo!=null){
				
				info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> IVRCSP response:"+ivrCspInfo.toString());
				
				mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_DOB).setValue(ivrCspInfo.getDob());
				
				if(ivrCspInfo.getBarringList()!=null){
					if((ivrCspInfo.getBarringList()).contains("ABUSIVE")){
						mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_BARRING_LIST).setValue("ABUSIVE");
					}else{
						mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_BARRING_LIST).setValue("NA");
					}
				}
				else
					mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_BARRING_LIST).setValue("NA");
				
				if(ivrCspInfo.getStrRTN()!=null){
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> Retention :"+ivrCspInfo.getStrRTN());
					if(ivrCspInfo.getStrRTN().equalsIgnoreCase("RTN")){
						mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_RETENTION_LIST).setValue("RTN");
					}else{
						mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_RETENTION_LIST).setValue("NA");
					}
				}else{
					mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_RETENTION_LIST).setValue("NA");
				}
				
				mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_PREF_LANGUAGE).setValue(ivrCspInfo.getPreLang());
				if((ivrCspInfo.getPreLang()!=null)&&(!(ivrCspInfo.getPreLang().equalsIgnoreCase("NA")))){
					strPrefLanguage = ivrCspInfo.getPreLang();
					strLanguages = mySession.getVariableField(IProjectVariables.ROUTING_INFO, IProjectVariables.ROUTING_INFO_FIELD_CIRCLE_LANGUAGES).getStringValue();
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> Pref language is "+strPrefLanguage+", Circle languages "+strLanguages);
					if(strLanguages.contains(strPrefLanguage)){
						strApplicationName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
						strPropKey = strApplicationName+Constants.HYPEN+ivrCspInfo.getPreLang()+Constants.UNDERSCORE+Constants.PROPERTY_FILE_PATH;
						appProperties = (AppProperties) mySession.getProperty(Constants.IvrPropertyInstance);
						strPropertyFilePath = appProperties.getIVRProp(strPropKey);
						
						if((!strPropertyFilePath.equalsIgnoreCase("N"))||(strPropertyFilePath != null)){
							mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_CONFIG_FILE_PATH).setValue(strPropertyFilePath);	
							mySession.setCurrentLanguage(ivrCspInfo.getPreLang());
						}
							
						
						mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_PREF_LANGUAGE).setValue(ivrCspInfo.getPreLang());
					}else{
						mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_PREF_LANGUAGE).setValue("NA");
					}
					
				}else
					mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_PREF_LANGUAGE).setValue("NA");
				
				if(ivrCspInfo.getServiceType() != null)
				{
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Prepaid Service type : " +appProperties.getIVRProp(Constants.PREPAID_SERVICE_TYPE));
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Postpaid Service type : " +appProperties.getIVRProp(Constants.POSTPAID_SERVICE_TYPE));
					
					
					if(ivrCspInfo.getServiceType().contains("CDMA"))
					{
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_GSMFLAG).setValue(Constants.No);
					}
					else
					{
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_GSMFLAG).setValue(Constants.Yes);
					}
					
					if(ivrCspInfo.getServiceType().contains(appProperties.getIVRProp(Constants.PREPAID_SERVICE_TYPE)))
					{
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_PREPAID).setValue(true);
						
						if(ivrCspInfo.getHnipre() != null && ivrCspInfo.getHnipre().contains(Constants.HNI))
						{
							mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_HNICALLER).setValue(Constants.Yes);
						}
						else
						{
							mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_HNICALLER).setValue(Constants.No);
						}
					}
					else if(ivrCspInfo.getServiceType().contains(appProperties.getIVRProp(Constants.POSTPAID_SERVICE_TYPE)))
					{
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_POSTPAID).setValue(true);
						
						if(ivrCspInfo.getHnipos() != null && ivrCspInfo.getHnipos().contains(Constants.HNI))
						{
							mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_HNICALLER).setValue(Constants.Yes);
						}
						else
						{
							mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_HNICALLER).setValue(Constants.No);
						}
					}
					else
					{
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_PREPAID).setValue(false);
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_POSTPAID).setValue(false);
					}
				}
				
				if(ivrCspInfo.getHnipre()!=null)
					mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_HNIPOS).setValue(ivrCspInfo.getHnipre());
				else
					mySession.getVariableField(IProjectVariables.CUSTOMER_PROFILE, IProjectVariables.CUSTOMER_PROFILE_FIELD_HNIPOS).setValue("NA");
				
				if(ivrCspInfo.getHnipre() != null){
					
					if((ivrCspInfo.getHnipre()).contains("HNIPOS"))
						mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_HNICALLER).setValue(Constants.Yes);
				}
				
			}else{
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
			}
			
		} catch (Exception e) {
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
			PrintStackTrace.PrintException(e);
			info.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception:"+e.getMessage());
		}
		
		
	}
	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-13  03:47:40 PM
	 */
	public FetchCustomerProfile() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:39 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:39 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-OCT-27  02:07:39 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(173)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("SetLinkDown", "LinkDown").setDebugId(170));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "CustomerProfile:prefLanguage", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL_IGNORE, "Constants:NA", true).setDebugId(175)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.SetCurrentLanguage("CustomerProfile:prefLanguage", false).setDebugId(330));
				actions.add(new com.avaya.sce.runtime.Next("CheckRetentionList", "(Pref Lang Available)").setDebugId(180));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Initialize_MN_0003", "(Pref Lang Not Available)").setDebugId(181));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
