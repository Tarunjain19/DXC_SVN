package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.postpaid.model.IVRRoutingInfo;
import com.rcom.postpaid.resource.IVRDBServiceInstance;
import com.servion.postpaid.utils.Constants;
import com.servion.postpaid.utils.PrintStackTrace;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-13  12:55:26 PM
 */
public class FetchDNISRoutingInfo extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);

		/*Declaring the bean*/
		IVRRoutingInfo ivrRoutingInfo = null;
		IVRDataBean ivrDataBean = null;
		CALLINFO callInfo = null;
		IVRREPORTDATA ivrreportdata = null;
		GetReportObject getReportObject = null;
		ITraceInfo info = null;
		String strApplicationName = "", strPropKey = "";
		AppProperties appProperties = null;

		try {
			/*Assigning*/
			ivrRoutingInfo = new IVRRoutingInfo();
			info = mySession.getTraceOutput();
			appProperties = (AppProperties) mySession.getProperty(Constants.IvrPropertyInstance);
			
			/*set input parameters for DB dip*/
			ivrRoutingInfo.setDnis(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());

			/*Getting call data from sesion*/
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			getReportObject = ivrDataBean.getGetReportObject();
			ivrreportdata = getReportObject.getIvrreportdata();
			callInfo = ivrreportdata.getCALLINFO();

			/*Invoke DB*/
			ivrRoutingInfo = IVRDBServiceInstance.getInstance().getIVRRoutingInfo(ivrDataBean, ivrRoutingInfo);

			if(ivrRoutingInfo!=null){

				if(ivrRoutingInfo.getCircle()!=null){
					mySession.getVariableField(IProjectVariables.ROUTING_INFO, IProjectVariables.ROUTING_INFO_FIELD_CIRCLE).setValue(ivrRoutingInfo.getCircle());
					callInfo.setCIRCLEID(ivrRoutingInfo.getCircle());
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "IVR Circle:"+ivrRoutingInfo.getCircle());
				}
				else{
					info.writeln(ITraceInfo.TRACE_LEVEL_WARN, "!!!Circle is Null from DB!!!");
					mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
				}

				if(ivrRoutingInfo.getLanguage()!=null){
					mySession.getVariableField(IProjectVariables.ROUTING_INFO, IProjectVariables.ROUTING_INFO_FIELD_CIRCLE_LANGUAGES).setValue(ivrRoutingInfo.getLanguage());
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "IVR Circle Languages:"+ivrRoutingInfo.getLanguage());
				}
				else{
					info.writeln(ITraceInfo.TRACE_LEVEL_WARN, "!!!Circle Language is Null from DB!!!");
					mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
				}
				
				if(ivrRoutingInfo.getDefaultLanguage()!=null){
					mySession.getVariableField(IProjectVariables.ROUTING_INFO, IProjectVariables.ROUTING_INFO_FIELD_DEFAULT_LANGUAGE).setValue(ivrRoutingInfo.getDefaultLanguage());
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "IVR Default Language:"+ivrRoutingInfo.getDefaultLanguage());
					callInfo.setLANGCODE(ivrRoutingInfo.getDefaultLanguage());
					callInfo.setLANGUAGEFROM(ivrRoutingInfo.getDefaultLanguage());
					mySession.setCurrentLanguage(ivrRoutingInfo.getDefaultLanguage());
					
					strApplicationName = mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_APPLICATION_NAME).getStringValue();
					strPropKey = strApplicationName+Constants.HYPEN+mySession.getCurrentLanguage()+Constants.UNDERSCORE+Constants.PROPERTY_FILE_PATH;
					
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "--->Property file path: "+appProperties.getIVRProp(strPropKey));
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "--->Key: "+strPropKey);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "--->Property file path: "+appProperties.getIVRProp(strPropKey));
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "--->Allowed Main Menu count: "+appProperties.getIVRProp(Constants.AllowedMainMenuCount));
					
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> ApplicationName:"+strApplicationName);
					info.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---> ConfigFilePath:"+appProperties.getIVRProp(strPropKey));
					
					mySession.getVariableField(IProjectVariables.DMPROPERTIES, IProjectVariables.DMPROPERTIES_FIELD_CONFIG_FILE_PATH).setValue(appProperties.getIVRProp(strPropKey));
				}
				else{
					info.writeln(ITraceInfo.TRACE_LEVEL_WARN, "!!!Default Language is Null from DB!!!");
					mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
				}

			}
			else
			{
				mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
			}
		} catch (Exception e) {
			mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
			PrintStackTrace.PrintException(e);
			info.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Exception:"+e.getMessage());
		}

	}
	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-13  12:55:26 PM
	 */
	public FetchDNISRoutingInfo() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2015-NOV-08  05:50:16 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-NOV-08  05:50:16 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2015-NOV-08  05:50:16 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(26)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("CallData:transferReasonCode", "Constants:TR_0119", false).setDebugId(1926));
			actions.add(new com.avaya.sce.runtime.Next("SetLinkDown", "LinkDown").setDebugId(12));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:isCallBack", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Constants:yes", true).setDebugId(29)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Initialize_MN_0005", "MainMenu").setDebugId(28));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Welcome_PA_0002", "NotCallBack").setDebugId(31));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
