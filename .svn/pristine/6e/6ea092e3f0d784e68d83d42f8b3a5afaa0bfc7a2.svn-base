package flow.subflow.AccountInformation;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.RegisterCallBack;
import com.rcom.prepaid.resource.IVRDBServiceInstance;
import com.servion.hsd.utils.AppConstant;
import com.servion.hsd.utils.Constants;
import com.servion.hsd.utils.PrintStackTrace;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-APR-16  02:20:17 PM
 */
public class AccessDB_CallBackRequest extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS
	
	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);
		
		ITraceInfo info = mySession.getTraceOutput();
		RegisterCallBack registerCallBack = null;
		IVRDataBean ivrDataBean = null;
		String strApplicationName = "", strCircle = "", strLanguage = "", strMdn = "", strCategory = "";
		AppProperties appProperties = null;
		
		try {
			
			appProperties = AppProperties.GetInstance(AppConstant.IVR_CONFIG);
			ivrDataBean = (IVRDataBean) mySession.getProperty(Constants.IVRDATABEAN);
			
			strApplicationName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
			strMdn = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			strLanguage = mySession.getCurrentLanguage();
			strCircle = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE_ID).getStringValue();
			strCategory = appProperties.getIVRProp(Constants.IVR_CATEGORY); 
					
			registerCallBack = new RegisterCallBack();
			registerCallBack.setApplicationName(strApplicationName);
			registerCallBack.setCategory(strCategory);
			registerCallBack.setCircle(strCircle);
			registerCallBack.setLangugage(strLanguage);
			registerCallBack.setMdn(strMdn);

			registerCallBack = IVRDBServiceInstance.getInstance().registerCallBack(ivrDataBean, registerCallBack);
			
			if(registerCallBack.getFlag()!=null){
				if(registerCallBack.getFlag().equalsIgnoreCase(Constants.Success)){
					mySession.getVariableField(IProjectVariables.POSTPAID__CALL_BACK_REQUEST, IProjectVariables.POSTPAID__CALL_BACK_REQUEST_FIELD_STATUS).setValue(Constants.Success);
				}else{
					mySession.getVariableField(IProjectVariables.POSTPAID__CALL_BACK_REQUEST, IProjectVariables.POSTPAID__CALL_BACK_REQUEST_FIELD_STATUS).setValue(Constants.Failure);
				}
			}else{
				mySession.getVariableField(IProjectVariables.POSTPAID__CALL_BACK_REQUEST, IProjectVariables.POSTPAID__CALL_BACK_REQUEST_FIELD_STATUS).setValue(Constants.Failure);
			}
		} catch (Exception e) {
			PrintStackTrace.PrintException(e);
			mySession.getVariableField(IProjectVariables.POSTPAID__FLAG, IProjectVariables.POSTPAID__FLAG_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
		}
		
	}

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-APR-16  02:20:17 PM
	 */
	public AccessDB_CallBackRequest() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:15 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:15 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:39:15 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("Postpaid_CallData:repeatTries", "0", true).setDebugId(5303));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "Postpaid_Flag:isLinkDown", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Postpaid_Constants:yes", true).setDebugId(1647)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:HSDI_TR_0034", false).setDebugId(4813));
			actions.add(new com.avaya.sce.runtime.Next("AccountInformation-LinkDown", "LinkDown").setDebugId(1646));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Postpaid_CallBackRequest:status", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Postpaid_Constants:success", true).setDebugId(1650)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("AccountInformation-CallBackRequestSuccess_PA_0020", "CallBackSuccess").setDebugId(1649));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:HSDI_TR_0034", false).setDebugId(4814));
				actions.add(new com.avaya.sce.runtime.Next("AccountInformation-LinkDown", "CallBackFailed").setDebugId(1652));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
