package flow.subflow.CF_HotFlash;

import java.util.Hashtable;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.hp.utilities.IVRConstants;
import com.rcom.otherflows.model.HotFlashInfo;
import com.rcom.otherflows.resource.IVRDBServiceInstance;
import com.servion.util.AppConstant;
import com.servion.util.AppDataMap;
import com.servion.util.IVRDataBean;
import com.servion.util.StackTrace;
import flow.IProjectVariables;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 2016-MAR-09  03:17:08 PM
 */
public class Srv_fetchHotflash extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-MAR-09  03:17:08 PM
	 */
	public Srv_fetchHotflash() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		
		ITraceInfo trace = null;
		String appName = IVRConstants.EMPTY_QUOTES,nodeID = IVRConstants.EMPTY_QUOTES,circleID = IVRConstants.EMPTY_QUOTES,language = IVRConstants.EMPTY_QUOTES;
		String hotFlashKey = IVRConstants.EMPTY_QUOTES; 
		HotFlashInfo objHotFlashInfo = null;
		Hashtable<String, HotFlashInfo> objMapHotFlashInfo = null;
		IVRDataBean ivrDataBean = null;
		
		try{
			
			trace = mySession.getTraceOutput();
			appName = mySession.getVariableField(IProjectVariables.VAR__CONFIG,IProjectVariables.VAR__CONFIG_FIELD_APP_NAME).getStringValue();
			nodeID = mySession.getVariableField(IProjectVariables.HOT_FLASH_INFO,IProjectVariables.HOT_FLASH_INFO_FIELD_ANN_ID).getStringValue();
			circleID = mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_CIRCLE).getStringValue();
			language = mySession.getVariableField(IProjectVariables.CALL_INFO,IProjectVariables.CALL_INFO_FIELD_CURRENT_LANGUAGE).getStringValue();
			ivrDataBean = (IVRDataBean) mySession.getProperty(IVRConstants.IVRDATABEAN);
			
			hotFlashKey = AppConstant.HOTFLASH_KEY+appName;
			objHotFlashInfo = new HotFlashInfo();
			objHotFlashInfo.setAppName(appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Node ID :" +nodeID);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Application Name Inside Hot Flash :" +appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"Applevel hot Flash Key :" +hotFlashKey);
			objMapHotFlashInfo = (Hashtable<String, HotFlashInfo>) IVRDBServiceInstance.getIVRDBInstance().getHotFlashInfo(ivrDataBean, objHotFlashInfo);		
			trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"object Map Hot Flash Info :" +objMapHotFlashInfo);
			
			/**Take App Level Phrase **/
			
			if(objMapHotFlashInfo!=null){
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_INFO,"object Map Hot Flash Info :" +objMapHotFlashInfo.toString());
				
				AppDataMap.getInstance(appName).setAppData(hotFlashKey, objMapHotFlashInfo);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Hot Flash Value :"+AppDataMap.getInstance(appName).getAppData(hotFlashKey));
				mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_IS_HFFETCHED).setValue(IVRConstants.Y);
			}
		}
			catch(Exception e){
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Exception in HotFlash :"+e);
				StackTrace.PrintException(e);
			}finally{
				objMapHotFlashInfo = null;
				hotFlashKey = null;
				
			}
	
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Voice Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 2016-MAR-09  03:17:08 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		// TODO: Add your code here!

	}
	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:43 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("CF_HotFlash-Dat_GetHotflashMsg", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
