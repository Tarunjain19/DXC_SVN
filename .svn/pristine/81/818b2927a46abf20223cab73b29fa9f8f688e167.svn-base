package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.prepaid.model.FGDATAFirstTimeCaller;
import com.rcom.prepaid.model.ValidateDataCardNumberHSD;
import com.rcom.prepaid.resource.IVRDBServiceInstance;
import com.servion.hsd.utils.AppConstant;
import com.servion.hsd.utils.StackTrace;
import com.servion.util.IVRDataBean;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-JUN-23  04:02:43 PM
 */
public class CheckFirstTimeCaller extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-JUN-23  04:02:43 PM
	 */
	public CheckFirstTimeCaller() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:57 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:57 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-AUG-11  02:38:57 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:SUCCESS", true).setDebugId(10089)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:is4GLTEFirstTimeCaller", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(10090)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Check_SRCBAR", "FirstTime").setDebugId(10091));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Check_CallType", "NormalFlow").setDebugId(10094));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}


		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("LinkDownAnnc", "LinkDown").setDebugId(10086));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		FGDATAFirstTimeCaller fourGDataStatus =null;
		ITraceInfo trace = mySession.getTraceOutput();
		String staus = AppConstant.EMPTY_STRING,hostOutput = AppConstant.ERROR;
		String planType = AppConstant.EMPTY_STRING;
		
		try
		{
			/** Request Forming **/
			fourGDataStatus	=	new FGDATAFirstTimeCaller();
			fourGDataStatus.setMdn(mySession.getVariableField(IProjectVariables.GET_DATA_CARD, IProjectVariables.GET_DATA_CARD_FIELD_VALUE).getStringValue().trim());
			fourGDataStatus	=	IVRDBServiceInstance.getInstance().check4GDATAFirstTimeCaller((IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN), fourGDataStatus);
					
			if(fourGDataStatus.getstatus()!=null && fourGDataStatus.getstatus().length()>0)
			{
				if(fourGDataStatus.getstatus().equalsIgnoreCase(AppConstant.TRUE))
				{
					
						mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_4GLTEFIRST_TIME_CALLER).setValue(AppConstant.No);
						planType	    = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_PLAN_TYPE).getStringValue();
						trace.writeln(ITraceInfo.TRACE_LEVEL_INFO, "Plan Type :" +planType);
						if (planType.contains(AppConstant.PRE))
							mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_IS_PREPAID).setValue(AppConstant.Yes);
				}
			
				hostOutput = AppConstant.Success;
			}
		}
			catch(Exception e)
			{
				trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Error in IVR 4GLTE First Time Caller Check Hit :" +e);
				StackTrace.PrintException(e);
			}
				
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Status :" +hostOutput);
			mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostOutput);
			
		
	}
	
	
}
