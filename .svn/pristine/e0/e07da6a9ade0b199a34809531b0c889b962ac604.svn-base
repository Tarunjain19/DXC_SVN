package flow.subflow.Account_Information;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.rcom.ppp.hostinterface.view.RechargeDetails;
import com.servion.rcom.ppp.hostinterface.view.ReqLastRechargeDetails;
import com.servion.rcom.ppp.hostinterface.view.ResLastRechargeDetails;
import com.servion.rcom.ppp.hostinterface.wrapper.IVRWebService;
import com.servion.rcom.ppp.hostinterface.wrapper.IVRWebServiceImpl;
import com.servion.util.AppConstant;
import com.servion.util.IVRDataBean;
import com.servion.util.StackTrace;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-11  07:29:15 PM
 */
public class executeLastRechargeDetails extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-11  07:29:15 PM
	 */
	public executeLastRechargeDetails() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:18 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:18 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-05  10:39:18 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:HostResult", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(1979)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Account_Information-TGSM_PA_0025", "success").setDebugId(1984));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:transferReason", "TR_0015", true).setDebugId(3031));
			actions.add(new com.avaya.sce.runtime.Next("Account_Information-Linkdown", "network_failure").setDebugId(1986));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {

		ITraceInfo trace = mySession.getTraceOutput();
		String hostResult= AppConstant.ERROR;
		String responseCode = AppConstant.EMPTY_STRING , rechargeAmount = AppConstant.EMPTY_STRING,rechargeDate = AppConstant.EMPTY_STRING;
		String mdn = null;
		IVariable lastRechargeDetails= null;
		IVRDataBean objIVRDataBean = null;
		ReqLastRechargeDetails reqLastRechargeDetails = null;
		ResLastRechargeDetails resLastRechargeDetails = null;
		IVRWebService ivrWebService = null;
		ArrayList<RechargeDetails> listRechargeDetails = null;
		
		SimpleDateFormat sdfObject = new SimpleDateFormat(AppConstant.DATE_FORMAT_YYYYMMDD_SLASH);
		
		try
		{
			//Request Processing ......
			if(mySession.getVariableField(IProjectVariables.IVR__CSP__DETAILS, IProjectVariables.IVR__CSP__DETAILS_FIELD_RETENTION_LIST).getStringValue().equalsIgnoreCase("RTN"))
			{
				mdn = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_ANI).getStringValue();
			}
			else
			{
				mdn = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_MOBILE_NO).getStringValue();
			}
			reqLastRechargeDetails = new ReqLastRechargeDetails();
			objIVRDataBean = (IVRDataBean)mySession.getProperty(AppConstant.IVRDATABEAN);
			reqLastRechargeDetails.setMDN(mdn);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Last Recharge Host request :: "+reqLastRechargeDetails.toString());
			lastRechargeDetails = mySession.getVariable(IProjectVariables.LAST_RECHARGE_AND_PLAN_DETAILS);
			/** Host Response Value Append Happening Here **//*
			resLastRechargeDetails = new ResLastRechargeDetails();
			resLastRechargeDetails.setResponseCode("01");
			resLastRechargeDetails.setLastRechargeAmount("100");
			resLastRechargeDetails.setLastRechargeDate("20150311");
			*//** Ends Here **/
			
			//Response Processing ......
			ivrWebService = new IVRWebServiceImpl();
			resLastRechargeDetails = ivrWebService.executeLastRechargeDetails(objIVRDataBean,reqLastRechargeDetails);
			
			
			//moving to complex variable
			if(resLastRechargeDetails!=null){
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Last Recharge Host responce :: "+resLastRechargeDetails.toString());
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Last Recharge Response Code :: "+resLastRechargeDetails.getResponseCode());
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Last Recharge Last Recharge Detail List :: "+resLastRechargeDetails.getRechargeDetailsList());
				
				responseCode = resLastRechargeDetails.getResponseCode();
				listRechargeDetails= resLastRechargeDetails.getRechargeDetailsList();
				
				if(listRechargeDetails!=null){
					for(int i= 0; i<listRechargeDetails.size();i++){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Recharge Amount :: "+i+ ":" +listRechargeDetails.get(i).getAmount());
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Recharge Date :: "+i+ ":" +listRechargeDetails.get(i).getDate());
					}
					rechargeAmount = listRechargeDetails.get(0).getAmount();
					rechargeDate =listRechargeDetails.get(0).getDate();
					lastRechargeDetails.getComplexVariable().getField(IProjectVariables.LAST_RECHARGE_AND_PLAN_DETAILS_FIELD_SMS_LAST_RECHARGE_DATA).setValue(rechargeDate);
					
					Date covertDate = sdfObject.parse(rechargeDate);
					sdfObject = new SimpleDateFormat(AppConstant.DATE_FORMAT_YYYYMMDD);
					rechargeDate = sdfObject.format(covertDate);
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Recharge Date in DD format:" +rechargeDate);
					
				}
				
				
				lastRechargeDetails.getComplexVariable().getField(IProjectVariables.LAST_RECHARGE_AND_PLAN_DETAILS_FIELD_RESPONSE_CODE).setValue(resLastRechargeDetails.getResponseCode());
				lastRechargeDetails.getComplexVariable().getField(IProjectVariables.LAST_RECHARGE_AND_PLAN_DETAILS_FIELD_LAST_RECHARGE_AMOUNT).setValue(rechargeAmount);
				lastRechargeDetails.getComplexVariable().getField(IProjectVariables.LAST_RECHARGE_AND_PLAN_DETAILS_FIELD_LAST_RECHARGE_DATE).setValue(rechargeDate);
				
				if(AppConstant.zero.equalsIgnoreCase(responseCode)){
					hostResult =AppConstant.Success;
				}
			}
		}
		catch(Exception e)
		{
			StackTrace.PrintException(e);
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "ERROR Last Recharge :: "+e);
		}
		finally
		{
				mdn = null;
				reqLastRechargeDetails = null;
				resLastRechargeDetails = null;
				ivrWebService = null;
				trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Host Result : "+hostResult);
				mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_HOST_RESULT).setValue(hostResult);
			
		}
	}
}
