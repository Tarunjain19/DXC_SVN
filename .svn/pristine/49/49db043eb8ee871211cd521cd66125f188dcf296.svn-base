package flow;

import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.broadband.Constants;
import com.rcom.broadband.DynamicMenu;
import com.rcom.broadband.StackTrace;
import com.servion.util.AppProperties;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-JUN-17  05:57:52 PM
 */
public class setSelectedLang extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-JUN-17  05:57:52 PM
	 */
	public setSelectedLang() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
	
		String appName = null;
		String key = null;
		String initialPrompt = null;
		ArrayList<String> dynamicList = new ArrayList<String>();
		
		AppProperties ivrProperties = null;
		String dmPropertiesLocation = null;
		String language = null;
		try
		{
		
			ITraceInfo trace = mySession.getTraceOutput();
			ivrProperties = AppProperties.GetInstance(Constants.IVR_CONFIG);
			
			String toggleMenuRetValue = mySession.getVariableField(IProjectVariables.TOGGLE_LANG__MN, IProjectVariables.TOGGLE_LANG__MN_FIELD_VALUE).getStringValue();
			
			appName = ivrProperties.getIVRProp(Constants.APP_NAME);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "TOGGLE_LANG__MN_FIELD_VALUE : " +toggleMenuRetValue);
			
			AppProperties ivrConfigProperties = AppProperties.GetInstance(Constants.IVR_CONFIG);
			
			if(toggleMenuRetValue.equalsIgnoreCase(Constants.RET_VAL_LANG_REGIONAL))
			{
				String callCircle = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_CIRCLE).getStringValue();
				if(callCircle.equalsIgnoreCase(ivrConfigProperties.getIVRProp(Constants.CIRCLE_TAMILNADU)))
				{
					language = ivrConfigProperties.getIVRProp(Constants.LANGUAGE_TAMIL);
					dmPropertiesLocation = ivrConfigProperties.getIVRProp(Constants.DM_PROPERTIES_LOCATION_ + language);
				}
				else if(callCircle.equalsIgnoreCase(ivrConfigProperties.getIVRProp(Constants.CIRCLE_KARNATAKA)))
				{
					language = ivrConfigProperties.getIVRProp(Constants.LANGUAGE_KANNADA);
					dmPropertiesLocation = ivrConfigProperties.getIVRProp(Constants.DM_PROPERTIES_LOCATION_ + language);
				}
				else if(callCircle.equalsIgnoreCase(ivrConfigProperties.getIVRProp(Constants.CIRCLE_ANDHRAPRADESH)))
				{
					language = ivrConfigProperties.getIVRProp(Constants.LANGUAGE_TELUGU);
					dmPropertiesLocation = ivrConfigProperties.getIVRProp(Constants.DM_PROPERTIES_LOCATION_ + language);
				}
				else if(callCircle.equalsIgnoreCase(ivrConfigProperties.getIVRProp(Constants.CIRCLE_KERALA)))
				{
					language = ivrConfigProperties.getIVRProp(Constants.LANGUAGE_MALAYALAM);
					dmPropertiesLocation = ivrConfigProperties.getIVRProp(Constants.DM_PROPERTIES_LOCATION_ + language);
				}
			}
			else if(toggleMenuRetValue.equalsIgnoreCase(Constants.RET_VAL_LANG_HINDI))
			{
				language = ivrConfigProperties.getIVRProp(Constants.LANGUAGE_HINDI);
				dmPropertiesLocation = ivrConfigProperties.getIVRProp(Constants.DM_PROPERTIES_LOCATION_ + language);
			}
			else 
			{
				language = ivrConfigProperties.getIVRProp(Constants.LANGUAGE_ENGLISH);
				dmPropertiesLocation = ivrConfigProperties.getIVRProp(Constants.DM_PROPERTIES_LOCATION_ + language);
			}
			/*else
			{
				dmPropertiesLocation = ivrConfigProperties.getIVRProp(Constants.DM_PROPERTIES_LOCATION_ENGLISH);
				language = ivrConfigProperties.getIVRProp(Constants.LANGUAGE_ENGLISH);
			}*/
			
			
			mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__PROPERTIES_LOCATION).setValue(dmPropertiesLocation);
			mySession.setCurrentLanguage(language);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "DM__INPUT_FIELD_DM__PROPERTIES_LOCATION : " +dmPropertiesLocation);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "LANGUAGE : " +language);
			
			key = appName+Constants.HYPEN_SEPERATOR+Constants.DAKC_PA_0051;
			initialPrompt = ivrProperties.getIVRProp(key);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Prompt Key : "+key);
			dynamicList.add(language+Constants.WAVE);
			
			/** Invoking the playPromt method **/
			initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, Constants.NA, Constants.DAKC_PA_0051, trace);
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Initial Prompt returned from Dynamic formation : " +initialPrompt);
			
			mySession.getVariableField(IProjectVariables.DM__INPUT, IProjectVariables.DM__INPUT_FIELD_DM__INITIAL_PROMPT).setValue(initialPrompt);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Initial Prompt :: "+initialPrompt);
			
			
		} catch (Exception e)
		{
			StackTrace.PrintException(e);
		}
		
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("LangChangeAnn_PP", "Default");
		next.setDebugId(9075);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-SEP-28  04:13:57 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
