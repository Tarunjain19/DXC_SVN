package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.Data.utils.Constants;
import com.rcom.Data.utils.StackTrace;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2016-MAR-14  12:44:01 PM
 */
public class Check_Question extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2016-MAR-14  12:44:01 PM
	 */
	public Check_Question() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2016-APR-11  05:10:39 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Thankyou_CSAT_PA_0002", "Default");
		next.setDebugId(3717);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-APR-11  05:10:39 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2016-APR-11  05:10:39 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(3);
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "More Question Status:", "Flag:isMoreQuestion").setDebugId(3722));
		actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Return Valus is", "CSAT_MN_0001:ReturnCode").setDebugId(3999));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "CSAT_MN_0001:ReturnCode", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:success", true).setDebugId(3998)).evaluate(mySession)) {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "Flag:isMoreQuestion", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Yes", false).setDebugId(3720)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Play_CSAT", "More Question").setDebugId(3721));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			}

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		
		ITraceInfo trace =null;
		
		trace = mySession.getTraceOutput();
		String returnCode = "",returnValue = "";
		
		
		try{
			
			returnValue = mySession.getVariableField(IProjectVariables.CSAT__MN___0_0_0_1,IProjectVariables.CSAT__MN___0_0_0_1_FIELD_VALUE).getStringValue();
			returnCode = mySession.getVariableField(IProjectVariables.CSAT__MN___0_0_0_1,IProjectVariables.CSAT__MN___0_0_0_1_FIELD_RETURN_CODE).getStringValue();
			
			  trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"returnValue is :"+returnValue);
			    trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"returnCode is :"+returnCode);
			    
			
			if("Success".equalsIgnoreCase(returnCode)){
				
				String Array_count=mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_ARRAY_COUNT).getStringValue();
			    String Arrav_Inital= mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_INITAL_ARRAY).getStringValue();
			    String Arrav_End= mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_END_ARRAY).getStringValue();
			    
			    int Total_count=Integer.parseInt(Array_count);
			    int Array_start=Integer.parseInt(Arrav_Inital);
			    int Array_finish=Integer.parseInt(Arrav_End);
			    
			    trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Total_count After Paly the Question is :"+Total_count);
			    trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Array start  Value after play the question :"+Array_start);
			    trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Array End Value after play the question :"+Array_finish);
			    
			    
			    if(Array_finish>=Total_count)
			    {
			    	
			    	mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_MORE_QUESTION).setValue(Constants.No);
			    	
			    }
			    else
			    {
			    	 Array_start=Array_start+1;
			    	 Array_finish=Array_finish+1;
			    	 mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_INITAL_ARRAY).setValue(Array_start);
			    	 mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_END_ARRAY).setValue(Array_finish);
			    	 mySession.getVariableField(IProjectVariables.FLAG, IProjectVariables.FLAG_FIELD_IS_MORE_QUESTION).setValue(Constants.Yes);
			    	
			    }
			   
				
		}
		
	    
	   
	  
		
	   
		
		
		
		
	}
	
	catch (Exception e) {
		//strDefaultLanguage = Constants.ENG;
		StackTrace.PrintException(e);
		mySession.getVariableField(IProjectVariables.FLAG,IProjectVariables.FLAG_FIELD_ARRAY_COUNT).setValue(0);
		mySession.getVariableField(IProjectVariables.CALL_DATA, IProjectVariables.CALL_DATA_FIELD_IS_LINK_DOWN).setValue(Constants.Yes);
	}
	}
	
}
