package flow.subflow.Recharge_Account_Using_Cash_Card;

import java.util.ArrayList;
import java.util.List;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.rdtv.util.AppConstants;
import com.rcom.rdtv.util.DynamicMenu;
import com.rcom.rdtv.util.SayItSmartTime;
import com.rcom.rdtv.util.StackTrace;
import com.servion.rdtv.hostinterface.TransAccountDetails;
import com.servion.rdtv.hostservice.ReqAccountDetails;
import com.servion.rdtv.hostservice.ResAccountDetails;
import com.servion.util.AppProperties;
import com.servion.util.IVRDataBean;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAY-28  07:02:40 PM
 */
public class FetchAccountBalance extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAY-28  07:02:40 PM
	 */
	public FetchAccountBalance() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:51 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:51 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-MAR-03  03:45:51 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AppVariables:IsHostFailure", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(2616)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AppVariables:TransferPoint", "TransferPoints:RD01_TR_0015", false).setDebugId(2617));
			actions.add(new com.avaya.sce.runtime.Next("Recharge_Account_Using_Cash_Card-link_down", "linkdown").setDebugId(2618));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AppVariables:ForPurchase", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "CONSTANTS:YES", true).setDebugId(929)).evaluate(mySession)) {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Recharge_Account_Using_Cash_Card-RechargeSuccess_Annc", "forPurchase").setDebugId(930));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.Next("Recharge_Account_Using_Cash_Card-RechargeSuccess_Annc", "forRecharge").setDebugId(932));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;
			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo trace = mySession.getTraceOutput();
		String forPurchase,announceID,appName,key,initialPrompt,accountBalance,smartCardNumber = null;
		List<String> dynamicList = new ArrayList<>();
		ReqAccountDetails reqAccountDetails = null;
		ResAccountDetails resAccountDetails = null;
		TransAccountDetails transAccountDetails = null;
		try
		{
		forPurchase = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_FOR_PURCHASE).getStringValue();
		appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
		
		/** WS-GetAccountDetails Request Formation **/
		smartCardNumber = mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_SCNUMBER).getStringValue();
		reqAccountDetails = new ReqAccountDetails();
		reqAccountDetails.setAccountId(smartCardNumber);
		reqAccountDetails.setStartDate(SayItSmartTime.accountDetailsDateFormat());
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "GetAccountDetails Host Request :: "+reqAccountDetails.toString());
		
		/** WS Host Interaction **/
		transAccountDetails = new TransAccountDetails();
		resAccountDetails = transAccountDetails.getHostInterface((IVRDataBean) mySession.getProperty(AppConstants.IVRDATABEAN), reqAccountDetails);
		
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "GetAccountDetails Host Response :: "+resAccountDetails.toString());
		if(resAccountDetails.getResponseCode().equalsIgnoreCase(AppConstants.zero))
		{
		accountBalance = resAccountDetails.getAccBalance();	
		if(forPurchase.equalsIgnoreCase(AppConstants.Yes))
		{
			announceID = AppConstants.RD01_PA_0036;
			dynamicList.add(mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_PACKNAME).getStringValue());
			dynamicList.add(accountBalance+AppConstants.currency);
		}
		else
		{
			announceID = AppConstants.RD01_PA_0035;
			dynamicList.add(accountBalance+AppConstants.currency);
		}
		/** Check Balance-Flag processing **/
		if(Double.valueOf(accountBalance)>AppConstants.Zero)
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_BALANCE_GREATER_ZERO).setValue(AppConstants.Yes);
		else
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_BALANCE_GREATER_ZERO).setValue(AppConstants.No);
		
		/** Forming the Dynamic Prompt **/
		key = appName+AppConstants.SEPERATOR_HYPEN+announceID;
		initialPrompt = AppProperties.GetInstance(AppConstants.IVR_CONFIG_PROPERTIES).getIVRProp(key);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Dynamic Prompt Key "+announceID+" :: "+key);
		
		/** Invoking the playPromt method **/
		initialPrompt = DynamicMenu.playPrompt(dynamicList, initialPrompt, AppConstants.NA, announceID, trace);
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Confirmation Initial Prompt "+announceID+" :: "+initialPrompt);
		}
		else
			mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
		
	}catch(Exception e)
	{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_IS_HOST_FAILURE).setValue(AppConstants.Yes);
	StackTrace.PrintException(e);
	}
	finally
	{initialPrompt=null;accountBalance = null;appName=null;key=null;dynamicList=null;announceID=null;forPurchase=null;reqAccountDetails=null;resAccountDetails=null;transAccountDetails=null;smartCardNumber=null;}
	}
	
	public static void main(String[] args) {
		String a = "12.0";
		if(Double.valueOf(a)>0)
			System.out.println("SUCCESS");
		else
			System.out.println("FAILS");
	}
}
