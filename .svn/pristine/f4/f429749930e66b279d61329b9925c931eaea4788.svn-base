package flow;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.rcom.dnd.model.IVRRoutingInfo;
import com.rcom.dnd.resource.IVRDBServiceInstance;
import com.dnd.util.AppConstant;
import com.dnd.util.LoadProperty;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.IVRDataBean;
import com.dnd.util.StackTrace;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-17  11:59:03 AM
 */
public class Set_DND_MN_0001 extends com.avaya.sce.runtime.Data {

	String[] arrLanguage=null;
	String appName = null;
	ITraceInfo trace = null;
	
	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-17  11:59:03 AM
	 */
	public Set_DND_MN_0001() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-23  01:04:17 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-23  01:04:17 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-23  01:04:17 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "appVariables:networkError", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "constant:yes", true).setDebugId(2660)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("appVariables:TransferCode", "TransferCodes:DND_TR_0002", false).setDebugId(2661));
			actions.add(new com.avaya.sce.runtime.Next("LinKDown_DND_PA_0020", "Network failure").setDebugId(2662));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("DND_PA_0001", "Success").setDebugId(741));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	

	@Override
	public void requestBegin(SCESession mySession) {
		
		IVRRoutingInfo ivrRoutingInfo = null;
		
		String circle = null;
		String languagesFromDB = null;
		StringBuilder initialPrompt = new StringBuilder(100);
		try
		{	/** Routing-Info Request Formation **/
			trace = mySession.getTraceOutput();
			ivrRoutingInfo = new IVRRoutingInfo();
			ivrRoutingInfo.setDnis(mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request-Info DB Request :: DNIS :: "+ivrRoutingInfo.toString());
			
			/** DB Interaction For Routing-Info Response **/
			ivrRoutingInfo = IVRDBServiceInstance.getIVRDBInstance().getIVRRoutingInfo((IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN), ivrRoutingInfo);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request-Info DB Response :: "+ivrRoutingInfo.toString());
			circle = ivrRoutingInfo.getCircle();
			
			IVRDataBean ivrDataBean = null;
			
			ivrDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
			GetReportObject getReportObject = ivrDataBean.getGetReportObject();
			IVRREPORTDATA ivrreportdata = getReportObject.getIvrreportdata();
			CALLINFO callInfo = ivrreportdata.getCALLINFO();
			
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Circle : " +circle);
			if(circle !=null)
			{
				mySession.getVariableField(IProjectVariables.CIRCLE).setValue(circle);
				callInfo.setCIRCLEID(circle);
			}
			else
			{
				mySession.getVariableField(IProjectVariables.CIRCLE).setValue(AppConstant.EMPTY);
			}
			ivrreportdata.setCALLINFO(callInfo);
			
			languagesFromDB = ivrRoutingInfo.getLanguage();
			
			if(languagesFromDB != null)
			{
				//********************
				
				String[] languages = new String[languagesFromDB.split(",").length];
				languages = languagesFromDB.split(",");
				
				String toContinueInPromptID = LoadProperty.getivrconfigProp(AppConstant.TO_CONTINUE_IN_PROMPT_ID);
				
				int langIndex = 1;
				for(String lang : languages)
				{
					initialPrompt.append(lang).append("_").append(toContinueInPromptID);
					initialPrompt.append("*");
					initialPrompt.append(LoadProperty.getivrconfigProp(AppConstant.LANGUAGE_ + lang + AppConstant._PROMPT_ID));
					initialPrompt.append("*");
					initialPrompt.append(LoadProperty.getivrconfigProp(lang + AppConstant._PRESS_ +langIndex));
					if(languages.length!=langIndex)
					initialPrompt.append("*");
					langIndex++;
				}
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Language selection initial prompt : " +initialPrompt.toString());
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt.toString());
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_MORE_OPTION_DYNAMIC_VALUES).setValue(languagesFromDB);
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_MORE_OPTION_COUNT).setValue(languagesFromDB.split(",").length);
				
				
				//*******************
				/*arrLanguage = new String[9];
				arrLanguage = ivrRoutingInfo.getLanguage().split(AppConstant.SEPERATOR_COMMA);
				
				*//** Invocation for Dynamic Value Formation **//*
				appName = mySession.getVariableField(IProjectVariables.APP__NAME).getStringValue();
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, AppConstant.DND_MN_0001+" Dynamic Menu Key :: "+appName+AppConstant.SEPERATOR_HYPEN+AppConstant.DND_MN_0001);
				//initialPrompt = AppProperties.getInstance().getivrconfigProp(appName+AppConstant.SEPERATOR_HYPEN+AppConstant.DND_MN_0001);
				initialPrompt = LoadProperty.getivrconfigProp(appName+AppConstant.SEPERATOR_HYPEN+AppConstant.DND_MN_0001);
				for(int i=0;i<arrLanguage.length;i++){arrLanguage[i] = arrLanguage[i]+AppConstant.wave;}
				languageSelection(mySession);*/
			}
			
			else
			{
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Applicable languages from DB is null, hence proceeding to link down.");
				mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstant.Yes);
			}
		}
		catch(Exception e)
		{mySession.getVariableField(IProjectVariables.APP_VARIABLES, IProjectVariables.APP_VARIABLES_FIELD_NETWORK_ERROR).setValue(AppConstant.Yes);
		StackTrace.PrintException(e);}
		finally
		{arrLanguage = null;appName=null;trace=null;initialPrompt=null;}
		
	}
	
	/*public void languageSelection(SCESession mySession)
	{	*//** Storing dead-end initial Prompt into DM-Parameter **//*
		initialPrompt = DynamicMenu.playPrompt(arrLanguage, initialPrompt, String.valueOf(arrLanguage.length), AppConstant.DND_MN_0001, trace);
		trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,AppConstant.DND_MN_0001+" Injecting Initial Prompt ::"+initialPrompt);
		mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER, IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
	}*/
}
