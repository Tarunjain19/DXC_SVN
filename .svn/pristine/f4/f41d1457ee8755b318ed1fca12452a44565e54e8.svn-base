package flow;

import java.text.SimpleDateFormat;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.rcom.hostinterface.util.Utilities;
import com.servion.rcom.hostinterface.view.ReqTeleVerify;
import com.servion.rcom.hostinterface.view.ResTeleVerify;
import com.servion.rcom.hostinterface.wrapper.IVRWebService;
import com.servion.util.*;
import com.servion.rcom.hostinterface.*;
import org.apache.log4j.Logger;
/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-OCT-24  11:13:31 AM
 */
public class Dat_CheckTechnology extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-OCT-24  11:13:31 AM
	 */
	public Dat_CheckTechnology() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:34 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Call_ValidateTVPStatus");
		next.setDebugId(328);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:34 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-JUL-12  01:45:34 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		ITraceInfo itraceInfo = null;
	/*	  try
		    {
		IVRDataBean ivrDataBean = new IVRDataBean();
	    ReqTeleVerify req= new ReqTeleVerify();
	    IVRWebService   ivrWebService;
	    Utilities uti=new Utilities();
	    Logger logger;
	    SimpleDateFormat dateFormat = new SimpleDateFormat("DD/MM/YYYY");
	  
	    String requestID=uti.generateUniqueID();
	    String mdn=mySession.getVariableField(IProjectVariables.TVP__VARS, IProjectVariables.TVP__VARS_FIELD_MDN).getStringValue();
	    String languageID=mySession.getVariableField(IProjectVariables.TVP__VARS,IProjectVariables.TVP__VARS_FIELD_CURRENT__LANGUAGE).getStringValue();
	    String requestType="TVP_STATUS_UPDATE";//need to put in config file & app constants
	    String source="IVR";
	    String date=uti.getTimeStamp(logger, dateFormat);
	    req.setRequestId(requestID);
	    req.setLangId(languageID);
	    req.setMDN(mdn);
	    req.setREQUESTTYPE(requestType);
	    req.setSOURCE(source);
	    req.setREQUESTDATE(date);
	    itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Request for TVP status" + req.toString());
			ResTeleVerify resTeleVerify = ivrWebService.executeTeleVerifyRequest(ivrDataBean, req);
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_CUSTOMER_CATEGORY).setValue(resTeleVerify.getCUSTOMER_CATEGORY());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_CUSTOMER_TYPE).setValue(resTeleVerify.getCUSTOMER_TYPE());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_DATA_CONSCENT).setValue(resTeleVerify.getDATA_CONSENT());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_DOB).setValue(resTeleVerify.getDOB());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_OUT_MSG).setValue(resTeleVerify.getOUT_MSG());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_OUT_STATUS).setValue(resTeleVerify.getOUT_STATUS());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_OUT_STATUS_CODE).setValue(resTeleVerify.getOUT_STATUS_CODE());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_POAID_DETAILS).setValue(resTeleVerify.getPOA_ID_DETAILS());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_POAISSUE_DATE).setValue(resTeleVerify.getPOA_ISSUE_DATE());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_POATYPE).setValue(resTeleVerify.getPOA_TYPE());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_PRODUCT_TYPE).setValue(resTeleVerify.getPRODUCT_TYPE());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_RESPONSE_CODE).setValue(resTeleVerify.getResponseCode());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_SERVICE_TYPE).setValue(resTeleVerify.getSERVICE_TYPE());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_TECHNOLOGY_TYPE).setValue(resTeleVerify.getTECHNOLOGY_TYPE());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_TVP_STATUS).setValue(resTeleVerify.getTVP_STATUS());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_UPDATE_DATE).setValue(resTeleVerify.getUPDATE_DATE());
			mySession.getVariableField(IProjectVariables.TIBCO__VALIDATION__RES,IProjectVariables.TIBCO__VALIDATION__RES_FIELD_PRODUCT_TYPE).setValue(resTeleVerify.getPRODUCT_TYPE());
			
	    }
	    catch(Exception e)
	    {
	    	 itraceInfo.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Exception in TVP status call" + e);
	    }
*/

	}
}
