package flow;

import java.util.ArrayList;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.servion.prepaid.report.GetReportObject;
import com.servion.prepaid.report.IVRREPORTDATA;
import com.servion.prepaid.report.IVRREPORTDATA.CALLINFO;
import com.servion.util.AppConstant;
import com.servion.util.AppProperties;
import com.servion.util.DynamicMenu;
import com.servion.util.IVRDataBean;
import com.servion.util.StackTrace;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2015-MAR-17  02:02:49 PM
 */
public class Set_ChangeLangMenu extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2015-MAR-17  02:02:49 PM
	 */
	public Set_ChangeLangMenu() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:20 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("ChangeLanguageMenu");
		next.setDebugId(5338);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:20 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2017-AUG-29  03:09:20 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {

		
		/** Declaration **/
		String initialPrompt = AppConstant.EMPTY_STRING,grammarValue = AppConstant.EMPTY_STRING,circleLangCode = AppConstant.EMPTY_STRING;
		String dynamicWaves =  AppConstant.EMPTY_STRING,appName = AppConstant.EMPTY_STRING,key = AppConstant.EMPTY_STRING,circleLanguage = AppConstant.EMPTY_STRING;
		String menuOption =AppConstant.EMPTY_STRING,currentLang = AppConstant.EMPTY_STRING,langKey = AppConstant.EMPTY_STRING;
		String[] arrayLangCode = null;
		ArrayList<String> arrLanguage=null;
		ITraceInfo trace =null;
		GetReportObject objGetReportObject = null;
		IVRREPORTDATA objIVRREPORTDATA= null;
		CALLINFO objCALLINFO = null;
		IVRDataBean objIVRDataBean = null;
		
		try {
			/**Assign**/
			trace = mySession.getTraceOutput();
			objIVRDataBean = (IVRDataBean) mySession.getProperty(AppConstant.IVRDATABEAN);
			appName = mySession.getVariableField(IProjectVariables.APP_NAME).getStringValue();
			key = appName+AppConstant.SEPERATOR_HYPEN+AppConstant.MN_0034;
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"application Name :"+appName);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language initial Prompt Key :"+key);
			
			dynamicWaves = AppProperties.GetInstance(AppConstant.DYN_MENU).getIVRProp(key);
			trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language initial Prompt :"+dynamicWaves);
			arrLanguage = new ArrayList<>();
			/** Form Dynamic Initial Prompt**/
			circleLangCode = mySession.getVariableField(IProjectVariables.APP_VARIABLES,IProjectVariables.APP_VARIABLES_FIELD_LANGUAGE_LIST).getStringValue();
			
			if(circleLangCode!=null){
				arrayLangCode = circleLangCode.split(AppConstant.SEPERATOR_COMMA);
				int j = 0;
				for(int i = 0;i<arrayLangCode.length;i++){
					/*key = AppConstant.Language_Code+arrayLangCode[i];
					trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Language_Code Key:"+key);*/
					circleLanguage=arrayLangCode[i];
					currentLang = mySession.getCurrentLanguage();
					
					if(!currentLang.equalsIgnoreCase(circleLanguage)){
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Circle Language : "+i+" :"+circleLanguage);
						arrLanguage.add(circleLanguage+AppConstant.wave);
						if(!menuOption.equals(AppConstant.EMPTY_STRING)){
							menuOption = menuOption+AppConstant.SEPERATOR_COMMA;
						}
						menuOption = menuOption+circleLanguage;
						
						langKey = AppConstant.LANG_+j;
						dynamicWaves = dynamicWaves.replaceAll(langKey,circleLanguage);
						trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Dynamic Wave :" +dynamicWaves);
						j++;
					}
				}
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Final Dynamic Wave :" +dynamicWaves);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Circle Wave File ::"+arrLanguage);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Menu Option : "+menuOption);
				
				/** Form Initial Prompt**/
				String count = String.valueOf(arrLanguage.size());
				DynamicMenu objDynamicMenu = new DynamicMenu();
				initialPrompt=objDynamicMenu.playPrompt(arrLanguage, dynamicWaves, count, trace);
				
				objGetReportObject = objIVRDataBean.getGetReportObject(); 
				objIVRREPORTDATA = objGetReportObject.getIvrreportdata();
				objCALLINFO = objIVRREPORTDATA.getCALLINFO();
				objCALLINFO.setLANGUAGEFROM(mySession.getCurrentLanguage());
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Initial Prompt ::"+initialPrompt);
				trace.writeln(ITraceInfo.TRACE_LEVEL_DEBUG,"Menu Option : "+menuOption);
				
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_INITIAL_PROMPT).setValue(initialPrompt);
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MORE_OPTION_COUNT).setValue(count);
				mySession.getVariableField(IProjectVariables.DM_INPUT_PARAMETER,IProjectVariables.DM_INPUT_PARAMETER_FIELD_MENU_OPTION).setValue(menuOption);
				
			}
		} catch (Exception e) {
			trace.writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Exception in Change Language :"+e);
			StackTrace.PrintException(e);
		}
		
	
	}
}
